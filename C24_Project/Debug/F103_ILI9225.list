
F103_ILI9225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c630  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b58  0800c740  0800c740  0001c740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d298  0800d298  000202b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d298  0800d298  000202b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d298  0800d298  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d298  0800d298  0001d298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d29c  0800d29c  0001d29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  0800d2a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200002b8  0800d554  000202b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  0800d554  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202dd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112d9  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fba  00000000  00000000  000315f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000345b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e41  00000000  00000000  00035818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019de5  00000000  00000000  00036659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b51  00000000  00000000  0005043e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fbc3  00000000  00000000  00065f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fc8  00000000  00000000  000f5b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000fbb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002b8 	.word	0x200002b8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c728 	.word	0x0800c728

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002bc 	.word	0x200002bc
 800014c:	0800c728 	.word	0x0800c728

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_f2uiz>:
 8000b28:	0042      	lsls	r2, r0, #1
 8000b2a:	d20e      	bcs.n	8000b4a <__aeabi_f2uiz+0x22>
 8000b2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b30:	d30b      	bcc.n	8000b4a <__aeabi_f2uiz+0x22>
 8000b32:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b3a:	d409      	bmi.n	8000b50 <__aeabi_f2uiz+0x28>
 8000b3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b44:	fa23 f002 	lsr.w	r0, r3, r2
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	4770      	bx	lr
 8000b50:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b54:	d101      	bne.n	8000b5a <__aeabi_f2uiz+0x32>
 8000b56:	0242      	lsls	r2, r0, #9
 8000b58:	d102      	bne.n	8000b60 <__aeabi_f2uiz+0x38>
 8000b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <DELAY_TIM_Init>:
 *      Author: Administrator
 *      By HTT
 */
#include <DHT11.h>
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f007 fa61 	bl	8008038 <HAL_TIM_Base_Start>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8000b92:	bf00      	nop
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d3f9      	bcc.n	8000b94 <DELAY_TIM_Us+0x16>
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <DHT_DelayInit>:
	while(__HAL_TIM_GET_COUNTER(htim)<(1000*Time)){}
}


static void DHT_DelayInit(DHT_Name* DHT)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DHT->Timer);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffd5 	bl	8000b68 <DELAY_TIM_Init>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <DHT_DelayUs>:
static void DHT_DelayUs(DHT_Name* DHT, uint16_t Time)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DHT->Timer, Time);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ffcf 	bl	8000b7e <DELAY_TIM_Us>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <DHT_SetPinOut>:

static void DHT_SetPinOut(DHT_Name* DHT)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	891b      	ldrh	r3, [r3, #8]
 8000c02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f107 0208 	add.w	r2, r7, #8
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f005 f954 	bl	8005ec4 <HAL_GPIO_Init>
}
 8000c1c:	bf00      	nop
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <DHT_SetPinIn>:
static void DHT_SetPinIn(DHT_Name* DHT)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	891b      	ldrh	r3, [r3, #8]
 8000c3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	f107 0208 	add.w	r2, r7, #8
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f005 f936 	bl	8005ec4 <HAL_GPIO_Init>
}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <DHT_WritePin>:
static void DHT_WritePin(DHT_Name* DHT, uint8_t Value)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->PORT, DHT->Pin, Value);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68d8      	ldr	r0, [r3, #12]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	891b      	ldrh	r3, [r3, #8]
 8000c74:	78fa      	ldrb	r2, [r7, #3]
 8000c76:	4619      	mov	r1, r3
 8000c78:	f005 fabf 	bl	80061fa <HAL_GPIO_WritePin>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <DHT_ReadPin>:
static uint8_t DHT_ReadPin(DHT_Name* DHT)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	uint8_t Value;
	Value =  HAL_GPIO_ReadPin(DHT->PORT, DHT->Pin);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	891b      	ldrh	r3, [r3, #8]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4610      	mov	r0, r2
 8000c98:	f005 fa98 	bl	80061cc <HAL_GPIO_ReadPin>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	73fb      	strb	r3, [r7, #15]
	return Value;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <DHT_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DHT_Start(DHT_Name* DHT)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]
	DHT_SetPinOut(DHT);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff96 	bl	8000be8 <DHT_SetPinOut>
	DHT_WritePin(DHT, 0);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffce 	bl	8000c60 <DHT_WritePin>
	DHT_DelayUs(DHT, DHT->Type);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff7b 	bl	8000bc6 <DHT_DelayUs>
	DHT_WritePin(DHT, 1);
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffc4 	bl	8000c60 <DHT_WritePin>
	DHT_DelayUs(DHT, 45);
 8000cd8:	212d      	movs	r1, #45	; 0x2d
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff73 	bl	8000bc6 <DHT_DelayUs>
	DHT_SetPinIn(DHT);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff9f 	bl	8000c24 <DHT_SetPinIn>

	if (!DHT_ReadPin(DHT))
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ffcc 	bl	8000c84 <DHT_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10e      	bne.n	8000d10 <DHT_Start+0x66>
	{
		DHT_DelayUs(DHT, 85	);
 8000cf2:	2155      	movs	r1, #85	; 0x55
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff66 	bl	8000bc6 <DHT_DelayUs>
		if(DHT_ReadPin(DHT))
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffc2 	bl	8000c84 <DHT_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <DHT_Start+0x62>
		{
			Response = 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	e001      	b.n	8000d10 <DHT_Start+0x66>
		}
		else Response = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]
	}
	while(DHT_ReadPin(DHT));
 8000d10:	bf00      	nop
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffb6 	bl	8000c84 <DHT_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f9      	bne.n	8000d12 <DHT_Start+0x68>

	return Response;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <DHT_Read>:
static uint8_t DHT_Read(DHT_Name* DHT)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
	DHT_SetPinIn(DHT);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff75 	bl	8000c24 <DHT_SetPinIn>
	for(int i = 0; i<8; i++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	e035      	b.n	8000dac <DHT_Read+0x84>
	{
		while(!DHT_ReadPin(DHT));
 8000d40:	bf00      	nop
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ff9e 	bl	8000c84 <DHT_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f9      	beq.n	8000d42 <DHT_Read+0x1a>
		DHT_DelayUs(DHT, 35);
 8000d4e:	2123      	movs	r1, #35	; 0x23
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff38 	bl	8000bc6 <DHT_DelayUs>
		if(!DHT_ReadPin(DHT))
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ff94 	bl	8000c84 <DHT_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10e      	bne.n	8000d80 <DHT_Read+0x58>
		{
			Value &= ~(1<<(7-i));
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	f1c3 0307 	rsb	r3, r3, #7
 8000d68:	2201      	movs	r2, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	b25a      	sxtb	r2, r3
 8000d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e00b      	b.n	8000d98 <DHT_Read+0x70>
		}
		else Value |= 1<<(7-i);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2201      	movs	r2, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	b25a      	sxtb	r2, r3
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	73fb      	strb	r3, [r7, #15]
		while(DHT_ReadPin(DHT));
 8000d98:	bf00      	nop
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff72 	bl	8000c84 <DHT_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f9      	bne.n	8000d9a <DHT_Read+0x72>
	for(int i = 0; i<8; i++)
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	3301      	adds	r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b07      	cmp	r3, #7
 8000db0:	ddc6      	ble.n	8000d40 <DHT_Read+0x18>
	}
	return Value;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <DHT_Init>:

//************************** High Level Layer ********************************************************//
void DHT_Init(DHT_Name* DHT, uint8_t DHT_Type, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DH_PORT, uint16_t DH_Pin)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	72fb      	strb	r3, [r7, #11]
	if(DHT_Type == DHT11)
 8000dcc:	7afb      	ldrb	r3, [r7, #11]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d104      	bne.n	8000ddc <DHT_Init+0x20>
	{
		DHT->Type = DHT11_STARTTIME;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f244 6250 	movw	r2, #18000	; 0x4650
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	e006      	b.n	8000dea <DHT_Init+0x2e>
	}
	else if(DHT_Type == DHT22)
 8000ddc:	7afb      	ldrb	r3, [r7, #11]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d103      	bne.n	8000dea <DHT_Init+0x2e>
	{
		DHT->Type = DHT22_STARTTIME;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000de8:	801a      	strh	r2, [r3, #0]
	}
	DHT->PORT = DH_PORT;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	60da      	str	r2, [r3, #12]
	DHT->Pin = DH_Pin;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	8b3a      	ldrh	r2, [r7, #24]
 8000df4:	811a      	strh	r2, [r3, #8]
	DHT->Timer = Timer;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	605a      	str	r2, [r3, #4]
	DHT_DelayInit(DHT);
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f7ff fed5 	bl	8000bac <DHT_DelayInit>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <DHT_ReadTempHum>:

uint8_t DHT_ReadTempHum(DHT_Name* DHT,uint8_t *repon)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
	uint8_t Temp1, Temp2, RH1, RH2;
	uint16_t Temp, Humi, SUM = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	82fb      	strh	r3, [r7, #22]
	*repon = DHT_Start(DHT);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff46 	bl	8000caa <DHT_Start>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	701a      	strb	r2, [r3, #0]
	RH1 = DHT_Read(DHT);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ff7e 	bl	8000d28 <DHT_Read>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	757b      	strb	r3, [r7, #21]
	RH2 = DHT_Read(DHT);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff79 	bl	8000d28 <DHT_Read>
 8000e36:	4603      	mov	r3, r0
 8000e38:	753b      	strb	r3, [r7, #20]
	Temp1 = DHT_Read(DHT);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff74 	bl	8000d28 <DHT_Read>
 8000e40:	4603      	mov	r3, r0
 8000e42:	74fb      	strb	r3, [r7, #19]
	Temp2 = DHT_Read(DHT);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff6f 	bl	8000d28 <DHT_Read>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	74bb      	strb	r3, [r7, #18]
	SUM = DHT_Read(DHT);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff6a 	bl	8000d28 <DHT_Read>
 8000e54:	4603      	mov	r3, r0
 8000e56:	82fb      	strh	r3, [r7, #22]
	Temp = Temp1;
 8000e58:	7cfb      	ldrb	r3, [r7, #19]
 8000e5a:	823b      	strh	r3, [r7, #16]
	Humi = RH1;
 8000e5c:	7d7b      	ldrb	r3, [r7, #21]
 8000e5e:	81fb      	strh	r3, [r7, #14]
	DHT->Temp = (float)(Temp/1.0);
 8000e60:	8a3b      	ldrh	r3, [r7, #16]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff face 	bl	8000404 <__aeabi_i2d>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f7ff fe0a 	bl	8000a88 <__aeabi_d2f>
 8000e74:	4602      	mov	r2, r0
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	611a      	str	r2, [r3, #16]
	DHT->Humi = (float)(Humi/1.0);
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fac1 	bl	8000404 <__aeabi_i2d>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fdfd 	bl	8000a88 <__aeabi_d2f>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	615a      	str	r2, [r3, #20]
	return SUM;
 8000e94:	8afb      	ldrh	r3, [r7, #22]
 8000e96:	b2db      	uxtb	r3, r3
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <flash_unlock>:
 *      Author: ACER
 */
#include "FLASH.h"

void flash_unlock ()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000ea4:	f004 fe7e 	bl	8005ba4 <HAL_FLASH_Unlock>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <flash_lock>:

void flash_lock ()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 8000eb0:	f004 fe9e 	bl	8005bf0 <HAL_FLASH_Lock>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <flash_eraser>:

void flash_eraser(uint32_t addr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef eraserInit;
	eraserInit.NbPages = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61fb      	str	r3, [r7, #28]
	eraserInit.PageAddress = addr;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
	eraserInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
	uint32_t Page_Error; // bien nay khong co y nghia gi, them vao cho du tham so
	HAL_FLASHEx_Erase(&eraserInit, &Page_Error);
 8000ecc:	f107 020c 	add.w	r2, r7, #12
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f004 ff4c 	bl	8005d74 <HAL_FLASHEx_Erase>

}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <flash_write_arr>:

void flash_write_arr(uint32_t addr, uint8_t *data, uint16_t length)
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<=length; i+=2)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	82fb      	strh	r3, [r7, #22]
 8000ef6:	e019      	b.n	8000f2c <flash_write_arr+0x48>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, data[i]|((uint16_t)data[i+1]<<8));
 8000ef8:	8afa      	ldrh	r2, [r7, #22]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	18d1      	adds	r1, r2, r3
 8000efe:	8afb      	ldrh	r3, [r7, #22]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	8afb      	ldrh	r3, [r7, #22]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	4303      	orrs	r3, r0
 8000f16:	17da      	asrs	r2, r3, #31
 8000f18:	461c      	mov	r4, r3
 8000f1a:	4615      	mov	r5, r2
 8000f1c:	4622      	mov	r2, r4
 8000f1e:	462b      	mov	r3, r5
 8000f20:	2001      	movs	r0, #1
 8000f22:	f004 fdcf 	bl	8005ac4 <HAL_FLASH_Program>
	for(uint16_t i=0; i<=length; i+=2)
 8000f26:	8afb      	ldrh	r3, [r7, #22]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	82fb      	strh	r3, [r7, #22]
 8000f2c:	8afa      	ldrh	r2, [r7, #22]
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d9e1      	bls.n	8000ef8 <flash_write_arr+0x14>
	}
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bdb0      	pop	{r4, r5, r7, pc}

08000f3e <flash_read>:

void flash_read(uint32_t addr, uint8_t *data, uint16_t length)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b087      	sub	sp, #28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<=length; i+=2)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	82fb      	strh	r3, [r7, #22]
 8000f50:	e016      	b.n	8000f80 <flash_read+0x42>
	{
		uint16_t data_temp = *(volatile uint32_t *)(addr + i);
 8000f52:	8afa      	ldrh	r2, [r7, #22]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	82bb      	strh	r3, [r7, #20]
		*(data + i) = data_temp;
 8000f5c:	8afb      	ldrh	r3, [r7, #22]
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	4413      	add	r3, r2
 8000f62:	8aba      	ldrh	r2, [r7, #20]
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	701a      	strb	r2, [r3, #0]
		*(data + i + 1) = data_temp>>8;
 8000f68:	8abb      	ldrh	r3, [r7, #20]
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	b299      	uxth	r1, r3
 8000f6e:	8afb      	ldrh	r3, [r7, #22]
 8000f70:	3301      	adds	r3, #1
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	4413      	add	r3, r2
 8000f76:	b2ca      	uxtb	r2, r1
 8000f78:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<=length; i+=2)
 8000f7a:	8afb      	ldrh	r3, [r7, #22]
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	82fb      	strh	r3, [r7, #22]
 8000f80:	8afa      	ldrh	r2, [r7, #22]
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d9e4      	bls.n	8000f52 <flash_read+0x14>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000f9e:	1df9      	adds	r1, r7, #7
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <spi_write+0x20>)
 8000fa6:	f006 fe0d 	bl	8007bc4 <HAL_SPI_Transmit>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000410 	.word	0x20000410

08000fb8 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc8:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <lcd_write_data+0x3c>)
 8000fca:	f005 f916 	bl	80061fa <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <lcd_write_data+0x40>)
 8000fd4:	f005 f911 	bl	80061fa <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ffda 	bl	8000f94 <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <lcd_write_data+0x3c>)
 8000fe8:	f005 f907 	bl	80061fa <HAL_GPIO_WritePin>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40010800 	.word	0x40010800

08000ffc <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2102      	movs	r1, #2
 800100a:	480b      	ldr	r0, [pc, #44]	; (8001038 <lcd_write_command+0x3c>)
 800100c:	f005 f8f5 	bl	80061fa <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <lcd_write_command+0x40>)
 8001018:	f005 f8ef 	bl	80061fa <HAL_GPIO_WritePin>
    spi_write(data);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ffb8 	bl	8000f94 <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102a:	4804      	ldr	r0, [pc, #16]	; (800103c <lcd_write_command+0x40>)
 800102c:	f005 f8e5 	bl	80061fa <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40010800 	.word	0x40010800
 800103c:	40011000 	.word	0x40011000

08001040 <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ffd3 	bl	8000ffc <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffce 	bl	8000ffc <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ffa6 	bl	8000fb8 <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ffa1 	bl	8000fb8 <lcd_write_data>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 800107e:	b480      	push	{r7}
 8001080:	b085      	sub	sp, #20
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	701a      	strb	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
	...

080010a8 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	e9c7 0100 	strd	r0, r1, [r7]
    int multiplier = 4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	617b      	str	r3, [r7, #20]
    double counter = millis;
 80010b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 80010be:	e01c      	b.n	80010fa <delay_ms+0x52>
        while(counter--);
 80010c0:	bf00      	nop
 80010c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <delay_ms+0x68>)
 80010cc:	4620      	mov	r0, r4
 80010ce:	4629      	mov	r1, r5
 80010d0:	f7ff f84a 	bl	8000168 <__aeabi_dsub>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0e7      	beq.n	80010c2 <delay_ms+0x1a>
        counter = millis;
 80010f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	617a      	str	r2, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1dd      	bne.n	80010c0 <delay_ms+0x18>
    }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bdb0      	pop	{r4, r5, r7, pc}
 800110e:	bf00      	nop
 8001110:	3ff00000 	.word	0x3ff00000

08001114 <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111e:	4812      	ldr	r0, [pc, #72]	; (8001168 <lcd_init+0x54>)
 8001120:	f005 f86b 	bl	80061fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 8001124:	2200      	movs	r2, #0
 8001126:	2102      	movs	r1, #2
 8001128:	4810      	ldr	r0, [pc, #64]	; (800116c <lcd_init+0x58>)
 800112a:	f005 f866 	bl	80061fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 800112e:	2201      	movs	r2, #1
 8001130:	2101      	movs	r1, #1
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <lcd_init+0x58>)
 8001134:	f005 f861 	bl	80061fa <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2101      	movs	r1, #1
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <lcd_init+0x58>)
 800113e:	f005 f85c 	bl	80061fa <HAL_GPIO_WritePin>
    delay_ms(500);
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	490a      	ldr	r1, [pc, #40]	; (8001170 <lcd_init+0x5c>)
 8001148:	f7ff ffae 	bl	80010a8 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	2101      	movs	r1, #1
 8001150:	4806      	ldr	r0, [pc, #24]	; (800116c <lcd_init+0x58>)
 8001152:	f005 f852 	bl	80061fa <HAL_GPIO_WritePin>
    delay_ms(500);
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4905      	ldr	r1, [pc, #20]	; (8001170 <lcd_init+0x5c>)
 800115c:	f7ff ffa4 	bl	80010a8 <delay_ms>
    
    lcd_init_command_list();
 8001160:	f000 f808 	bl	8001174 <lcd_init_command_list>
    
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40011000 	.word	0x40011000
 800116c:	40010800 	.word	0x40010800
 8001170:	407f4000 	.word	0x407f4000

08001174 <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 8001178:	2100      	movs	r1, #0
 800117a:	2010      	movs	r0, #16
 800117c:	f7ff ff60 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 8001180:	2100      	movs	r1, #0
 8001182:	2011      	movs	r0, #17
 8001184:	f7ff ff5c 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 8001188:	2100      	movs	r1, #0
 800118a:	2012      	movs	r0, #18
 800118c:	f7ff ff58 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 8001190:	2100      	movs	r1, #0
 8001192:	2013      	movs	r0, #19
 8001194:	f7ff ff54 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 8001198:	2100      	movs	r1, #0
 800119a:	2014      	movs	r0, #20
 800119c:	f7ff ff50 	bl	8001040 <lcd_write_register>
    
    delay_ms(10);
 80011a0:	f04f 0000 	mov.w	r0, #0
 80011a4:	4960      	ldr	r1, [pc, #384]	; (8001328 <lcd_init_command_list+0x1b4>)
 80011a6:	f7ff ff7f 	bl	80010a8 <delay_ms>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 80011aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011ae:	2011      	movs	r0, #17
 80011b0:	f7ff ff46 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 80011b4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80011b8:	2012      	movs	r0, #18
 80011ba:	f7ff ff41 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 80011be:	216f      	movs	r1, #111	; 0x6f
 80011c0:	2013      	movs	r0, #19
 80011c2:	f7ff ff3d 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 80011c6:	f644 115f 	movw	r1, #18783	; 0x495f
 80011ca:	2014      	movs	r0, #20
 80011cc:	f7ff ff38 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 80011d0:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80011d4:	2010      	movs	r0, #16
 80011d6:	f7ff ff33 	bl	8001040 <lcd_write_register>
    
    delay_ms(10);
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4952      	ldr	r1, [pc, #328]	; (8001328 <lcd_init_command_list+0x1b4>)
 80011e0:	f7ff ff62 	bl	80010a8 <delay_ms>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 80011e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011e8:	2011      	movs	r0, #17
 80011ea:	f7ff ff29 	bl	8001040 <lcd_write_register>

    delay_ms(50);
 80011ee:	f04f 0000 	mov.w	r0, #0
 80011f2:	494e      	ldr	r1, [pc, #312]	; (800132c <lcd_init_command_list+0x1b8>)
 80011f4:	f7ff ff58 	bl	80010a8 <delay_ms>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 80011f8:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff ff1f 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8001202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001206:	2002      	movs	r0, #2
 8001208:	f7ff ff1a 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 800120c:	f241 0130 	movw	r1, #4144	; 0x1030
 8001210:	2003      	movs	r0, #3
 8001212:	f7ff ff15 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8001216:	2100      	movs	r1, #0
 8001218:	2007      	movs	r0, #7
 800121a:	f7ff ff11 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 800121e:	f240 2102 	movw	r1, #514	; 0x202
 8001222:	2008      	movs	r0, #8
 8001224:	f7ff ff0c 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 8001228:	2100      	movs	r1, #0
 800122a:	200b      	movs	r0, #11
 800122c:	f7ff ff08 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8001230:	2100      	movs	r1, #0
 8001232:	200c      	movs	r0, #12
 8001234:	f7ff ff04 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 8001238:	f640 7101 	movw	r1, #3841	; 0xf01
 800123c:	200f      	movs	r0, #15
 800123e:	f7ff feff 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8001242:	2100      	movs	r1, #0
 8001244:	2015      	movs	r0, #21
 8001246:	f7ff fefb 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 800124a:	2100      	movs	r1, #0
 800124c:	2020      	movs	r0, #32
 800124e:	f7ff fef7 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8001252:	2100      	movs	r1, #0
 8001254:	2021      	movs	r0, #33	; 0x21
 8001256:	f7ff fef3 	bl	8001040 <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 800125a:	2100      	movs	r1, #0
 800125c:	2030      	movs	r0, #48	; 0x30
 800125e:	f7ff feef 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); 
 8001262:	21db      	movs	r1, #219	; 0xdb
 8001264:	2031      	movs	r0, #49	; 0x31
 8001266:	f7ff feeb 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); 
 800126a:	2100      	movs	r1, #0
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f7ff fee7 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); 
 8001272:	2100      	movs	r1, #0
 8001274:	2033      	movs	r0, #51	; 0x33
 8001276:	f7ff fee3 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); 
 800127a:	21db      	movs	r1, #219	; 0xdb
 800127c:	2034      	movs	r0, #52	; 0x34
 800127e:	f7ff fedf 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); 
 8001282:	2100      	movs	r1, #0
 8001284:	2035      	movs	r0, #53	; 0x35
 8001286:	f7ff fedb 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); 
 800128a:	21af      	movs	r1, #175	; 0xaf
 800128c:	2036      	movs	r0, #54	; 0x36
 800128e:	f7ff fed7 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); 
 8001292:	2100      	movs	r1, #0
 8001294:	2037      	movs	r0, #55	; 0x37
 8001296:	f7ff fed3 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); 
 800129a:	21db      	movs	r1, #219	; 0xdb
 800129c:	2038      	movs	r0, #56	; 0x38
 800129e:	f7ff fecf 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); 
 80012a2:	2100      	movs	r1, #0
 80012a4:	2039      	movs	r0, #57	; 0x39
 80012a6:	f7ff fecb 	bl	8001040 <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 80012aa:	2100      	movs	r1, #0
 80012ac:	2050      	movs	r0, #80	; 0x50
 80012ae:	f7ff fec7 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 80012b2:	f640 0108 	movw	r1, #2056	; 0x808
 80012b6:	2051      	movs	r0, #81	; 0x51
 80012b8:	f7ff fec2 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 80012bc:	f640 010a 	movw	r1, #2058	; 0x80a
 80012c0:	2052      	movs	r0, #82	; 0x52
 80012c2:	f7ff febd 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 80012c6:	210a      	movs	r1, #10
 80012c8:	2053      	movs	r0, #83	; 0x53
 80012ca:	f7ff feb9 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 80012ce:	f640 2108 	movw	r1, #2568	; 0xa08
 80012d2:	2054      	movs	r0, #84	; 0x54
 80012d4:	f7ff feb4 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 80012d8:	f640 0108 	movw	r1, #2056	; 0x808
 80012dc:	2055      	movs	r0, #85	; 0x55
 80012de:	f7ff feaf 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 80012e2:	2100      	movs	r1, #0
 80012e4:	2056      	movs	r0, #86	; 0x56
 80012e6:	f7ff feab 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 80012ea:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80012ee:	2057      	movs	r0, #87	; 0x57
 80012f0:	f7ff fea6 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 80012f4:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80012f8:	2058      	movs	r0, #88	; 0x58
 80012fa:	f7ff fea1 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 80012fe:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8001302:	2059      	movs	r0, #89	; 0x59
 8001304:	f7ff fe9c 	bl	8001040 <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 8001308:	2112      	movs	r1, #18
 800130a:	2007      	movs	r0, #7
 800130c:	f7ff fe98 	bl	8001040 <lcd_write_register>

    delay_ms(50); 
 8001310:	f04f 0000 	mov.w	r0, #0
 8001314:	4905      	ldr	r1, [pc, #20]	; (800132c <lcd_init_command_list+0x1b8>)
 8001316:	f7ff fec7 	bl	80010a8 <delay_ms>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 800131a:	f241 0117 	movw	r1, #4119	; 0x1017
 800131e:	2007      	movs	r0, #7
 8001320:	f7ff fe8e 	bl	8001040 <lcd_write_register>

    
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40240000 	.word	0x40240000
 800132c:	40490000 	.word	0x40490000

08001330 <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with 
 * Colour.
 * 
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(char x, char y, unsigned int colour) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	603a      	str	r2, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	460b      	mov	r3, r1
 800133e:	71bb      	strb	r3, [r7, #6]
    //If we are in landscape view then translate -90 degrees
    if(LANDSCAPE) {
        swap_char(&x, &y);
 8001340:	1dba      	adds	r2, r7, #6
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe99 	bl	800107e <swap_char>
        y = WIDTH - y;
 800134c:	79ba      	ldrb	r2, [r7, #6]
 800134e:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	71bb      	strb	r3, [r7, #6]
    }
    
    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 8001358:	79f8      	ldrb	r0, [r7, #7]
 800135a:	79b9      	ldrb	r1, [r7, #6]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	3301      	adds	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	3301      	adds	r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f000 f87c 	bl	8001464 <set_draw_window>
    lcd_write_data(colour >> 8);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fe20 	bl	8000fb8 <lcd_write_data>
    lcd_write_data(colour & 0xFF);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe1b 	bl	8000fb8 <lcd_write_data>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour){
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	4611      	mov	r1, r2
 8001398:	461a      	mov	r2, r3
 800139a:	4623      	mov	r3, r4
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	4603      	mov	r3, r0
 80013a0:	71bb      	strb	r3, [r7, #6]
 80013a2:	460b      	mov	r3, r1
 80013a4:	717b      	strb	r3, [r7, #5]
 80013a6:	4613      	mov	r3, r2
 80013a8:	713b      	strb	r3, [r7, #4]
    //If landscape view then translate everyting -90 degrees
    if(LANDSCAPE) {
        swap_char(&x1, &y1);
 80013aa:	1dba      	adds	r2, r7, #6
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe64 	bl	800107e <swap_char>
        swap_char(&x2, &y2);
 80013b6:	1d3a      	adds	r2, r7, #4
 80013b8:	1d7b      	adds	r3, r7, #5
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe5e 	bl	800107e <swap_char>
        y1 = WIDTH - y1;
 80013c2:	79ba      	ldrb	r2, [r7, #6]
 80013c4:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	71bb      	strb	r3, [r7, #6]
        y2 = WIDTH - y2;
 80013ce:	793a      	ldrb	r2, [r7, #4]
 80013d0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	713b      	strb	r3, [r7, #4]
        swap_char(&y2, &y1);
 80013da:	1dba      	adds	r2, r7, #6
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fe4c 	bl	800107e <swap_char>
    }
    
    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 80013ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ee:	73bb      	strb	r3, [r7, #14]
    
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 80013f0:	79f8      	ldrb	r0, [r7, #7]
 80013f2:	79b9      	ldrb	r1, [r7, #6]
 80013f4:	797a      	ldrb	r2, [r7, #5]
 80013f6:	793b      	ldrb	r3, [r7, #4]
 80013f8:	f000 f834 	bl	8001464 <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between 
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	4817      	ldr	r0, [pc, #92]	; (8001460 <fill_rectangle+0xd4>)
 8001404:	f004 fef9 	bl	80061fa <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e017      	b.n	800143e <fill_rectangle+0xb2>
        for(int x = 0; x < x2-x1+1; x++) {
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	e00a      	b.n	800142a <fill_rectangle+0x9e>
            lcd_write_data(colour_high);
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fdce 	bl	8000fb8 <lcd_write_data>
            lcd_write_data(colour_low);
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fdca 	bl	8000fb8 <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++) {
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	3301      	adds	r3, #1
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	461a      	mov	r2, r3
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	dded      	ble.n	8001414 <fill_rectangle+0x88>
    for(int y = 0; y < y2-y1+1 ; y++) {
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	793b      	ldrb	r3, [r7, #4]
 8001440:	461a      	mov	r2, r3
 8001442:	79bb      	ldrb	r3, [r7, #6]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	429a      	cmp	r2, r3
 800144a:	dde0      	ble.n	800140e <fill_rectangle+0x82>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <fill_rectangle+0xd4>)
 8001454:	f004 fed1 	bl	80061fa <HAL_GPIO_WritePin>
}
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	40011000 	.word	0x40011000

08001464 <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4604      	mov	r4, r0
 800146c:	4608      	mov	r0, r1
 800146e:	4611      	mov	r1, r2
 8001470:	461a      	mov	r2, r3
 8001472:	4623      	mov	r3, r4
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	4603      	mov	r3, r0
 8001478:	71bb      	strb	r3, [r7, #6]
 800147a:	460b      	mov	r3, r1
 800147c:	717b      	strb	r3, [r7, #5]
 800147e:	4613      	mov	r3, r2
 8001480:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 8001482:	797a      	ldrb	r2, [r7, #5]
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	429a      	cmp	r2, r3
 8001488:	d205      	bcs.n	8001496 <set_draw_window+0x32>
        swap_char(&x2, &x1);
 800148a:	1dfa      	adds	r2, r7, #7
 800148c:	1d7b      	adds	r3, r7, #5
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fdf4 	bl	800107e <swap_char>
    if(y2 < y1)
 8001496:	793a      	ldrb	r2, [r7, #4]
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	429a      	cmp	r2, r3
 800149c:	d205      	bcs.n	80014aa <set_draw_window+0x46>
        swap_char(&y2, &y1);
 800149e:	1dba      	adds	r2, r7, #6
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fdea 	bl	800107e <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	4619      	mov	r1, r3
 80014ae:	2036      	movs	r0, #54	; 0x36
 80014b0:	f7ff fdc6 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4619      	mov	r1, r3
 80014b8:	2037      	movs	r0, #55	; 0x37
 80014ba:	f7ff fdc1 	bl	8001040 <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 80014be:	793b      	ldrb	r3, [r7, #4]
 80014c0:	4619      	mov	r1, r3
 80014c2:	2038      	movs	r0, #56	; 0x38
 80014c4:	f7ff fdbc 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 80014c8:	79bb      	ldrb	r3, [r7, #6]
 80014ca:	4619      	mov	r1, r3
 80014cc:	2039      	movs	r0, #57	; 0x39
 80014ce:	f7ff fdb7 	bl	8001040 <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4619      	mov	r1, r3
 80014d6:	2020      	movs	r0, #32
 80014d8:	f7ff fdb2 	bl	8001040 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	4619      	mov	r1, r3
 80014e0:	2021      	movs	r0, #33	; 0x21
 80014e2:	f7ff fdad 	bl	8001040 <lcd_write_register>

    lcd_write_command(0x00);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff fd88 	bl	8000ffc <lcd_write_command>
    lcd_write_command(0x22);
 80014ec:	2022      	movs	r0, #34	; 0x22
 80014ee:	f7ff fd85 	bl	8000ffc <lcd_write_command>
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}

080014fa <draw_line>:

void draw_line(char x1, char y1, char x2, char y2, unsigned int colour){
 80014fa:	b590      	push	{r4, r7, lr}
 80014fc:	b087      	sub	sp, #28
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4604      	mov	r4, r0
 8001502:	4608      	mov	r0, r1
 8001504:	4611      	mov	r1, r2
 8001506:	461a      	mov	r2, r3
 8001508:	4623      	mov	r3, r4
 800150a:	71fb      	strb	r3, [r7, #7]
 800150c:	4603      	mov	r3, r0
 800150e:	71bb      	strb	r3, [r7, #6]
 8001510:	460b      	mov	r3, r1
 8001512:	717b      	strb	r3, [r7, #5]
 8001514:	4613      	mov	r3, r2
 8001516:	713b      	strb	r3, [r7, #4]

	  int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001518:	793b      	ldrb	r3, [r7, #4]
 800151a:	461a      	mov	r2, r3
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001524:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001528:	797b      	ldrb	r3, [r7, #5]
 800152a:	4619      	mov	r1, r3
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	1acb      	subs	r3, r1, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	bfb8      	it	lt
 8001534:	425b      	neglt	r3, r3
 8001536:	429a      	cmp	r2, r3
 8001538:	bfcc      	ite	gt
 800153a:	2301      	movgt	r3, #1
 800153c:	2300      	movle	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	827b      	strh	r3, [r7, #18]
	  if(x2 < x1)
 8001542:	797a      	ldrb	r2, [r7, #5]
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	429a      	cmp	r2, r3
 8001548:	d205      	bcs.n	8001556 <draw_line+0x5c>
	          swap_char(&x2, &x1);
 800154a:	1dfa      	adds	r2, r7, #7
 800154c:	1d7b      	adds	r3, r7, #5
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fd94 	bl	800107e <swap_char>
	      if(y2 < y1)
 8001556:	793a      	ldrb	r2, [r7, #4]
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	429a      	cmp	r2, r3
 800155c:	d205      	bcs.n	800156a <draw_line+0x70>
	          swap_char(&y2, &y1);
 800155e:	1dba      	adds	r2, r7, #6
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fd8a 	bl	800107e <swap_char>

	  int16_t dx, dy;
	  dx = x2 - x1;
 800156a:	797b      	ldrb	r3, [r7, #5]
 800156c:	b29a      	uxth	r2, r3
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	b29b      	uxth	r3, r3
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	b29b      	uxth	r3, r3
 8001576:	823b      	strh	r3, [r7, #16]
	  dy = abs(y2 - y1);
 8001578:	793b      	ldrb	r3, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	bfb8      	it	lt
 8001584:	425b      	neglt	r3, r3
 8001586:	81fb      	strh	r3, [r7, #14]

	  int16_t err = dx / 2;
 8001588:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800158c:	0fda      	lsrs	r2, r3, #31
 800158e:	4413      	add	r3, r2
 8001590:	105b      	asrs	r3, r3, #1
 8001592:	82fb      	strh	r3, [r7, #22]
	  int16_t ystep;

	  if (y1 < y2)
 8001594:	79ba      	ldrb	r2, [r7, #6]
 8001596:	793b      	ldrb	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	d202      	bcs.n	80015a2 <draw_line+0xa8>
	  {
	    ystep = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	82bb      	strh	r3, [r7, #20]
 80015a0:	e02c      	b.n	80015fc <draw_line+0x102>
	  }
	  else
	  {
	    ystep = -1;
 80015a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a6:	82bb      	strh	r3, [r7, #20]
	  }

	  for (; x1<=x2; x1++)
 80015a8:	e028      	b.n	80015fc <draw_line+0x102>
	  {
	    if (steep)
 80015aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <draw_line+0xc6>
	    {
	    	draw_pixel(x2, y2, colour);
 80015b2:	797b      	ldrb	r3, [r7, #5]
 80015b4:	7939      	ldrb	r1, [r7, #4]
 80015b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff feb9 	bl	8001330 <draw_pixel>
 80015be:	e005      	b.n	80015cc <draw_line+0xd2>
	    }
	    else
	    {
	    	draw_pixel(x1, y1, colour);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	79b9      	ldrb	r1, [r7, #6]
 80015c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff feb2 	bl	8001330 <draw_pixel>
	    }
	    err -= dy;
 80015cc:	8afa      	ldrh	r2, [r7, #22]
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	82fb      	strh	r3, [r7, #22]
	    if (err < 0)
 80015d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da0a      	bge.n	80015f4 <draw_line+0xfa>
	    {
	      y1 += ystep;
 80015de:	8abb      	ldrh	r3, [r7, #20]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	4413      	add	r3, r2
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	71bb      	strb	r3, [r7, #6]
	      err += dx;
 80015ea:	8afa      	ldrh	r2, [r7, #22]
 80015ec:	8a3b      	ldrh	r3, [r7, #16]
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	82fb      	strh	r3, [r7, #22]
	  for (; x1<=x2; x1++)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	797b      	ldrb	r3, [r7, #5]
 8001600:	429a      	cmp	r2, r3
 8001602:	d9d2      	bls.n	80015aa <draw_line+0xb0>
	    }
	  }
	}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}
	...

08001610 <draw_char>:
 * 
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(char x, char y, char c, unsigned int colour, char size) {
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af02      	add	r7, sp, #8
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	460b      	mov	r3, r1
 800161e:	71bb      	strb	r3, [r7, #6]
 8001620:	4613      	mov	r3, r2
 8001622:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8001624:	797b      	ldrb	r3, [r7, #5]
 8001626:	3b20      	subs	r3, #32
 8001628:	60fb      	str	r3, [r7, #12]
    
    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e070      	b.n	8001712 <draw_char+0x102>

        line = FontLarge[font_index][12 - i];
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f1c3 010c 	rsb	r1, r3, #12
 8001636:	483b      	ldr	r0, [pc, #236]	; (8001724 <draw_char+0x114>)
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	4403      	add	r3, r0
 8001646:	440b      	add	r3, r1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	72fb      	strb	r3, [r7, #11]
        
        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	e059      	b.n	8001706 <draw_char+0xf6>
            if(line & (0x01 << j)) {
 8001652:	7afa      	ldrb	r2, [r7, #11]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	fa42 f303 	asr.w	r3, r2, r3
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d04e      	beq.n	8001700 <draw_char+0xf0>
                if(size == 1) {
 8001662:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001666:	2b01      	cmp	r3, #1
 8001668:	d110      	bne.n	800168c <draw_char+0x7c>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	79fa      	ldrb	r2, [r7, #7]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3308      	adds	r3, #8
 8001676:	b2d8      	uxtb	r0, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	4413      	add	r3, r2
 8001680:	b2db      	uxtb	r3, r3
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fe53 	bl	8001330 <draw_pixel>
 800168a:	e039      	b.n	8001700 <draw_char+0xf0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f1c3 0308 	rsb	r3, r3, #8
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	b2da      	uxtb	r2, r3
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4413      	add	r3, r2
 80016a2:	b2d8      	uxtb	r0, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	79bb      	ldrb	r3, [r7, #6]
 80016b4:	4413      	add	r3, r2
 80016b6:	b2d9      	uxtb	r1, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f1c3 0308 	rsb	r3, r3, #8
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4413      	add	r3, r2
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016d4:	4413      	add	r3, r2
 80016d6:	b2dc      	uxtb	r4, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	4413      	add	r3, r2
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016f0:	4413      	add	r3, r2
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	4622      	mov	r2, r4
 80016fc:	f7ff fe46 	bl	800138c <fill_rectangle>
        for(j=0; j<8; j++) {
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	3301      	adds	r3, #1
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b07      	cmp	r3, #7
 800170a:	dda2      	ble.n	8001652 <draw_char+0x42>
    for(i=0; i<13; i++ ) {
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b0c      	cmp	r3, #12
 8001716:	dd8b      	ble.n	8001630 <draw_char+0x20>
                }
            }
        }
    }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}
 8001722:	bf00      	nop
 8001724:	0800c830 	.word	0x0800c830

08001728 <draw_fast_char>:
 * than drawing individual pixels.
 * This will draw over any background image though.
 * 
 * NOTE: This sends 130 bytes for a regular sized char
 */
void draw_fast_char(char x, char y, char c, unsigned int colour, unsigned int bg_colour) {
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	460b      	mov	r3, r1
 8001736:	71bb      	strb	r3, [r7, #6]
 8001738:	4613      	mov	r3, r2
 800173a:	717b      	strb	r3, [r7, #5]
    char line;
    char width = 8;
 800173c:	2308      	movs	r3, #8
 800173e:	73bb      	strb	r3, [r7, #14]
    char height = 13;
 8001740:	230d      	movs	r3, #13
 8001742:	737b      	strb	r3, [r7, #13]
    unsigned int font_index = (c - 32);
 8001744:	797b      	ldrb	r3, [r7, #5]
 8001746:	3b20      	subs	r3, #32
 8001748:	613b      	str	r3, [r7, #16]
    unsigned int this_px = bg_colour;
 800174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174c:	61fb      	str	r3, [r7, #28]
    
    //Adjust for portrait / landscape orientation
    if(LANDSCAPE) {
        swap_char(&x, &y);
 800174e:	1dba      	adds	r2, r7, #6
 8001750:	1dfb      	adds	r3, r7, #7
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fc92 	bl	800107e <swap_char>
        swap_char(&width, &height);
 800175a:	f107 020d 	add.w	r2, r7, #13
 800175e:	f107 030e 	add.w	r3, r7, #14
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fc8a 	bl	800107e <swap_char>
        y = WIDTH - y - height; //I don't know why this offset works. :/
 800176a:	79ba      	ldrb	r2, [r7, #6]
 800176c:	7b7b      	ldrb	r3, [r7, #13]
 800176e:	4413      	add	r3, r2
 8001770:	b2da      	uxtb	r2, r3
 8001772:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	b2db      	uxtb	r3, r3
 800177a:	71bb      	strb	r3, [r7, #6]
    }
    
    //Set the drawing region
    set_draw_window(x, y, x + width - 1, y + height);
 800177c:	79f8      	ldrb	r0, [r7, #7]
 800177e:	79b9      	ldrb	r1, [r7, #6]
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	7bbb      	ldrb	r3, [r7, #14]
 8001784:	4413      	add	r3, r2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3b01      	subs	r3, #1
 800178a:	b2dc      	uxtb	r4, r3
 800178c:	79ba      	ldrb	r2, [r7, #6]
 800178e:	7b7b      	ldrb	r3, [r7, #13]
 8001790:	4413      	add	r3, r2
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4622      	mov	r2, r4
 8001796:	f7ff fe65 	bl	8001464 <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a0:	4829      	ldr	r0, [pc, #164]	; (8001848 <draw_fast_char+0x120>)
 80017a2:	f004 fd2a 	bl	80061fa <HAL_GPIO_WritePin>
    
    //Get the line of pixels from the font file
    for(int i=0; i < height; i++ ) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	e03d      	b.n	8001828 <draw_fast_char+0x100>
        line = FontLarge[font_index][12 - i];
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f1c3 010c 	rsb	r1, r3, #12
 80017b2:	4826      	ldr	r0, [pc, #152]	; (800184c <draw_fast_char+0x124>)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	4403      	add	r3, r0
 80017c2:	440b      	add	r3, r1
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	73fb      	strb	r3, [r7, #15]
        
        //Draw the pixels to screen
        for(int j = width-1; j >= 0; j--) {
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e025      	b.n	800181c <draw_fast_char+0xf4>
            //Default pixel colour is the background colour, unless changed below
            this_px = bg_colour;
 80017d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d2:	61fb      	str	r3, [r7, #28]
            
            if(LANDSCAPE) {
                line = FontLarge[font_index][j];
 80017d4:	491d      	ldr	r1, [pc, #116]	; (800184c <draw_fast_char+0x124>)
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	18ca      	adds	r2, r1, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	73fb      	strb	r3, [r7, #15]
                if((line >> i) & 0x01)
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	fa42 f303 	asr.w	r3, r2, r3
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <draw_fast_char+0xd8>
                    this_px = colour;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	61fb      	str	r3, [r7, #28]
            }
            
            
            
            //Draw this pixel
            lcd_write_data(this_px >> 8);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	b2db      	uxtb	r3, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fbd6 	bl	8000fb8 <lcd_write_data>
            lcd_write_data(this_px & 0xFF);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fbd1 	bl	8000fb8 <lcd_write_data>
        for(int j = width-1; j >= 0; j--) {
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3b01      	subs	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	dad6      	bge.n	80017d0 <draw_fast_char+0xa8>
    for(int i=0; i < height; i++ ) {
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	3301      	adds	r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	7b7b      	ldrb	r3, [r7, #13]
 800182a:	461a      	mov	r2, r3
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	4293      	cmp	r3, r2
 8001830:	dbbc      	blt.n	80017ac <draw_fast_char+0x84>
        }
    }
    
    
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8001832:	2201      	movs	r2, #1
 8001834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <draw_fast_char+0x120>)
 800183a:	f004 fcde 	bl	80061fa <HAL_GPIO_WritePin>
}
 800183e:	bf00      	nop
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	40011000 	.word	0x40011000
 800184c:	0800c830 	.word	0x0800c830

08001850 <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with 
 * a given colour and size.
 */
void draw_string(char x, char y, unsigned int colour, char size, char *str) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af02      	add	r7, sp, #8
 8001856:	603a      	str	r2, [r7, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	460b      	mov	r3, r1
 8001860:	71bb      	strb	r3, [r7, #6]
 8001862:	4613      	mov	r3, r2
 8001864:	717b      	strb	r3, [r7, #5]
    
    //Work out the size of each character
    int char_width = size * 9;
 8001866:	797a      	ldrb	r2, [r7, #5]
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
    //Iterate through each character in the string
    int counter = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8001874:	e015      	b.n	80018a2 <draw_string+0x52>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	6939      	ldr	r1, [r7, #16]
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	b2d8      	uxtb	r0, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	6a3a      	ldr	r2, [r7, #32]
 800188c:	4413      	add	r3, r2
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	79b9      	ldrb	r1, [r7, #6]
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f7ff feba 	bl	8001610 <draw_char>
        //Next character
        counter++;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	6a3a      	ldr	r2, [r7, #32]
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1e3      	bne.n	8001876 <draw_string+0x26>
    }
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <draw_fast_string>:
 * Draws a string using the draw_fast_char() function.
 * This will not preserve any background image and so a custom background
 * colour should be provided.
 * NOTE: Can only be the regular sized font. No scaling.
 */
void draw_fast_string(char x, char y, unsigned int colour, unsigned int bg_colour, char *str) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af02      	add	r7, sp, #8
 80018be:	60ba      	str	r2, [r7, #8]
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4603      	mov	r3, r0
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	460b      	mov	r3, r1
 80018c8:	73bb      	strb	r3, [r7, #14]
    //Iterate through each character in the string
    int counter = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80018ce:	e015      	b.n	80018fc <draw_fast_string+0x44>
        //Write char to the display
        draw_fast_char(x + (counter * 7), y, str[counter], colour, bg_colour);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	00d2      	lsls	r2, r2, #3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	4413      	add	r3, r2
 80018e0:	b2d8      	uxtb	r0, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	6a3a      	ldr	r2, [r7, #32]
 80018e6:	4413      	add	r3, r2
 80018e8:	781a      	ldrb	r2, [r3, #0]
 80018ea:	7bb9      	ldrb	r1, [r7, #14]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f7ff ff19 	bl	8001728 <draw_fast_char>
        //Next character
        counter++;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	6a3a      	ldr	r2, [r7, #32]
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e3      	bne.n	80018d0 <draw_fast_string+0x18>
    }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <draw_bieu_tuong>:
 * Draws a bitmap by directly writing the byte stream to the LCD.
 * 
 * So the scaling is done strangely here because writing individual pixels 
 * has an overhead of 26 bytes each.
 */
void draw_bieu_tuong(char x, char y, char c, unsigned int colour, char size) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af02      	add	r7, sp, #8
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
 8001920:	460b      	mov	r3, r1
 8001922:	71bb      	strb	r3, [r7, #6]
 8001924:	4613      	mov	r3, r2
 8001926:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = c;
 8001928:	797b      	ldrb	r3, [r7, #5]
 800192a:	60fb      	str	r3, [r7, #12]

    //Get the line of pixels from the font file
    for(i=0; i<8; i++ ) {
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e06a      	b.n	8001a08 <draw_bieu_tuong+0xf4>

        line = FontLarge2[font_index][i];
 8001932:	4a39      	ldr	r2, [pc, #228]	; (8001a18 <draw_bieu_tuong+0x104>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	441a      	add	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	4413      	add	r3, r2
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	72fb      	strb	r3, [r7, #11]

        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	e059      	b.n	80019fc <draw_bieu_tuong+0xe8>
            if(line & (0x01 << j)) {
 8001948:	7afa      	ldrb	r2, [r7, #11]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa42 f303 	asr.w	r3, r2, r3
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d04e      	beq.n	80019f6 <draw_bieu_tuong+0xe2>
                if(size == 1) {
 8001958:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800195c:	2b01      	cmp	r3, #1
 800195e:	d110      	bne.n	8001982 <draw_bieu_tuong+0x6e>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	79fa      	ldrb	r2, [r7, #7]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	3308      	adds	r3, #8
 800196c:	b2d8      	uxtb	r0, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	4413      	add	r3, r2
 8001976:	b2db      	uxtb	r3, r3
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff fcd8 	bl	8001330 <draw_pixel>
 8001980:	e039      	b.n	80019f6 <draw_bieu_tuong+0xe2>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f1c3 0308 	rsb	r3, r3, #8
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	b2da      	uxtb	r2, r3
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	4413      	add	r3, r2
 8001998:	b2d8      	uxtb	r0, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	79bb      	ldrb	r3, [r7, #6]
 80019aa:	4413      	add	r3, r2
 80019ac:	b2d9      	uxtb	r1, r3
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f1c3 0308 	rsb	r3, r3, #8
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	4413      	add	r3, r2
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019ca:	4413      	add	r3, r2
 80019cc:	b2dc      	uxtb	r4, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	4413      	add	r3, r2
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019e6:	4413      	add	r3, r2
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4613      	mov	r3, r2
 80019f0:	4622      	mov	r2, r4
 80019f2:	f7ff fccb 	bl	800138c <fill_rectangle>
        for(j=0; j<8; j++) {
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	3301      	adds	r3, #1
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b07      	cmp	r3, #7
 8001a00:	dda2      	ble.n	8001948 <draw_bieu_tuong+0x34>
    for(i=0; i<8; i++ ) {
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b07      	cmp	r3, #7
 8001a0c:	dd91      	ble.n	8001932 <draw_bieu_tuong+0x1e>
                }
            }
        }
    }
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	371c      	adds	r7, #28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd90      	pop	{r4, r7, pc}
 8001a18:	0800cd04 	.word	0x0800cd04

08001a1c <jdFromDate>:
 *      Author: Nguyen_Vu_Huy
 */
#include "Lunar.h"
#include "ILI9225.h"

int jdFromDate(int dd, int mm, int yy) {     //Ham chuyen tu ngay, thang, nam nhap vao sang Julius day (tuc la so ngay tu ngay 1/1/4713 TCN theo lich Julius den ngay nhap vao)
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
    int a, y, m, jd;
    a = (14 - mm) / 12;
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f1c3 030e 	rsb	r3, r3, #14
 8001a2e:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <jdFromDate+0xf0>)
 8001a30:	fb82 1203 	smull	r1, r2, r2, r3
 8001a34:	1052      	asrs	r2, r2, #1
 8001a36:	17db      	asrs	r3, r3, #31
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	61bb      	str	r3, [r7, #24]
    y = yy + 4800 - a;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f503 5296 	add.w	r2, r3, #4800	; 0x12c0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
    m = mm + 12 * a - 3;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	461a      	mov	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4413      	add	r3, r2
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	613b      	str	r3, [r7, #16]
    jd = dd + (153 * m + 2) / 5 + 365 * y + y / 4 - y / 100 + y / 400 - 32045;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	011a      	lsls	r2, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	4a29      	ldr	r2, [pc, #164]	; (8001b10 <jdFromDate+0xf4>)
 8001a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a70:	1052      	asrs	r2, r2, #1
 8001a72:	17db      	asrs	r3, r3, #31
 8001a74:	1ad2      	subs	r2, r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	441a      	add	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f240 116d 	movw	r1, #365	; 0x16d
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	441a      	add	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da00      	bge.n	8001a8e <jdFromDate+0x72>
 8001a8c:	3303      	adds	r3, #3
 8001a8e:	109b      	asrs	r3, r3, #2
 8001a90:	441a      	add	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	491f      	ldr	r1, [pc, #124]	; (8001b14 <jdFromDate+0xf8>)
 8001a96:	fb81 0103 	smull	r0, r1, r1, r3
 8001a9a:	1149      	asrs	r1, r1, #5
 8001a9c:	17db      	asrs	r3, r3, #31
 8001a9e:	1a5b      	subs	r3, r3, r1
 8001aa0:	441a      	add	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	491b      	ldr	r1, [pc, #108]	; (8001b14 <jdFromDate+0xf8>)
 8001aa6:	fb81 0103 	smull	r0, r1, r1, r3
 8001aaa:	11c9      	asrs	r1, r1, #7
 8001aac:	17db      	asrs	r3, r3, #31
 8001aae:	1acb      	subs	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 8001ab6:	3b2d      	subs	r3, #45	; 0x2d
 8001ab8:	61fb      	str	r3, [r7, #28]
    if (jd < 2299161) {
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <jdFromDate+0xfc>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	dc1e      	bgt.n	8001b00 <jdFromDate+0xe4>
        jd = dd + (153 * m + 2) / 5 + 365 * y + y / 4 - 32083;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	011a      	lsls	r2, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <jdFromDate+0xf4>)
 8001ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad6:	1052      	asrs	r2, r2, #1
 8001ad8:	17db      	asrs	r3, r3, #31
 8001ada:	1ad2      	subs	r2, r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	441a      	add	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f240 116d 	movw	r1, #365	; 0x16d
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	441a      	add	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da00      	bge.n	8001af4 <jdFromDate+0xd8>
 8001af2:	3303      	adds	r3, #3
 8001af4:	109b      	asrs	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 8001afc:	3b53      	subs	r3, #83	; 0x53
 8001afe:	61fb      	str	r3, [r7, #28]
    }
    return jd;
 8001b00:	69fb      	ldr	r3, [r7, #28]
    }
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	2aaaaaab 	.word	0x2aaaaaab
 8001b10:	66666667 	.word	0x66666667
 8001b14:	51eb851f 	.word	0x51eb851f
 8001b18:	00231518 	.word	0x00231518
 8001b1c:	00000000 	.word	0x00000000

08001b20 <getNewMoonDay>:
int getNewMoonDay(int k, double timeZone) {     //Ham se tinh toan diem Soc cua thang am lich chua ngay nhap vao, tu do tinh duoc ngay am lich cua thoi gian da nhap
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b09a      	sub	sp, #104	; 0x68
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	e9c7 2300 	strd	r2, r3, [r7]
    double T, T2, T3, dr, Jd1, M, Mpr, F, C1, deltat, JdNew;
    T = k / 1236.85;
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7fe fc69 	bl	8000404 <__aeabi_i2d>
 8001b32:	a3cd      	add	r3, pc, #820	; (adr r3, 8001e68 <getNewMoonDay+0x348>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fdf8 	bl	800072c <__aeabi_ddiv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    T2 = T * T;
 8001b44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b48:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b4c:	f7fe fcc4 	bl	80004d8 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    T3 = T2 * T;
 8001b58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b5c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b60:	f7fe fcba 	bl	80004d8 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    dr = PI / 180;
 8001b6c:	a3c0      	add	r3, pc, #768	; (adr r3, 8001e70 <getNewMoonDay+0x350>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Jd1 = 2415020.75933 + 29.53058868 * k + 0.0001178 * T2 - 0.000000155 * T3;
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7fe fc44 	bl	8000404 <__aeabi_i2d>
 8001b7c:	a3be      	add	r3, pc, #760	; (adr r3, 8001e78 <getNewMoonDay+0x358>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fca9 	bl	80004d8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	a3bc      	add	r3, pc, #752	; (adr r3, 8001e80 <getNewMoonDay+0x360>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe faea 	bl	800016c <__adddf3>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	a3b9      	add	r3, pc, #740	; (adr r3, 8001e88 <getNewMoonDay+0x368>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001baa:	f7fe fc95 	bl	80004d8 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	f7fe fad9 	bl	800016c <__adddf3>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	a3b3      	add	r3, pc, #716	; (adr r3, 8001e90 <getNewMoonDay+0x370>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001bcc:	f7fe fc84 	bl	80004d8 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f7fe fac6 	bl	8000168 <__aeabi_dsub>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    Jd1 = Jd1 + 0.00033 * sin((166.56 + 132.87 * T - 0.009173 * T2) * dr);
 8001be4:	a3ac      	add	r3, pc, #688	; (adr r3, 8001e98 <getNewMoonDay+0x378>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001bee:	f7fe fc73 	bl	80004d8 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	a3a9      	add	r3, pc, #676	; (adr r3, 8001ea0 <getNewMoonDay+0x380>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fab4 	bl	800016c <__adddf3>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	a3a6      	add	r3, pc, #664	; (adr r3, 8001ea8 <getNewMoonDay+0x388>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c16:	f7fe fc5f 	bl	80004d8 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe faa1 	bl	8000168 <__aeabi_dsub>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c32:	f7fe fc51 	bl	80004d8 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f009 fd81 	bl	800b744 <sin>
 8001c42:	a39b      	add	r3, pc, #620	; (adr r3, 8001eb0 <getNewMoonDay+0x390>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fc46 	bl	80004d8 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c54:	f7fe fa8a 	bl	800016c <__adddf3>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    M = 359.2242 + 29.10535608 * k - 0.0000333 * T2 - 0.00000347 * T3;
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f7fe fbcf 	bl	8000404 <__aeabi_i2d>
 8001c66:	a394      	add	r3, pc, #592	; (adr r3, 8001eb8 <getNewMoonDay+0x398>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f7fe fc34 	bl	80004d8 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	a391      	add	r3, pc, #580	; (adr r3, 8001ec0 <getNewMoonDay+0x3a0>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	f7fe fa75 	bl	800016c <__adddf3>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4614      	mov	r4, r2
 8001c88:	461d      	mov	r5, r3
 8001c8a:	a38f      	add	r3, pc, #572	; (adr r3, 8001ec8 <getNewMoonDay+0x3a8>)
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c94:	f7fe fc20 	bl	80004d8 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f7fe fa62 	bl	8000168 <__aeabi_dsub>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4614      	mov	r4, r2
 8001caa:	461d      	mov	r5, r3
 8001cac:	a388      	add	r3, pc, #544	; (adr r3, 8001ed0 <getNewMoonDay+0x3b0>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001cb6:	f7fe fc0f 	bl	80004d8 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	f7fe fa51 	bl	8000168 <__aeabi_dsub>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Mpr = 306.0253 + 385.81691806 * k + 0.0107306 * T2 + 0.00001236 * T3;
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7fe fb98 	bl	8000404 <__aeabi_i2d>
 8001cd4:	a380      	add	r3, pc, #512	; (adr r3, 8001ed8 <getNewMoonDay+0x3b8>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fbfd 	bl	80004d8 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	a37e      	add	r3, pc, #504	; (adr r3, 8001ee0 <getNewMoonDay+0x3c0>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fa3e 	bl	800016c <__adddf3>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	461d      	mov	r5, r3
 8001cf8:	a37b      	add	r3, pc, #492	; (adr r3, 8001ee8 <getNewMoonDay+0x3c8>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d02:	f7fe fbe9 	bl	80004d8 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fa2d 	bl	800016c <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4614      	mov	r4, r2
 8001d18:	461d      	mov	r5, r3
 8001d1a:	a375      	add	r3, pc, #468	; (adr r3, 8001ef0 <getNewMoonDay+0x3d0>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d24:	f7fe fbd8 	bl	80004d8 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	4629      	mov	r1, r5
 8001d30:	f7fe fa1c 	bl	800016c <__adddf3>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    F = 21.2964 + 390.67050646 * k - 0.0016528 * T2 - 0.00000239 * T3;
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7fe fb61 	bl	8000404 <__aeabi_i2d>
 8001d42:	a36d      	add	r3, pc, #436	; (adr r3, 8001ef8 <getNewMoonDay+0x3d8>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fbc6 	bl	80004d8 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	a36a      	add	r3, pc, #424	; (adr r3, 8001f00 <getNewMoonDay+0x3e0>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fa07 	bl	800016c <__adddf3>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4614      	mov	r4, r2
 8001d64:	461d      	mov	r5, r3
 8001d66:	a368      	add	r3, pc, #416	; (adr r3, 8001f08 <getNewMoonDay+0x3e8>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d70:	f7fe fbb2 	bl	80004d8 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe f9f4 	bl	8000168 <__aeabi_dsub>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	461d      	mov	r5, r3
 8001d88:	a361      	add	r3, pc, #388	; (adr r3, 8001f10 <getNewMoonDay+0x3f0>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d92:	f7fe fba1 	bl	80004d8 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	f7fe f9e3 	bl	8000168 <__aeabi_dsub>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    C1 = (0.1734 - 0.000393 * T) * sin(M * dr) + 0.0021 * sin(2 * dr * M);
 8001daa:	a35b      	add	r3, pc, #364	; (adr r3, 8001f18 <getNewMoonDay+0x3f8>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001db4:	f7fe fb90 	bl	80004d8 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	a158      	add	r1, pc, #352	; (adr r1, 8001f20 <getNewMoonDay+0x400>)
 8001dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dc2:	f7fe f9d1 	bl	8000168 <__aeabi_dsub>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4614      	mov	r4, r2
 8001dcc:	461d      	mov	r5, r3
 8001dce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001dd6:	f7fe fb7f 	bl	80004d8 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f009 fcaf 	bl	800b744 <sin>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4620      	mov	r0, r4
 8001dec:	4629      	mov	r1, r5
 8001dee:	f7fe fb73 	bl	80004d8 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4614      	mov	r4, r2
 8001df8:	461d      	mov	r5, r3
 8001dfa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	f7fe f9b3 	bl	800016c <__adddf3>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e12:	f7fe fb61 	bl	80004d8 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f009 fc91 	bl	800b744 <sin>
 8001e22:	a341      	add	r3, pc, #260	; (adr r3, 8001f28 <getNewMoonDay+0x408>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fb56 	bl	80004d8 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	f7fe f99a 	bl	800016c <__adddf3>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    C1 = C1 - 0.4068 * sin(Mpr * dr) + 0.0161 * sin(dr * 2 * Mpr);
 8001e40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e44:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e48:	f7fe fb46 	bl	80004d8 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f009 fc76 	bl	800b744 <sin>
 8001e58:	a335      	add	r3, pc, #212	; (adr r3, 8001f30 <getNewMoonDay+0x410>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fb3b 	bl	80004d8 <__aeabi_dmul>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	e067      	b.n	8001f38 <getNewMoonDay+0x418>
 8001e68:	66666666 	.word	0x66666666
 8001e6c:	40935366 	.word	0x40935366
 8001e70:	a2529d39 	.word	0xa2529d39
 8001e74:	3f91df46 	.word	0x3f91df46
 8001e78:	a8e43a52 	.word	0xa8e43a52
 8001e7c:	403d87d4 	.word	0x403d87d4
 8001e80:	6131b9b6 	.word	0x6131b9b6
 8001e84:	41426cd6 	.word	0x41426cd6
 8001e88:	97020fa5 	.word	0x97020fa5
 8001e8c:	3f1ee16c 	.word	0x3f1ee16c
 8001e90:	6b1f07d8 	.word	0x6b1f07d8
 8001e94:	3e84cdc2 	.word	0x3e84cdc2
 8001e98:	0a3d70a4 	.word	0x0a3d70a4
 8001e9c:	40609bd7 	.word	0x40609bd7
 8001ea0:	851eb852 	.word	0x851eb852
 8001ea4:	4064d1eb 	.word	0x4064d1eb
 8001ea8:	380cb6c8 	.word	0x380cb6c8
 8001eac:	3f82c94b 	.word	0x3f82c94b
 8001eb0:	352a8438 	.word	0x352a8438
 8001eb4:	3f35a07b 	.word	0x3f35a07b
 8001eb8:	9db608e6 	.word	0x9db608e6
 8001ebc:	403d1af8 	.word	0x403d1af8
 8001ec0:	52bd3c36 	.word	0x52bd3c36
 8001ec4:	40767396 	.word	0x40767396
 8001ec8:	49a3b801 	.word	0x49a3b801
 8001ecc:	3f017573 	.word	0x3f017573
 8001ed0:	ac97ce12 	.word	0xac97ce12
 8001ed4:	3ecd1bc4 	.word	0x3ecd1bc4
 8001ed8:	18abf363 	.word	0x18abf363
 8001edc:	40781d12 	.word	0x40781d12
 8001ee0:	a0f9096c 	.word	0xa0f9096c
 8001ee4:	40732067 	.word	0x40732067
 8001ee8:	c0881aec 	.word	0xc0881aec
 8001eec:	3f85f9ec 	.word	0x3f85f9ec
 8001ef0:	77049942 	.word	0x77049942
 8001ef4:	3ee9ebb9 	.word	0x3ee9ebb9
 8001ef8:	64fb574f 	.word	0x64fb574f
 8001efc:	40786aba 	.word	0x40786aba
 8001f00:	ded288ce 	.word	0xded288ce
 8001f04:	40354be0 	.word	0x40354be0
 8001f08:	7c98d7d3 	.word	0x7c98d7d3
 8001f0c:	3f5b1458 	.word	0x3f5b1458
 8001f10:	652b52ea 	.word	0x652b52ea
 8001f14:	3ec40c7c 	.word	0x3ec40c7c
 8001f18:	25b749ae 	.word	0x25b749ae
 8001f1c:	3f39c172 	.word	0x3f39c172
 8001f20:	a0902de0 	.word	0xa0902de0
 8001f24:	3fc631f8 	.word	0x3fc631f8
 8001f28:	ea4a8c15 	.word	0xea4a8c15
 8001f2c:	3f613404 	.word	0x3f613404
 8001f30:	de00d1b7 	.word	0xde00d1b7
 8001f34:	3fda0902 	.word	0x3fda0902
 8001f38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f3c:	f7fe f914 	bl	8000168 <__aeabi_dsub>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4614      	mov	r4, r2
 8001f46:	461d      	mov	r5, r3
 8001f48:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	f7fe f90c 	bl	800016c <__adddf3>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f60:	f7fe faba 	bl	80004d8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f009 fbea 	bl	800b744 <sin>
 8001f70:	a3c7      	add	r3, pc, #796	; (adr r3, 8002290 <getNewMoonDay+0x770>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe faaf 	bl	80004d8 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe f8f3 	bl	800016c <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    C1 = C1 - 0.0004 * sin(dr * 3 * Mpr);
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4bd1      	ldr	r3, [pc, #836]	; (80022d8 <getNewMoonDay+0x7b8>)
 8001f94:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001f98:	f7fe fa9e 	bl	80004d8 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fa8:	f7fe fa96 	bl	80004d8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f009 fbc6 	bl	800b744 <sin>
 8001fb8:	a3b7      	add	r3, pc, #732	; (adr r3, 8002298 <getNewMoonDay+0x778>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fa8b 	bl	80004d8 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fca:	f7fe f8cd 	bl	8000168 <__aeabi_dsub>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    C1 = C1 + 0.0104 * sin(dr * 2 * F) - 0.0051 * sin(dr * (M + Mpr));
 8001fd6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	f7fe f8c5 	bl	800016c <__adddf3>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fee:	f7fe fa73 	bl	80004d8 <__aeabi_dmul>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f009 fba3 	bl	800b744 <sin>
 8001ffe:	a3a8      	add	r3, pc, #672	; (adr r3, 80022a0 <getNewMoonDay+0x780>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fa68 	bl	80004d8 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002014:	f7fe f8aa 	bl	800016c <__adddf3>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4614      	mov	r4, r2
 800201e:	461d      	mov	r5, r3
 8002020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002024:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002028:	f7fe f8a0 	bl	800016c <__adddf3>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002038:	f7fe fa4e 	bl	80004d8 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f009 fb7e 	bl	800b744 <sin>
 8002048:	a397      	add	r3, pc, #604	; (adr r3, 80022a8 <getNewMoonDay+0x788>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	f7fe fa43 	bl	80004d8 <__aeabi_dmul>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4620      	mov	r0, r4
 8002058:	4629      	mov	r1, r5
 800205a:	f7fe f885 	bl	8000168 <__aeabi_dsub>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	e9c7 2306 	strd	r2, r3, [r7, #24]
    C1 = C1 - 0.0074 * sin(dr * (M - Mpr)) + 0.0004 * sin(dr * (2 * F + M));
 8002066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800206a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800206e:	f7fe f87b 	bl	8000168 <__aeabi_dsub>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800207e:	f7fe fa2b 	bl	80004d8 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f009 fb5b 	bl	800b744 <sin>
 800208e:	a388      	add	r3, pc, #544	; (adr r3, 80022b0 <getNewMoonDay+0x790>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fa20 	bl	80004d8 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020a0:	f7fe f862 	bl	8000168 <__aeabi_dsub>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4614      	mov	r4, r2
 80020aa:	461d      	mov	r5, r3
 80020ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	f7fe f85a 	bl	800016c <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020c4:	f7fe f852 	bl	800016c <__adddf3>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020d4:	f7fe fa00 	bl	80004d8 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f009 fb30 	bl	800b744 <sin>
 80020e4:	a36c      	add	r3, pc, #432	; (adr r3, 8002298 <getNewMoonDay+0x778>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe f9f5 	bl	80004d8 <__aeabi_dmul>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4620      	mov	r0, r4
 80020f4:	4629      	mov	r1, r5
 80020f6:	f7fe f839 	bl	800016c <__adddf3>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    C1 = C1 - 0.0004 * sin(dr * (2 * F - M)) - 0.0006 * sin(dr * (2 * F + Mpr));
 8002102:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	f7fe f82f 	bl	800016c <__adddf3>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800211a:	f7fe f825 	bl	8000168 <__aeabi_dsub>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800212a:	f7fe f9d5 	bl	80004d8 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	f009 fb05 	bl	800b744 <sin>
 800213a:	a357      	add	r3, pc, #348	; (adr r3, 8002298 <getNewMoonDay+0x778>)
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	f7fe f9ca 	bl	80004d8 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800214c:	f7fe f80c 	bl	8000168 <__aeabi_dsub>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4614      	mov	r4, r2
 8002156:	461d      	mov	r5, r3
 8002158:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	f7fe f804 	bl	800016c <__adddf3>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002170:	f7fd fffc 	bl	800016c <__adddf3>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002180:	f7fe f9aa 	bl	80004d8 <__aeabi_dmul>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f009 fada 	bl	800b744 <sin>
 8002190:	a349      	add	r3, pc, #292	; (adr r3, 80022b8 <getNewMoonDay+0x798>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe f99f 	bl	80004d8 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7fd ffe1 	bl	8000168 <__aeabi_dsub>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    C1 = C1 + 0.0010 * sin(dr * (2 * F - Mpr)) + 0.0005 * sin(dr * (2 * Mpr + M));
 80021ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	f7fd ffd9 	bl	800016c <__adddf3>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021c6:	f7fd ffcf 	bl	8000168 <__aeabi_dsub>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021d6:	f7fe f97f 	bl	80004d8 <__aeabi_dmul>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f009 faaf 	bl	800b744 <sin>
 80021e6:	a336      	add	r3, pc, #216	; (adr r3, 80022c0 <getNewMoonDay+0x7a0>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fe f974 	bl	80004d8 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021fc:	f7fd ffb6 	bl	800016c <__adddf3>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4614      	mov	r4, r2
 8002206:	461d      	mov	r5, r3
 8002208:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	f7fd ffac 	bl	800016c <__adddf3>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002220:	f7fd ffa4 	bl	800016c <__adddf3>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002230:	f7fe f952 	bl	80004d8 <__aeabi_dmul>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	f009 fa82 	bl	800b744 <sin>
 8002240:	a321      	add	r3, pc, #132	; (adr r3, 80022c8 <getNewMoonDay+0x7a8>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	f7fe f947 	bl	80004d8 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4620      	mov	r0, r4
 8002250:	4629      	mov	r1, r5
 8002252:	f7fd ff8b 	bl	800016c <__adddf3>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (T < -11) {
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <getNewMoonDay+0x7bc>)
 8002264:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002268:	f7fe fba8 	bl	80009bc <__aeabi_dcmplt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d07b      	beq.n	800236a <getNewMoonDay+0x84a>
        deltat = 0.001 + 0.000839 * T + 0.0002261 * T2 - 0.00000845 * T3 - 0.000000081 * T * T3;
 8002272:	a317      	add	r3, pc, #92	; (adr r3, 80022d0 <getNewMoonDay+0x7b0>)
 8002274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002278:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800227c:	f7fe f92c 	bl	80004d8 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	e02a      	b.n	80022e0 <getNewMoonDay+0x7c0>
 800228a:	bf00      	nop
 800228c:	f3af 8000 	nop.w
 8002290:	b5dcc63f 	.word	0xb5dcc63f
 8002294:	3f907c84 	.word	0x3f907c84
 8002298:	eb1c432d 	.word	0xeb1c432d
 800229c:	3f3a36e2 	.word	0x3f3a36e2
 80022a0:	5f06f694 	.word	0x5f06f694
 80022a4:	3f854c98 	.word	0x3f854c98
 80022a8:	d35a8588 	.word	0xd35a8588
 80022ac:	3f74e3bc 	.word	0x3f74e3bc
 80022b0:	5fd8adac 	.word	0x5fd8adac
 80022b4:	3f7e4f76 	.word	0x3f7e4f76
 80022b8:	30553261 	.word	0x30553261
 80022bc:	3f43a92a 	.word	0x3f43a92a
 80022c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80022c4:	3f50624d 	.word	0x3f50624d
 80022c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80022cc:	3f40624d 	.word	0x3f40624d
 80022d0:	c7da1ec5 	.word	0xc7da1ec5
 80022d4:	3f4b7e0a 	.word	0x3f4b7e0a
 80022d8:	40080000 	.word	0x40080000
 80022dc:	c0260000 	.word	0xc0260000
 80022e0:	a34f      	add	r3, pc, #316	; (adr r3, 8002420 <getNewMoonDay+0x900>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fd ff41 	bl	800016c <__adddf3>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4614      	mov	r4, r2
 80022f0:	461d      	mov	r5, r3
 80022f2:	a34d      	add	r3, pc, #308	; (adr r3, 8002428 <getNewMoonDay+0x908>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022fc:	f7fe f8ec 	bl	80004d8 <__aeabi_dmul>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4620      	mov	r0, r4
 8002306:	4629      	mov	r1, r5
 8002308:	f7fd ff30 	bl	800016c <__adddf3>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4614      	mov	r4, r2
 8002312:	461d      	mov	r5, r3
 8002314:	a346      	add	r3, pc, #280	; (adr r3, 8002430 <getNewMoonDay+0x910>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800231e:	f7fe f8db 	bl	80004d8 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4620      	mov	r0, r4
 8002328:	4629      	mov	r1, r5
 800232a:	f7fd ff1d 	bl	8000168 <__aeabi_dsub>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4614      	mov	r4, r2
 8002334:	461d      	mov	r5, r3
 8002336:	a340      	add	r3, pc, #256	; (adr r3, 8002438 <getNewMoonDay+0x918>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002340:	f7fe f8ca 	bl	80004d8 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002350:	f7fe f8c2 	bl	80004d8 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4620      	mov	r0, r4
 800235a:	4629      	mov	r1, r5
 800235c:	f7fd ff04 	bl	8000168 <__aeabi_dsub>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8002368:	e024      	b.n	80023b4 <getNewMoonDay+0x894>
    } else {
        deltat = -0.000278 + 0.000265 * T + 0.000262 * T2;
 800236a:	a335      	add	r3, pc, #212	; (adr r3, 8002440 <getNewMoonDay+0x920>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002374:	f7fe f8b0 	bl	80004d8 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	a331      	add	r3, pc, #196	; (adr r3, 8002448 <getNewMoonDay+0x928>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fd feef 	bl	8000168 <__aeabi_dsub>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4614      	mov	r4, r2
 8002390:	461d      	mov	r5, r3
 8002392:	a32f      	add	r3, pc, #188	; (adr r3, 8002450 <getNewMoonDay+0x930>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800239c:	f7fe f89c 	bl	80004d8 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4620      	mov	r0, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7fd fee0 	bl	800016c <__adddf3>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    }
    JdNew = Jd1 + C1 - deltat;
 80023b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80023bc:	f7fd fed6 	bl	800016c <__adddf3>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80023cc:	f7fd fecc 	bl	8000168 <__aeabi_dsub>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return (int)(JdNew + 0.5 + timeZone / 24);
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <getNewMoonDay+0x938>)
 80023de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023e2:	f7fd fec3 	bl	800016c <__adddf3>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4614      	mov	r4, r2
 80023ec:	461d      	mov	r5, r3
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <getNewMoonDay+0x93c>)
 80023f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023f8:	f7fe f998 	bl	800072c <__aeabi_ddiv>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4620      	mov	r0, r4
 8002402:	4629      	mov	r1, r5
 8002404:	f7fd feb2 	bl	800016c <__adddf3>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	f7fe fb12 	bl	8000a38 <__aeabi_d2iz>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3768      	adds	r7, #104	; 0x68
 800241a:	46bd      	mov	sp, r7
 800241c:	bdb0      	pop	{r4, r5, r7, pc}
 800241e:	bf00      	nop
 8002420:	d2f1a9fc 	.word	0xd2f1a9fc
 8002424:	3f50624d 	.word	0x3f50624d
 8002428:	36148f03 	.word	0x36148f03
 800242c:	3f2da2a8 	.word	0x3f2da2a8
 8002430:	28268fb7 	.word	0x28268fb7
 8002434:	3ee1b88f 	.word	0x3ee1b88f
 8002438:	11d12794 	.word	0x11d12794
 800243c:	3e75be47 	.word	0x3e75be47
 8002440:	555c52e7 	.word	0x555c52e7
 8002444:	3f315df6 	.word	0x3f315df6
 8002448:	e8858ff7 	.word	0xe8858ff7
 800244c:	3f323810 	.word	0x3f323810
 8002450:	6e7a311f 	.word	0x6e7a311f
 8002454:	3f312ba1 	.word	0x3f312ba1
 8002458:	3fe00000 	.word	0x3fe00000
 800245c:	40380000 	.word	0x40380000

08002460 <getSunLongitude>:

int getSunLongitude(double jdn, double timeZone) {    //Ham tinh xem thang da nhap vao co Trung khi nao
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b092      	sub	sp, #72	; 0x48
 8002464:	af00      	add	r7, sp, #0
 8002466:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800246a:	e9c7 2300 	strd	r2, r3, [r7]
    double T, T2, dr, M, L0, DL, L;
    T = (jdn - 2451545.5 - timeZone / 24) / 36525;
 800246e:	a3b2      	add	r3, pc, #712	; (adr r3, 8002738 <getSunLongitude+0x2d8>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002478:	f7fd fe76 	bl	8000168 <__aeabi_dsub>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4614      	mov	r4, r2
 8002482:	461d      	mov	r5, r3
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	4bcf      	ldr	r3, [pc, #828]	; (80027c8 <getSunLongitude+0x368>)
 800248a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800248e:	f7fe f94d 	bl	800072c <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4620      	mov	r0, r4
 8002498:	4629      	mov	r1, r5
 800249a:	f7fd fe65 	bl	8000168 <__aeabi_dsub>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8002740 <getSunLongitude+0x2e0>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe f93e 	bl	800072c <__aeabi_ddiv>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    T2 = T * T;
 80024b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80024c0:	f7fe f80a 	bl	80004d8 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    dr = PI / 180;
 80024cc:	a39e      	add	r3, pc, #632	; (adr r3, 8002748 <getSunLongitude+0x2e8>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    M = 357.52910 + 35999.05030 * T - 0.0001559 * T2 - 0.00000048 * T * T2;
 80024d6:	a39e      	add	r3, pc, #632	; (adr r3, 8002750 <getSunLongitude+0x2f0>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80024e0:	f7fd fffa 	bl	80004d8 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	a39a      	add	r3, pc, #616	; (adr r3, 8002758 <getSunLongitude+0x2f8>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f7fd fe3b 	bl	800016c <__adddf3>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4614      	mov	r4, r2
 80024fc:	461d      	mov	r5, r3
 80024fe:	a398      	add	r3, pc, #608	; (adr r3, 8002760 <getSunLongitude+0x300>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002508:	f7fd ffe6 	bl	80004d8 <__aeabi_dmul>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	f7fd fe28 	bl	8000168 <__aeabi_dsub>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4614      	mov	r4, r2
 800251e:	461d      	mov	r5, r3
 8002520:	a391      	add	r3, pc, #580	; (adr r3, 8002768 <getSunLongitude+0x308>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800252a:	f7fd ffd5 	bl	80004d8 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800253a:	f7fd ffcd 	bl	80004d8 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4620      	mov	r0, r4
 8002544:	4629      	mov	r1, r5
 8002546:	f7fd fe0f 	bl	8000168 <__aeabi_dsub>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    L0 = 280.46645 + 36000.76983 * T + 0.0003032 * T2;
 8002552:	a387      	add	r3, pc, #540	; (adr r3, 8002770 <getSunLongitude+0x310>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800255c:	f7fd ffbc 	bl	80004d8 <__aeabi_dmul>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	a383      	add	r3, pc, #524	; (adr r3, 8002778 <getSunLongitude+0x318>)
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	f7fd fdfd 	bl	800016c <__adddf3>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4614      	mov	r4, r2
 8002578:	461d      	mov	r5, r3
 800257a:	a381      	add	r3, pc, #516	; (adr r3, 8002780 <getSunLongitude+0x320>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002584:	f7fd ffa8 	bl	80004d8 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4620      	mov	r0, r4
 800258e:	4629      	mov	r1, r5
 8002590:	f7fd fdec 	bl	800016c <__adddf3>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	e9c7 2308 	strd	r2, r3, [r7, #32]
    DL = (1.914600 - 0.004817 * T - 0.000014 * T2) * sin(dr * M);
 800259c:	a37a      	add	r3, pc, #488	; (adr r3, 8002788 <getSunLongitude+0x328>)
 800259e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80025a6:	f7fd ff97 	bl	80004d8 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	a178      	add	r1, pc, #480	; (adr r1, 8002790 <getSunLongitude+0x330>)
 80025b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025b4:	f7fd fdd8 	bl	8000168 <__aeabi_dsub>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4614      	mov	r4, r2
 80025be:	461d      	mov	r5, r3
 80025c0:	a375      	add	r3, pc, #468	; (adr r3, 8002798 <getSunLongitude+0x338>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025ca:	f7fd ff85 	bl	80004d8 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fd fdc7 	bl	8000168 <__aeabi_dsub>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4614      	mov	r4, r2
 80025e0:	461d      	mov	r5, r3
 80025e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80025ea:	f7fd ff75 	bl	80004d8 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f009 f8a5 	bl	800b744 <sin>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fd ff69 	bl	80004d8 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    DL = DL + (0.019993 - 0.000101 * T) * sin(dr * 2 * M) + 0.000290 * sin(dr * 3 * M);
 800260e:	a364      	add	r3, pc, #400	; (adr r3, 80027a0 <getSunLongitude+0x340>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002618:	f7fd ff5e 	bl	80004d8 <__aeabi_dmul>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	a161      	add	r1, pc, #388	; (adr r1, 80027a8 <getSunLongitude+0x348>)
 8002622:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002626:	f7fd fd9f 	bl	8000168 <__aeabi_dsub>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4614      	mov	r4, r2
 8002630:	461d      	mov	r5, r3
 8002632:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	f7fd fd97 	bl	800016c <__adddf3>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800264a:	f7fd ff45 	bl	80004d8 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f009 f875 	bl	800b744 <sin>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4620      	mov	r0, r4
 8002660:	4629      	mov	r1, r5
 8002662:	f7fd ff39 	bl	80004d8 <__aeabi_dmul>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002672:	f7fd fd7b 	bl	800016c <__adddf3>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4614      	mov	r4, r2
 800267c:	461d      	mov	r5, r3
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	4b52      	ldr	r3, [pc, #328]	; (80027cc <getSunLongitude+0x36c>)
 8002684:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002688:	f7fd ff26 	bl	80004d8 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002698:	f7fd ff1e 	bl	80004d8 <__aeabi_dmul>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	f009 f84e 	bl	800b744 <sin>
 80026a8:	a341      	add	r3, pc, #260	; (adr r3, 80027b0 <getSunLongitude+0x350>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	f7fd ff13 	bl	80004d8 <__aeabi_dmul>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4620      	mov	r0, r4
 80026b8:	4629      	mov	r1, r5
 80026ba:	f7fd fd57 	bl	800016c <__adddf3>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    L = L0 + DL;
 80026c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026ce:	f7fd fd4d 	bl	800016c <__adddf3>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    L = L * dr;
 80026da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80026de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026e2:	f7fd fef9 	bl	80004d8 <__aeabi_dmul>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
    L = L - PI * 2 * (int)(L / (PI * 2));
 80026ee:	a332      	add	r3, pc, #200	; (adr r3, 80027b8 <getSunLongitude+0x358>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026f8:	f7fe f818 	bl	800072c <__aeabi_ddiv>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7fe f998 	bl	8000a38 <__aeabi_d2iz>
 8002708:	4603      	mov	r3, r0
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd fe7a 	bl	8000404 <__aeabi_i2d>
 8002710:	a329      	add	r3, pc, #164	; (adr r3, 80027b8 <getSunLongitude+0x358>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fd fedf 	bl	80004d8 <__aeabi_dmul>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002722:	f7fd fd21 	bl	8000168 <__aeabi_dsub>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return (int)(L / PI * 6);
 800272e:	a324      	add	r3, pc, #144	; (adr r3, 80027c0 <getSunLongitude+0x360>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	e04c      	b.n	80027d0 <getSunLongitude+0x370>
 8002736:	bf00      	nop
 8002738:	c0000000 	.word	0xc0000000
 800273c:	4142b42c 	.word	0x4142b42c
 8002740:	00000000 	.word	0x00000000
 8002744:	40e1d5a0 	.word	0x40e1d5a0
 8002748:	a2529d39 	.word	0xa2529d39
 800274c:	3f91df46 	.word	0x3f91df46
 8002750:	9c0ebee0 	.word	0x9c0ebee0
 8002754:	40e193e1 	.word	0x40e193e1
 8002758:	318fc505 	.word	0x318fc505
 800275c:	40765877 	.word	0x40765877
 8002760:	cd8a61ee 	.word	0xcd8a61ee
 8002764:	3f246f22 	.word	0x3f246f22
 8002768:	29a4692b 	.word	0x29a4692b
 800276c:	3ea01b2b 	.word	0x3ea01b2b
 8002770:	a272862f 	.word	0xa272862f
 8002774:	40e19418 	.word	0x40e19418
 8002778:	94467382 	.word	0x94467382
 800277c:	40718776 	.word	0x40718776
 8002780:	158aabc0 	.word	0x158aabc0
 8002784:	3f33deda 	.word	0x3f33deda
 8002788:	976ff3ae 	.word	0x976ff3ae
 800278c:	3f73bafd 	.word	0x3f73bafd
 8002790:	9c0ebee0 	.word	0x9c0ebee0
 8002794:	3ffea233 	.word	0x3ffea233
 8002798:	593e5fb7 	.word	0x593e5fb7
 800279c:	3eed5c31 	.word	0x3eed5c31
 80027a0:	c99f1ae3 	.word	0xc99f1ae3
 80027a4:	3f1a79fe 	.word	0x3f1a79fe
 80027a8:	84988095 	.word	0x84988095
 80027ac:	3f94790b 	.word	0x3f94790b
 80027b0:	840e171a 	.word	0x840e171a
 80027b4:	3f330164 	.word	0x3f330164
 80027b8:	54442d18 	.word	0x54442d18
 80027bc:	401921fb 	.word	0x401921fb
 80027c0:	54442d18 	.word	0x54442d18
 80027c4:	400921fb 	.word	0x400921fb
 80027c8:	40380000 	.word	0x40380000
 80027cc:	40080000 	.word	0x40080000
 80027d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027d4:	f7fd ffaa 	bl	800072c <__aeabi_ddiv>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <getSunLongitude+0x3a0>)
 80027e6:	f7fd fe77 	bl	80004d8 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe f921 	bl	8000a38 <__aeabi_d2iz>
 80027f6:	4603      	mov	r3, r0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3748      	adds	r7, #72	; 0x48
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002800:	40180000 	.word	0x40180000
 8002804:	00000000 	.word	0x00000000

08002808 <getLunarMonth11>:
double getLunarMonth11(int yy, double timeZone) {   //Ham tinh xem nam am lich cua thoi gian da nhap co phai nam nhuan hay khong
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	e9c7 2300 	strd	r2, r3, [r7]
    int k, off, nm, sunLong;
    off = jdFromDate(31, 12, yy) - 2415021;
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	210c      	movs	r1, #12
 8002818:	201f      	movs	r0, #31
 800281a:	f7ff f8ff 	bl	8001a1c <jdFromDate>
 800281e:	4602      	mov	r2, r0
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <getLunarMonth11+0x90>)
 8002822:	4413      	add	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
    k = (int)(off / 29.530588853);
 8002826:	69b8      	ldr	r0, [r7, #24]
 8002828:	f7fd fdec 	bl	8000404 <__aeabi_i2d>
 800282c:	a318      	add	r3, pc, #96	; (adr r3, 8002890 <getLunarMonth11+0x88>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fd ff7b 	bl	800072c <__aeabi_ddiv>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f7fe f8fb 	bl	8000a38 <__aeabi_d2iz>
 8002842:	4603      	mov	r3, r0
 8002844:	617b      	str	r3, [r7, #20]
    nm = (int)getNewMoonDay(k, timeZone);
 8002846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f7ff f968 	bl	8001b20 <getNewMoonDay>
 8002850:	61f8      	str	r0, [r7, #28]
    sunLong = getSunLongitude(nm, timeZone);
 8002852:	69f8      	ldr	r0, [r7, #28]
 8002854:	f7fd fdd6 	bl	8000404 <__aeabi_i2d>
 8002858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800285c:	f7ff fe00 	bl	8002460 <getSunLongitude>
 8002860:	6138      	str	r0, [r7, #16]
    if (sunLong >= 9) {
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b08      	cmp	r3, #8
 8002866:	dd07      	ble.n	8002878 <getLunarMonth11+0x70>
        nm = (int)getNewMoonDay(k - 1, timeZone);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	1e59      	subs	r1, r3, #1
 800286c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002870:	4608      	mov	r0, r1
 8002872:	f7ff f955 	bl	8001b20 <getNewMoonDay>
 8002876:	61f8      	str	r0, [r7, #28]
    }
    return nm;
 8002878:	69f8      	ldr	r0, [r7, #28]
 800287a:	f7fd fdc3 	bl	8000404 <__aeabi_i2d>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
}
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	f3af 8000 	nop.w
 8002890:	abcb41d5 	.word	0xabcb41d5
 8002894:	403d87d4 	.word	0x403d87d4
 8002898:	ffdb2653 	.word	0xffdb2653
 800289c:	00000000 	.word	0x00000000

080028a0 <getLeapMonthOffset>:
int getLeapMonthOffset(double a11, double timeZone) {   //Ham tinh xem neu nam do la nam nhuan thi thang nhuan se la thang nao
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80028aa:	e9c7 2300 	strd	r2, r3, [r7]
    int k, last, arc, i;
    k = (int)((a11 - 2415021.076998695) / 29.530588853 + 0.5);
 80028ae:	a32c      	add	r3, pc, #176	; (adr r3, 8002960 <getLeapMonthOffset+0xc0>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028b8:	f7fd fc56 	bl	8000168 <__aeabi_dsub>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	a328      	add	r3, pc, #160	; (adr r3, 8002968 <getLeapMonthOffset+0xc8>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f7fd ff2f 	bl	800072c <__aeabi_ddiv>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	4b25      	ldr	r3, [pc, #148]	; (8002970 <getLeapMonthOffset+0xd0>)
 80028dc:	f7fd fc46 	bl	800016c <__adddf3>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f8a6 	bl	8000a38 <__aeabi_d2iz>
 80028ec:	4603      	mov	r3, r0
 80028ee:	617b      	str	r3, [r7, #20]
    last = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
    i = 1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]
    arc = getSunLongitude(getNewMoonDay(k + i, timeZone), timeZone);
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	18d1      	adds	r1, r2, r3
 80028fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002902:	4608      	mov	r0, r1
 8002904:	f7ff f90c 	bl	8001b20 <getNewMoonDay>
 8002908:	4603      	mov	r3, r0
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fd7a 	bl	8000404 <__aeabi_i2d>
 8002910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002914:	f7ff fda4 	bl	8002460 <getSunLongitude>
 8002918:	61f8      	str	r0, [r7, #28]
    do {
        last = arc;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	613b      	str	r3, [r7, #16]
        i++;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	3301      	adds	r3, #1
 8002922:	61bb      	str	r3, [r7, #24]
        arc = getSunLongitude(getNewMoonDay(k + i, timeZone), timeZone);
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	18d1      	adds	r1, r2, r3
 800292a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800292e:	4608      	mov	r0, r1
 8002930:	f7ff f8f6 	bl	8001b20 <getNewMoonDay>
 8002934:	4603      	mov	r3, r0
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fd64 	bl	8000404 <__aeabi_i2d>
 800293c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002940:	f7ff fd8e 	bl	8002460 <getSunLongitude>
 8002944:	61f8      	str	r0, [r7, #28]
    } while (arc != last && i < 14);
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	429a      	cmp	r2, r3
 800294c:	d002      	beq.n	8002954 <getLeapMonthOffset+0xb4>
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b0d      	cmp	r3, #13
 8002952:	dde2      	ble.n	800291a <getLeapMonthOffset+0x7a>
    return i - 1;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	3b01      	subs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	89db17de 	.word	0x89db17de
 8002964:	41426cd6 	.word	0x41426cd6
 8002968:	abcb41d5 	.word	0xabcb41d5
 800296c:	403d87d4 	.word	0x403d87d4
 8002970:	3fe00000 	.word	0x3fe00000
 8002974:	00000000 	.word	0x00000000

08002978 <convertSolar2Lunar>:
void convertSolar2Lunar(int dd, int mm, int yy, double timeZone) {    //Ham chuyen tu ngay duong lich sang ngay am lich bang cach su dung cac ham da goi o tren
 8002978:	b580      	push	{r7, lr}
 800297a:	b094      	sub	sp, #80	; 0x50
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
    int k, dayNumber, monthStart, a11, b11, lunarDay, lunarMonth, lunarYear, lunarLeap;
    dayNumber = jdFromDate(dd, mm, yy);
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7ff f847 	bl	8001a1c <jdFromDate>
 800298e:	6338      	str	r0, [r7, #48]	; 0x30
    k = (int)((dayNumber - 2415021.076998695) / 29.530588853);
 8002990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002992:	f7fd fd37 	bl	8000404 <__aeabi_i2d>
 8002996:	a36e      	add	r3, pc, #440	; (adr r3, 8002b50 <convertSolar2Lunar+0x1d8>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fd fbe4 	bl	8000168 <__aeabi_dsub>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	a36b      	add	r3, pc, #428	; (adr r3, 8002b58 <convertSolar2Lunar+0x1e0>)
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	f7fd febd 	bl	800072c <__aeabi_ddiv>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f83d 	bl	8000a38 <__aeabi_d2iz>
 80029be:	4603      	mov	r3, r0
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    monthStart = (int)getNewMoonDay(k + 1, timeZone);
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	1c59      	adds	r1, r3, #1
 80029c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029ca:	4608      	mov	r0, r1
 80029cc:	f7ff f8a8 	bl	8001b20 <getNewMoonDay>
 80029d0:	6478      	str	r0, [r7, #68]	; 0x44
    if (monthStart > dayNumber) {
 80029d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	429a      	cmp	r2, r3
 80029d8:	dd05      	ble.n	80029e6 <convertSolar2Lunar+0x6e>
        monthStart = (int)getNewMoonDay(k, timeZone);
 80029da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029e0:	f7ff f89e 	bl	8001b20 <getNewMoonDay>
 80029e4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    a11 = (int)getLunarMonth11(yy, timeZone);
 80029e6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff ff0c 	bl	8002808 <getLunarMonth11>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	f7fe f81e 	bl	8000a38 <__aeabi_d2iz>
 80029fc:	4603      	mov	r3, r0
 80029fe:	643b      	str	r3, [r7, #64]	; 0x40
    b11 = a11;
 8002a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (a11 >= monthStart) {
 8002a04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	db11      	blt.n	8002a30 <convertSolar2Lunar+0xb8>
        lunarYear = yy;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
        a11 = (int)getLunarMonth11(yy - 1, timeZone);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	1e59      	subs	r1, r3, #1
 8002a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a18:	4608      	mov	r0, r1
 8002a1a:	f7ff fef5 	bl	8002808 <getLunarMonth11>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f7fe f807 	bl	8000a38 <__aeabi_d2iz>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a2e:	e011      	b.n	8002a54 <convertSolar2Lunar+0xdc>
    } else {
        lunarYear = yy + 1;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3301      	adds	r3, #1
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
        b11 = (int)getLunarMonth11(yy + 1, timeZone);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	1c59      	adds	r1, r3, #1
 8002a3a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a3e:	4608      	mov	r0, r1
 8002a40:	f7ff fee2 	bl	8002808 <getLunarMonth11>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fd fff4 	bl	8000a38 <__aeabi_d2iz>
 8002a50:	4603      	mov	r3, r0
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    lunarDay = dayNumber - monthStart - 2; // nếu sai ngày âm xem tại đây, ban đầu bằng +1
 8002a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	3b02      	subs	r3, #2
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    int diff = (int)((monthStart - a11) / 29);
 8002a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	4a3e      	ldr	r2, [pc, #248]	; (8002b60 <convertSolar2Lunar+0x1e8>)
 8002a66:	fb82 1203 	smull	r1, r2, r2, r3
 8002a6a:	441a      	add	r2, r3
 8002a6c:	1112      	asrs	r2, r2, #4
 8002a6e:	17db      	asrs	r3, r3, #31
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
    lunarLeap = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	623b      	str	r3, [r7, #32]
    lunarMonth = diff + 11;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	330b      	adds	r3, #11
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (b11 - a11 > 365) {
 8002a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8002a88:	db14      	blt.n	8002ab4 <convertSolar2Lunar+0x13c>
        int leapMonthDiff = getLeapMonthOffset(a11, timeZone);
 8002a8a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002a8c:	f7fd fcba 	bl	8000404 <__aeabi_i2d>
 8002a90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a94:	f7ff ff04 	bl	80028a0 <getLeapMonthOffset>
 8002a98:	61f8      	str	r0, [r7, #28]
        if (diff >= leapMonthDiff) {
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	db08      	blt.n	8002ab4 <convertSolar2Lunar+0x13c>
            lunarMonth = diff + 10;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	330a      	adds	r3, #10
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
            if (diff == leapMonthDiff) {
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d101      	bne.n	8002ab4 <convertSolar2Lunar+0x13c>
                lunarLeap = 1;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	623b      	str	r3, [r7, #32]
            }
        }
    }
    if (lunarMonth > 12) {
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	dd02      	ble.n	8002ac0 <convertSolar2Lunar+0x148>
        lunarMonth = lunarMonth - 12;
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	3b0c      	subs	r3, #12
 8002abe:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    if (lunarMonth >= 11 && diff < 4) {
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	2b0a      	cmp	r3, #10
 8002ac4:	dd05      	ble.n	8002ad2 <convertSolar2Lunar+0x15a>
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	dc02      	bgt.n	8002ad2 <convertSolar2Lunar+0x15a>
        lunarYear -= 1;
 8002acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
    }
    int thu_tu_can = lunarYear%10;
 8002ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <convertSolar2Lunar+0x1ec>)
 8002ad6:	fb83 1302 	smull	r1, r3, r3, r2
 8002ada:	1099      	asrs	r1, r3, #2
 8002adc:	17d3      	asrs	r3, r2, #31
 8002ade:	1ac9      	subs	r1, r1, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	61bb      	str	r3, [r7, #24]
    int thu_tu_chi = lunarYear%12;
 8002aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <convertSolar2Lunar+0x1f0>)
 8002af0:	fb83 1302 	smull	r1, r3, r3, r2
 8002af4:	1059      	asrs	r1, r3, #1
 8002af6:	17d3      	asrs	r3, r2, #31
 8002af8:	1ac9      	subs	r1, r1, r3
 8002afa:	460b      	mov	r3, r1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	440b      	add	r3, r1
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	617b      	str	r3, [r7, #20]
    sprintf(str4,"Lunar %.2d/%.2d/%s %s",lunarDay, lunarMonth ,can[thu_tu_can],chi[thu_tu_chi]);
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <convertSolar2Lunar+0x1f4>)
 8002b12:	1899      	adds	r1, r3, r2
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <convertSolar2Lunar+0x1f8>)
 8002b20:	4413      	add	r3, r2
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	9100      	str	r1, [sp, #0]
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2a:	4912      	ldr	r1, [pc, #72]	; (8002b74 <convertSolar2Lunar+0x1fc>)
 8002b2c:	4812      	ldr	r0, [pc, #72]	; (8002b78 <convertSolar2Lunar+0x200>)
 8002b2e:	f006 fcbd 	bl	80094ac <siprintf>
    draw_string(20, 140, COLOR_BLACK, 1, str4);
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <convertSolar2Lunar+0x200>)
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2301      	movs	r3, #1
 8002b38:	2200      	movs	r2, #0
 8002b3a:	218c      	movs	r1, #140	; 0x8c
 8002b3c:	2014      	movs	r0, #20
 8002b3e:	f7fe fe87 	bl	8001850 <draw_string>
}
 8002b42:	bf00      	nop
 8002b44:	3748      	adds	r7, #72	; 0x48
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	f3af 8000 	nop.w
 8002b50:	89db17de 	.word	0x89db17de
 8002b54:	41426cd6 	.word	0x41426cd6
 8002b58:	abcb41d5 	.word	0xabcb41d5
 8002b5c:	403d87d4 	.word	0x403d87d4
 8002b60:	8d3dcb09 	.word	0x8d3dcb09
 8002b64:	66666667 	.word	0x66666667
 8002b68:	2aaaaaab 	.word	0x2aaaaaab
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000064 	.word	0x20000064
 8002b74:	0800c740 	.word	0x0800c740
 8002b78:	200002d4 	.word	0x200002d4

08002b7c <Demical2BCD>:
extern I2C_HandleTypeDef hi2c2;

#define RTC_ADDR 0x68<<1

uint8_t Demical2BCD(uint8_t num)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
	return (num/10)<<4|(num%10);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <Demical2BCD+0x44>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	08db      	lsrs	r3, r3, #3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	b258      	sxtb	r0, r3
 8002b96:	79fa      	ldrb	r2, [r7, #7]
 8002b98:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <Demical2BCD+0x44>)
 8002b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9e:	08d9      	lsrs	r1, r3, #3
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	4303      	orrs	r3, r0
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	cccccccd 	.word	0xcccccccd

08002bc4 <BCD2Demical>:

uint8_t BCD2Demical(uint8_t num)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
	return (num>>4)*10+(num&0x0F);
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <RTC_WriteTime>:

void RTC_WriteTime(DateTime *dt)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	6078      	str	r0, [r7, #4]
	uint8_t buff[8];
	buff[0] = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	723b      	strb	r3, [r7, #8]
	buff[1] = Demical2BCD(dt->second);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ffb9 	bl	8002b7c <Demical2BCD>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	727b      	strb	r3, [r7, #9]
	buff[2] = Demical2BCD(dt->min);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffb2 	bl	8002b7c <Demical2BCD>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	72bb      	strb	r3, [r7, #10]
	buff[3] = Demical2BCD(dt->hour);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	789b      	ldrb	r3, [r3, #2]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ffab 	bl	8002b7c <Demical2BCD>
 8002c26:	4603      	mov	r3, r0
 8002c28:	72fb      	strb	r3, [r7, #11]
	buff[4] = Demical2BCD(dt->day);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	78db      	ldrb	r3, [r3, #3]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ffa4 	bl	8002b7c <Demical2BCD>
 8002c34:	4603      	mov	r3, r0
 8002c36:	733b      	strb	r3, [r7, #12]
	buff[5] = Demical2BCD(dt->date);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	791b      	ldrb	r3, [r3, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff9d 	bl	8002b7c <Demical2BCD>
 8002c42:	4603      	mov	r3, r0
 8002c44:	737b      	strb	r3, [r7, #13]
	buff[6] = Demical2BCD(dt->month);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	795b      	ldrb	r3, [r3, #5]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff96 	bl	8002b7c <Demical2BCD>
 8002c50:	4603      	mov	r3, r0
 8002c52:	73bb      	strb	r3, [r7, #14]
	buff[7] = Demical2BCD(dt->year);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	799b      	ldrb	r3, [r3, #6]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff8f 	bl	8002b7c <Demical2BCD>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, RTC_ADDR, buff, 8, 100);
 8002c62:	f107 0208 	add.w	r2, r7, #8
 8002c66:	2364      	movs	r3, #100	; 0x64
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	21d0      	movs	r1, #208	; 0xd0
 8002c6e:	4803      	ldr	r0, [pc, #12]	; (8002c7c <RTC_WriteTime+0x88>)
 8002c70:	f003 fc38 	bl	80064e4 <HAL_I2C_Master_Transmit>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200003bc 	.word	0x200003bc

08002c80 <RTC_ReadTime>:

void RTC_ReadTime(DateTime *dt)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	6078      	str	r0, [r7, #4]
	uint8_t buff[7];
	uint8_t ADD_reg = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, RTC_ADDR, &ADD_reg, 1, 100);
 8002c8c:	f107 020f 	add.w	r2, r7, #15
 8002c90:	2364      	movs	r3, #100	; 0x64
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2301      	movs	r3, #1
 8002c96:	21d0      	movs	r1, #208	; 0xd0
 8002c98:	4823      	ldr	r0, [pc, #140]	; (8002d28 <RTC_ReadTime+0xa8>)
 8002c9a:	f003 fc23 	bl	80064e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, RTC_ADDR, buff, 7, 100);
 8002c9e:	f107 0210 	add.w	r2, r7, #16
 8002ca2:	2364      	movs	r3, #100	; 0x64
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2307      	movs	r3, #7
 8002ca8:	21d0      	movs	r1, #208	; 0xd0
 8002caa:	481f      	ldr	r0, [pc, #124]	; (8002d28 <RTC_ReadTime+0xa8>)
 8002cac:	f003 fd18 	bl	80066e0 <HAL_I2C_Master_Receive>
	dt->second = BCD2Demical(buff[0]);
 8002cb0:	7c3b      	ldrb	r3, [r7, #16]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff86 	bl	8002bc4 <BCD2Demical>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	701a      	strb	r2, [r3, #0]
	dt->min = BCD2Demical(buff[1]);
 8002cc0:	7c7b      	ldrb	r3, [r7, #17]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ff7e 	bl	8002bc4 <BCD2Demical>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	705a      	strb	r2, [r3, #1]
	dt->hour = BCD2Demical(buff[2]);
 8002cd0:	7cbb      	ldrb	r3, [r7, #18]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff76 	bl	8002bc4 <BCD2Demical>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	461a      	mov	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	709a      	strb	r2, [r3, #2]
	dt->day = BCD2Demical(buff[3]);
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff6e 	bl	8002bc4 <BCD2Demical>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	70da      	strb	r2, [r3, #3]
	dt->date = BCD2Demical(buff[4]);
 8002cf0:	7d3b      	ldrb	r3, [r7, #20]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff66 	bl	8002bc4 <BCD2Demical>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	711a      	strb	r2, [r3, #4]
	dt->month = BCD2Demical(buff[5]);
 8002d00:	7d7b      	ldrb	r3, [r7, #21]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff5e 	bl	8002bc4 <BCD2Demical>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	715a      	strb	r2, [r3, #5]
	dt->year = BCD2Demical(buff[6]);
 8002d10:	7dbb      	ldrb	r3, [r7, #22]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff56 	bl	8002bc4 <BCD2Demical>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	719a      	strb	r2, [r3, #6]
}
 8002d20:	bf00      	nop
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200003bc 	.word	0x200003bc

08002d2c <value_changed>:
//}


//////cai dat thoi bang xoay encoder
void value_changed(uint8_t *value)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
    *value = *value + ((int32_t)(htim4.Instance->CNT) - temp) / 4;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	781a      	ldrb	r2, [r3, #0]
 8002d38:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <value_changed+0x50>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <value_changed+0x54>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	1acb      	subs	r3, r1, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	da00      	bge.n	8002d4c <value_changed+0x20>
 8002d4a:	3303      	adds	r3, #3
 8002d4c:	109b      	asrs	r3, r3, #2
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	701a      	strb	r2, [r3, #0]
    result_luu = *value;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <value_changed+0x58>)
 8002d60:	601a      	str	r2, [r3, #0]
    RTC_WriteTime(&datetime);
 8002d62:	4809      	ldr	r0, [pc, #36]	; (8002d88 <value_changed+0x5c>)
 8002d64:	f7ff ff46 	bl	8002bf4 <RTC_WriteTime>
    temp = (int32_t)(htim4.Instance->CNT);
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <value_changed+0x50>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <value_changed+0x54>)
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200004f8 	.word	0x200004f8
 8002d80:	2000035c 	.word	0x2000035c
 8002d84:	20000360 	.word	0x20000360
 8002d88:	200003a8 	.word	0x200003a8

08002d8c <alarm_changed>:


/// cai dat gio bao thuc
void alarm_changed(uint8_t *value) // xem lại
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
    *value = *value + ((uint8_t)(htim4.Instance->CNT) - temp) / 4;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <alarm_changed+0x50>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <alarm_changed+0x54>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	1acb      	subs	r3, r1, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	da00      	bge.n	8002dae <alarm_changed+0x22>
 8002dac:	3303      	adds	r3, #3
 8002dae:	109b      	asrs	r3, r3, #2
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	701a      	strb	r2, [r3, #0]
    result_luu = *value;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <alarm_changed+0x58>)
 8002dc2:	601a      	str	r2, [r3, #0]
    temp = (uint8_t)(htim4.Instance->CNT);
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <alarm_changed+0x50>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <alarm_changed+0x54>)
 8002dd0:	601a      	str	r2, [r3, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	200004f8 	.word	0x200004f8
 8002de0:	2000035c 	.word	0x2000035c
 8002de4:	20000360 	.word	0x20000360

08002de8 <update_change>:


void update_change(uint8_t *data_temp, uint8_t data_present, uint8_t data_in,char x_write, char y_write, unsigned int colour_write, char size_write, char x1_rub, char y1_rub, char x2_rub, char y2_rub, unsigned int colour_rub )
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b08b      	sub	sp, #44	; 0x2c
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	4608      	mov	r0, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	70fb      	strb	r3, [r7, #3]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	70bb      	strb	r3, [r7, #2]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	707b      	strb	r3, [r7, #1]
	char str_number_write[20];
	b1=*data_temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <update_change+0x84>)
 8002e08:	701a      	strb	r2, [r3, #0]
    b=data_present = data_in;
 8002e0a:	78bb      	ldrb	r3, [r7, #2]
 8002e0c:	70fb      	strb	r3, [r7, #3]
 8002e0e:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <update_change+0x88>)
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	7013      	strb	r3, [r2, #0]
    if (*data_temp != data_present)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d022      	beq.n	8002e64 <update_change+0x7c>
    {
    	sprintf(str_number_write, "%.2d", data_in);
 8002e1e:	78ba      	ldrb	r2, [r7, #2]
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	4913      	ldr	r1, [pc, #76]	; (8002e74 <update_change+0x8c>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	f006 fb40 	bl	80094ac <siprintf>
        fill_rectangle(x1_rub, y1_rub, x2_rub, y2_rub, colour_rub);
 8002e2c:	f897 4048 	ldrb.w	r4, [r7, #72]	; 0x48
 8002e30:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8002e34:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8002e38:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8002e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4623      	mov	r3, r4
 8002e42:	f7fe faa3 	bl	800138c <fill_rectangle>
        *data_temp = data_present;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	701a      	strb	r2, [r3, #0]
        draw_string(x_write, y_write, colour_write, size_write, str_number_write);
 8002e4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e50:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002e54:	7878      	ldrb	r0, [r7, #1]
 8002e56:	f107 030c 	add.w	r3, r7, #12
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e60:	f7fe fcf6 	bl	8001850 <draw_string>
    }

}
 8002e64:	bf00      	nop
 8002e66:	3724      	adds	r7, #36	; 0x24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd90      	pop	{r4, r7, pc}
 8002e6c:	20000331 	.word	0x20000331
 8002e70:	20000330 	.word	0x20000330
 8002e74:	0800c758 	.word	0x0800c758

08002e78 <update_change_choose>:

void update_change_choose(uint8_t *data_temp, uint8_t data_present, uint8_t data_in,char x_write, char y_write, unsigned int colour_write, char size_write, char x1_rub, char y1_rub, char x2_rub, char y2_rub, unsigned int colour_rub )
{
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b08b      	sub	sp, #44	; 0x2c
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	70fb      	strb	r3, [r7, #3]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	70bb      	strb	r3, [r7, #2]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	707b      	strb	r3, [r7, #1]

	char str_number_write[20];
	b1=*data_temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <update_change_choose+0xc4>)
 8002e98:	701a      	strb	r2, [r3, #0]
    b=data_present = data_in;
 8002e9a:	78bb      	ldrb	r3, [r7, #2]
 8002e9c:	70fb      	strb	r3, [r7, #3]
 8002e9e:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <update_change_choose+0xc8>)
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	7013      	strb	r3, [r2, #0]
    sprintf(str_number_write, "%.2d", data_in);
 8002ea4:	78ba      	ldrb	r2, [r7, #2]
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	4926      	ldr	r1, [pc, #152]	; (8002f44 <update_change_choose+0xcc>)
 8002eac:	4618      	mov	r0, r3
 8002eae:	f006 fafd 	bl	80094ac <siprintf>
    draw_string(x_write, y_write, colour_write, size_write, str_number_write);
 8002eb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002eb6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002eba:	7878      	ldrb	r0, [r7, #1]
 8002ebc:	f107 030c 	add.w	r3, r7, #12
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec6:	f7fe fcc3 	bl	8001850 <draw_string>
    if (*data_temp != data_present)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d02e      	beq.n	8002f32 <update_change_choose+0xba>
    {
        fill_rectangle(x1_rub, y1_rub, x2_rub, y2_rub, colour_rub);
 8002ed4:	f897 4048 	ldrb.w	r4, [r7, #72]	; 0x48
 8002ed8:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8002edc:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8002ee0:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8002ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	4623      	mov	r3, r4
 8002eea:	f7fe fa4f 	bl	800138c <fill_rectangle>
        HAL_Delay(200);
 8002eee:	20c8      	movs	r0, #200	; 0xc8
 8002ef0:	f002 fcb6 	bl	8005860 <HAL_Delay>
        fill_rectangle(x1_rub, y1_rub, x2_rub, y2_rub, colour_rub);
 8002ef4:	f897 4048 	ldrb.w	r4, [r7, #72]	; 0x48
 8002ef8:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8002efc:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8002f00:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4623      	mov	r3, r4
 8002f0a:	f7fe fa3f 	bl	800138c <fill_rectangle>
        HAL_Delay(200);
 8002f0e:	20c8      	movs	r0, #200	; 0xc8
 8002f10:	f002 fca6 	bl	8005860 <HAL_Delay>
        *data_temp = data_present;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	701a      	strb	r2, [r3, #0]
        draw_string(x_write, y_write, colour_write, size_write, str_number_write);
 8002f1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f1e:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8002f22:	7878      	ldrb	r0, [r7, #1]
 8002f24:	f107 030c 	add.w	r3, r7, #12
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f2e:	f7fe fc8f 	bl	8001850 <draw_string>
    }

}
 8002f32:	bf00      	nop
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd90      	pop	{r4, r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000331 	.word	0x20000331
 8002f40:	20000330 	.word	0x20000330
 8002f44:	0800c758 	.word	0x0800c758

08002f48 <HAL_TIM_IC_CaptureCallback>:
//    }
//}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim4.Instance)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_TIM_IC_CaptureCallback+0x28>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d104      	bne.n	8002f66 <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		counter = __HAL_TIM_GET_COUNTER(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8002f64:	6013      	str	r3, [r2, #0]
	}
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	200004f8 	.word	0x200004f8
 8002f74:	2000033c 	.word	0x2000033c

08002f78 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // giải thích hàm callback này
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4 && HAL_GetTick()- time_last_state > 15)// thay doi state
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d117      	bne.n	8002fb8 <HAL_GPIO_EXTI_Callback+0x40>
 8002f88:	f002 fc60 	bl	800584c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d90f      	bls.n	8002fb8 <HAL_GPIO_EXTI_Callback+0x40>
    {
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0 )
 8002f98:	2110      	movs	r1, #16
 8002f9a:	4834      	ldr	r0, [pc, #208]	; (800306c <HAL_GPIO_EXTI_Callback+0xf4>)
 8002f9c:	f003 f916 	bl	80061cc <HAL_GPIO_ReadPin>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <HAL_GPIO_EXTI_Callback+0x34>
		{
				check_state = 1;
 8002fa6:	4b32      	ldr	r3, [pc, #200]	; (8003070 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
		}
			time_last_state = HAL_GetTick();
 8002fac:	f002 fc4e 	bl	800584c <HAL_GetTick>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e052      	b.n	800305e <HAL_GPIO_EXTI_Callback+0xe6>
    }
    else if (GPIO_Pin == GPIO_PIN_8 && HAL_GetTick()- time_last_flag > 15)
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbe:	d118      	bne.n	8002ff2 <HAL_GPIO_EXTI_Callback+0x7a>
 8002fc0:	f002 fc44 	bl	800584c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b0f      	cmp	r3, #15
 8002fce:	d910      	bls.n	8002ff2 <HAL_GPIO_EXTI_Callback+0x7a>
    {
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0)
 8002fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd4:	4828      	ldr	r0, [pc, #160]	; (8003078 <HAL_GPIO_EXTI_Callback+0x100>)
 8002fd6:	f003 f8f9 	bl	80061cc <HAL_GPIO_ReadPin>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <HAL_GPIO_EXTI_Callback+0x6e>
        {
        	check_flag = 1;
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_GPIO_EXTI_Callback+0x104>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]

        }
        time_last_flag = HAL_GetTick();
 8002fe6:	f002 fc31 	bl	800584c <HAL_GetTick>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4a21      	ldr	r2, [pc, #132]	; (8003074 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e035      	b.n	800305e <HAL_GPIO_EXTI_Callback+0xe6>
    }
    else if (GPIO_Pin == GPIO_PIN_3 && HAL_GetTick()- time_last_choose > 15)
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d117      	bne.n	8003028 <HAL_GPIO_EXTI_Callback+0xb0>
 8002ff8:	f002 fc28 	bl	800584c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_GPIO_EXTI_Callback+0x108>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d90f      	bls.n	8003028 <HAL_GPIO_EXTI_Callback+0xb0>
    {
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0 ) // chon thoi gian can thay doi
 8003008:	2108      	movs	r1, #8
 800300a:	481b      	ldr	r0, [pc, #108]	; (8003078 <HAL_GPIO_EXTI_Callback+0x100>)
 800300c:	f003 f8de 	bl	80061cc <HAL_GPIO_ReadPin>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_GPIO_EXTI_Callback+0xa4>
        {
        	check_choose = 1;
 8003016:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_GPIO_EXTI_Callback+0x10c>)
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
        }
        time_last_choose = HAL_GetTick();
 800301c:	f002 fc16 	bl	800584c <HAL_GetTick>
 8003020:	4603      	mov	r3, r0
 8003022:	4a17      	ldr	r2, [pc, #92]	; (8003080 <HAL_GPIO_EXTI_Callback+0x108>)
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e01a      	b.n	800305e <HAL_GPIO_EXTI_Callback+0xe6>

    }

    else if (GPIO_Pin == GPIO_PIN_2 && HAL_GetTick() - time_last_intro > 15)//bat bang huong dan
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	2b04      	cmp	r3, #4
 800302c:	d117      	bne.n	800305e <HAL_GPIO_EXTI_Callback+0xe6>
 800302e:	f002 fc0d 	bl	800584c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <HAL_GPIO_EXTI_Callback+0x110>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d90f      	bls.n	800305e <HAL_GPIO_EXTI_Callback+0xe6>
    {
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 0 )
 800303e:	2104      	movs	r1, #4
 8003040:	480d      	ldr	r0, [pc, #52]	; (8003078 <HAL_GPIO_EXTI_Callback+0x100>)
 8003042:	f003 f8c3 	bl	80061cc <HAL_GPIO_ReadPin>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <HAL_GPIO_EXTI_Callback+0xda>
        {
        	check_intro = 1;
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <HAL_GPIO_EXTI_Callback+0x114>)
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
        }
    	time_last_intro = HAL_GetTick();
 8003052:	f002 fbfb 	bl	800584c <HAL_GetTick>
 8003056:	4603      	mov	r3, r0
 8003058:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <HAL_GPIO_EXTI_Callback+0x110>)
 800305a:	6013      	str	r3, [r2, #0]
    }
}
 800305c:	e7ff      	b.n	800305e <HAL_GPIO_EXTI_Callback+0xe6>
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000340 	.word	0x20000340
 800306c:	40010800 	.word	0x40010800
 8003070:	200003b7 	.word	0x200003b7
 8003074:	20000348 	.word	0x20000348
 8003078:	40010c00 	.word	0x40010c00
 800307c:	200003b9 	.word	0x200003b9
 8003080:	20000344 	.word	0x20000344
 8003084:	200003b8 	.word	0x200003b8
 8003088:	2000034c 	.word	0x2000034c
 800308c:	200003ba 	.word	0x200003ba

08003090 <alarm_buzzer>:


void alarm_buzzer() // coi bao thuc
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
    for (i; i <= 60; i++)
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <alarm_buzzer+0x64>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	e023      	b.n	80030e2 <alarm_buzzer+0x52>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1); // sai thi xem lai set pin
 800309a:	2201      	movs	r2, #1
 800309c:	2108      	movs	r1, #8
 800309e:	4816      	ldr	r0, [pc, #88]	; (80030f8 <alarm_buzzer+0x68>)
 80030a0:	f003 f8ab 	bl	80061fa <HAL_GPIO_WritePin>
        HAL_Delay(150);
 80030a4:	2096      	movs	r0, #150	; 0x96
 80030a6:	f002 fbdb 	bl	8005860 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80030aa:	2200      	movs	r2, #0
 80030ac:	2108      	movs	r1, #8
 80030ae:	4812      	ldr	r0, [pc, #72]	; (80030f8 <alarm_buzzer+0x68>)
 80030b0:	f003 f8a3 	bl	80061fa <HAL_GPIO_WritePin>
        HAL_Delay(75);
 80030b4:	204b      	movs	r0, #75	; 0x4b
 80030b6:	f002 fbd3 	bl	8005860 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80030ba:	2201      	movs	r2, #1
 80030bc:	2108      	movs	r1, #8
 80030be:	480e      	ldr	r0, [pc, #56]	; (80030f8 <alarm_buzzer+0x68>)
 80030c0:	f003 f89b 	bl	80061fa <HAL_GPIO_WritePin>
        HAL_Delay(200);
 80030c4:	20c8      	movs	r0, #200	; 0xc8
 80030c6:	f002 fbcb 	bl	8005860 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2108      	movs	r1, #8
 80030ce:	480a      	ldr	r0, [pc, #40]	; (80030f8 <alarm_buzzer+0x68>)
 80030d0:	f003 f893 	bl	80061fa <HAL_GPIO_WritePin>
    for (i; i <= 60; i++)
 80030d4:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <alarm_buzzer+0x64>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <alarm_buzzer+0x64>)
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <alarm_buzzer+0x64>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b3c      	cmp	r3, #60	; 0x3c
 80030ea:	d9d6      	bls.n	800309a <alarm_buzzer+0xa>
    }
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200000dc 	.word	0x200000dc
 80030f8:	40010800 	.word	0x40010800

080030fc <screen_init>:

void screen_init()
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af02      	add	r7, sp, #8
    lcd_init();
 8003102:	f7fe f807 	bl	8001114 <lcd_init>
    fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_BLACK);
 8003106:	2300      	movs	r3, #0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	23b0      	movs	r3, #176	; 0xb0
 800310c:	22dc      	movs	r2, #220	; 0xdc
 800310e:	2100      	movs	r1, #0
 8003110:	2000      	movs	r0, #0
 8003112:	f7fe f93b 	bl	800138c <fill_rectangle>
    draw_string(30, 60, COLOR_GOLD, 2, "Loading...");
 8003116:	4b79      	ldr	r3, [pc, #484]	; (80032fc <screen_init+0x200>)
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	2302      	movs	r3, #2
 800311c:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8003120:	213c      	movs	r1, #60	; 0x3c
 8003122:	201e      	movs	r0, #30
 8003124:	f7fe fb94 	bl	8001850 <draw_string>
    HAL_Delay(1000);
 8003128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800312c:	f002 fb98 	bl	8005860 <HAL_Delay>

    fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
 8003130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	23b0      	movs	r3, #176	; 0xb0
 8003138:	22dc      	movs	r2, #220	; 0xdc
 800313a:	2100      	movs	r1, #0
 800313c:	2000      	movs	r0, #0
 800313e:	f7fe f925 	bl	800138c <fill_rectangle>
    draw_string(50, 50, COLOR_BLUE, 5, "PIF");
 8003142:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <screen_init+0x204>)
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2305      	movs	r3, #5
 8003148:	221f      	movs	r2, #31
 800314a:	2132      	movs	r1, #50	; 0x32
 800314c:	2032      	movs	r0, #50	; 0x32
 800314e:	f7fe fb7f 	bl	8001850 <draw_string>
    HAL_Delay(100);
 8003152:	2064      	movs	r0, #100	; 0x64
 8003154:	f002 fb84 	bl	8005860 <HAL_Delay>

    fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
 8003158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	23b0      	movs	r3, #176	; 0xb0
 8003160:	22dc      	movs	r2, #220	; 0xdc
 8003162:	2100      	movs	r1, #0
 8003164:	2000      	movs	r0, #0
 8003166:	f7fe f911 	bl	800138c <fill_rectangle>
    draw_string(43, 9, COLOR_BLUE, 1, "Pay It Forward");
 800316a:	4b66      	ldr	r3, [pc, #408]	; (8003304 <screen_init+0x208>)
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2301      	movs	r3, #1
 8003170:	221f      	movs	r2, #31
 8003172:	2109      	movs	r1, #9
 8003174:	202b      	movs	r0, #43	; 0x2b
 8003176:	f7fe fb6b 	bl	8001850 <draw_string>
    draw_line(41, 23, 170, 23, COLOR_BLACK);
 800317a:	2300      	movs	r3, #0
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	2317      	movs	r3, #23
 8003180:	22aa      	movs	r2, #170	; 0xaa
 8003182:	2117      	movs	r1, #23
 8003184:	2029      	movs	r0, #41	; 0x29
 8003186:	f7fe f9b8 	bl	80014fa <draw_line>
    fill_rectangle(0, 25, 220, 55, COLOR_RED);
 800318a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2337      	movs	r3, #55	; 0x37
 8003192:	22dc      	movs	r2, #220	; 0xdc
 8003194:	2119      	movs	r1, #25
 8003196:	2000      	movs	r0, #0
 8003198:	f7fe f8f8 	bl	800138c <fill_rectangle>
    HAL_Delay(100);
 800319c:	2064      	movs	r0, #100	; 0x64
 800319e:	f002 fb5f 	bl	8005860 <HAL_Delay>

    draw_string(22, 32, COLOR_GOLD, 1.5, "Temperature:");
 80031a2:	4b59      	ldr	r3, [pc, #356]	; (8003308 <screen_init+0x20c>)
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2301      	movs	r3, #1
 80031a8:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80031ac:	2120      	movs	r1, #32
 80031ae:	2016      	movs	r0, #22
 80031b0:	f7fe fb4e 	bl	8001850 <draw_string>
    sprintf((char*)temperature, "%.f", DHT1.Temp);
 80031b4:	4b55      	ldr	r3, [pc, #340]	; (800330c <screen_init+0x210>)
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f935 	bl	8000428 <__aeabi_f2d>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4953      	ldr	r1, [pc, #332]	; (8003310 <screen_init+0x214>)
 80031c4:	4853      	ldr	r0, [pc, #332]	; (8003314 <screen_init+0x218>)
 80031c6:	f006 f971 	bl	80094ac <siprintf>
    draw_string(135 , 32, COLOR_GOLD, 1.5, (char*)temperature);
 80031ca:	4b52      	ldr	r3, [pc, #328]	; (8003314 <screen_init+0x218>)
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2301      	movs	r3, #1
 80031d0:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80031d4:	2120      	movs	r1, #32
 80031d6:	2087      	movs	r0, #135	; 0x87
 80031d8:	f7fe fb3a 	bl	8001850 <draw_string>
    HAL_Delay(100);
 80031dc:	2064      	movs	r0, #100	; 0x64
 80031de:	f002 fb3f 	bl	8005860 <HAL_Delay>


    fill_rectangle(0, 50, 220, 75, COLOR_BLUE);
 80031e2:	231f      	movs	r3, #31
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	234b      	movs	r3, #75	; 0x4b
 80031e8:	22dc      	movs	r2, #220	; 0xdc
 80031ea:	2132      	movs	r1, #50	; 0x32
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fe f8cd 	bl	800138c <fill_rectangle>
    HAL_Delay(100);
 80031f2:	2064      	movs	r0, #100	; 0x64
 80031f4:	f002 fb34 	bl	8005860 <HAL_Delay>

    draw_string(22, 57, COLOR_GOLD, 1.5, "Humidity:");
 80031f8:	4b47      	ldr	r3, [pc, #284]	; (8003318 <screen_init+0x21c>)
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2301      	movs	r3, #1
 80031fe:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8003202:	2139      	movs	r1, #57	; 0x39
 8003204:	2016      	movs	r0, #22
 8003206:	f7fe fb23 	bl	8001850 <draw_string>
    sprintf((char*)humidity, "%.f", DHT1.Humi);
 800320a:	4b40      	ldr	r3, [pc, #256]	; (800330c <screen_init+0x210>)
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f90a 	bl	8000428 <__aeabi_f2d>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	493d      	ldr	r1, [pc, #244]	; (8003310 <screen_init+0x214>)
 800321a:	4840      	ldr	r0, [pc, #256]	; (800331c <screen_init+0x220>)
 800321c:	f006 f946 	bl	80094ac <siprintf>
    draw_string(105, 57, COLOR_GOLD, 1.5, (char*)humidity);
 8003220:	4b3e      	ldr	r3, [pc, #248]	; (800331c <screen_init+0x220>)
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2301      	movs	r3, #1
 8003226:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 800322a:	2139      	movs	r1, #57	; 0x39
 800322c:	2069      	movs	r0, #105	; 0x69
 800322e:	f7fe fb0f 	bl	8001850 <draw_string>
    HAL_Delay(100);
 8003232:	2064      	movs	r0, #100	; 0x64
 8003234:	f002 fb14 	bl	8005860 <HAL_Delay>


    draw_line(5, 171, 215, 171, COLOR_BLACK);
 8003238:	2300      	movs	r3, #0
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	23ab      	movs	r3, #171	; 0xab
 800323e:	22d7      	movs	r2, #215	; 0xd7
 8003240:	21ab      	movs	r1, #171	; 0xab
 8003242:	2005      	movs	r0, #5
 8003244:	f7fe f959 	bl	80014fa <draw_line>
    draw_line(5, 5, 5, 171, COLOR_BLACK);
 8003248:	2300      	movs	r3, #0
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	23ab      	movs	r3, #171	; 0xab
 800324e:	2205      	movs	r2, #5
 8003250:	2105      	movs	r1, #5
 8003252:	2005      	movs	r0, #5
 8003254:	f7fe f951 	bl	80014fa <draw_line>
    // vẽ biểu tượng
    draw_bieu_tuong(2, 27, 0, COLOR_GOLD, 2);
 8003258:	2302      	movs	r3, #2
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8003260:	2200      	movs	r2, #0
 8003262:	211b      	movs	r1, #27
 8003264:	2002      	movs	r0, #2
 8003266:	f7fe fb55 	bl	8001914 <draw_bieu_tuong>
    draw_bieu_tuong(2, 55, 1, COLOR_GOLD, 2);
 800326a:	2302      	movs	r3, #2
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8003272:	2201      	movs	r2, #1
 8003274:	2137      	movs	r1, #55	; 0x37
 8003276:	2002      	movs	r0, #2
 8003278:	f7fe fb4c 	bl	8001914 <draw_bieu_tuong>
    draw_bieu_tuong(17, 97, 2, COLOR_DARKBLUE, 2);
 800327c:	2302      	movs	r3, #2
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2311      	movs	r3, #17
 8003282:	2202      	movs	r2, #2
 8003284:	2161      	movs	r1, #97	; 0x61
 8003286:	2011      	movs	r0, #17
 8003288:	f7fe fb44 	bl	8001914 <draw_bieu_tuong>
    draw_bieu_tuong(17, 117, 3, COLOR_DARKBLUE, 2);
 800328c:	2302      	movs	r3, #2
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2311      	movs	r3, #17
 8003292:	2203      	movs	r2, #3
 8003294:	2175      	movs	r1, #117	; 0x75
 8003296:	2011      	movs	r0, #17
 8003298:	f7fe fb3c 	bl	8001914 <draw_bieu_tuong>
    sprintf(str1, "Time %.2d:%.2d:%.2d", datetime.hour, datetime.min, datetime.second);
 800329c:	4b20      	ldr	r3, [pc, #128]	; (8003320 <screen_init+0x224>)
 800329e:	789b      	ldrb	r3, [r3, #2]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <screen_init+0x224>)
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	4619      	mov	r1, r3
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <screen_init+0x224>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	460b      	mov	r3, r1
 80032b0:	491c      	ldr	r1, [pc, #112]	; (8003324 <screen_init+0x228>)
 80032b2:	481d      	ldr	r0, [pc, #116]	; (8003328 <screen_init+0x22c>)
 80032b4:	f006 f8fa 	bl	80094ac <siprintf>
    draw_string(40, 100, COLOR_BLACK, 1, str1);
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <screen_init+0x22c>)
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2301      	movs	r3, #1
 80032be:	2200      	movs	r2, #0
 80032c0:	2164      	movs	r1, #100	; 0x64
 80032c2:	2028      	movs	r0, #40	; 0x28
 80032c4:	f7fe fac4 	bl	8001850 <draw_string>
    sprintf(str2, "Date %.2d:%.2d:%.2d", datetime.date, datetime.month, datetime.year);
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <screen_init+0x224>)
 80032ca:	791b      	ldrb	r3, [r3, #4]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <screen_init+0x224>)
 80032d0:	795b      	ldrb	r3, [r3, #5]
 80032d2:	4619      	mov	r1, r3
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <screen_init+0x224>)
 80032d6:	799b      	ldrb	r3, [r3, #6]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	460b      	mov	r3, r1
 80032dc:	4913      	ldr	r1, [pc, #76]	; (800332c <screen_init+0x230>)
 80032de:	4814      	ldr	r0, [pc, #80]	; (8003330 <screen_init+0x234>)
 80032e0:	f006 f8e4 	bl	80094ac <siprintf>
    draw_string(40, 120, COLOR_BLACK, 1, str2);
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <screen_init+0x234>)
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2301      	movs	r3, #1
 80032ea:	2200      	movs	r2, #0
 80032ec:	2178      	movs	r1, #120	; 0x78
 80032ee:	2028      	movs	r0, #40	; 0x28
 80032f0:	f7fe faae 	bl	8001850 <draw_string>

}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	0800c760 	.word	0x0800c760
 8003300:	0800c76c 	.word	0x0800c76c
 8003304:	0800c770 	.word	0x0800c770
 8003308:	0800c780 	.word	0x0800c780
 800330c:	20000368 	.word	0x20000368
 8003310:	0800c790 	.word	0x0800c790
 8003314:	20000380 	.word	0x20000380
 8003318:	0800c794 	.word	0x0800c794
 800331c:	20000394 	.word	0x20000394
 8003320:	200003a8 	.word	0x200003a8
 8003324:	0800c7a0 	.word	0x0800c7a0
 8003328:	20000308 	.word	0x20000308
 800332c:	0800c7b4 	.word	0x0800c7b4
 8003330:	2000031c 	.word	0x2000031c

08003334 <re_screen_init>:

void re_screen_init()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af02      	add	r7, sp, #8
//	lcd_init();
	fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
 800333a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	23b0      	movs	r3, #176	; 0xb0
 8003342:	22dc      	movs	r2, #220	; 0xdc
 8003344:	2100      	movs	r1, #0
 8003346:	2000      	movs	r0, #0
 8003348:	f7fe f820 	bl	800138c <fill_rectangle>
	HAL_Delay(1000);
 800334c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003350:	f002 fa86 	bl	8005860 <HAL_Delay>
    fill_rectangle(0, 25, 220, 55, COLOR_RED);
 8003354:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2337      	movs	r3, #55	; 0x37
 800335c:	22dc      	movs	r2, #220	; 0xdc
 800335e:	2119      	movs	r1, #25
 8003360:	2000      	movs	r0, #0
 8003362:	f7fe f813 	bl	800138c <fill_rectangle>
    HAL_Delay(100);
 8003366:	2064      	movs	r0, #100	; 0x64
 8003368:	f002 fa7a 	bl	8005860 <HAL_Delay>
    draw_string(43, 9, COLOR_BLUE, 1, "Pay It Forward");
 800336c:	4b5d      	ldr	r3, [pc, #372]	; (80034e4 <re_screen_init+0x1b0>)
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2301      	movs	r3, #1
 8003372:	221f      	movs	r2, #31
 8003374:	2109      	movs	r1, #9
 8003376:	202b      	movs	r0, #43	; 0x2b
 8003378:	f7fe fa6a 	bl	8001850 <draw_string>
    draw_line(41, 23, 170, 23, COLOR_BLACK);
 800337c:	2300      	movs	r3, #0
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2317      	movs	r3, #23
 8003382:	22aa      	movs	r2, #170	; 0xaa
 8003384:	2117      	movs	r1, #23
 8003386:	2029      	movs	r0, #41	; 0x29
 8003388:	f7fe f8b7 	bl	80014fa <draw_line>
    draw_string(22, 32, COLOR_GOLD, 1.5, "Temperature:");
 800338c:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <re_screen_init+0x1b4>)
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2301      	movs	r3, #1
 8003392:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8003396:	2120      	movs	r1, #32
 8003398:	2016      	movs	r0, #22
 800339a:	f7fe fa59 	bl	8001850 <draw_string>
    sprintf((char*)temperature, "%.f", DHT1.Temp);
 800339e:	4b53      	ldr	r3, [pc, #332]	; (80034ec <re_screen_init+0x1b8>)
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd f840 	bl	8000428 <__aeabi_f2d>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4950      	ldr	r1, [pc, #320]	; (80034f0 <re_screen_init+0x1bc>)
 80033ae:	4851      	ldr	r0, [pc, #324]	; (80034f4 <re_screen_init+0x1c0>)
 80033b0:	f006 f87c 	bl	80094ac <siprintf>
    draw_string(135 , 32, COLOR_GOLD, 1.5, (char*)temperature);
 80033b4:	4b4f      	ldr	r3, [pc, #316]	; (80034f4 <re_screen_init+0x1c0>)
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2301      	movs	r3, #1
 80033ba:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80033be:	2120      	movs	r1, #32
 80033c0:	2087      	movs	r0, #135	; 0x87
 80033c2:	f7fe fa45 	bl	8001850 <draw_string>
    HAL_Delay(100);
 80033c6:	2064      	movs	r0, #100	; 0x64
 80033c8:	f002 fa4a 	bl	8005860 <HAL_Delay>


    fill_rectangle(0, 50, 220, 75, COLOR_BLUE);
 80033cc:	231f      	movs	r3, #31
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	234b      	movs	r3, #75	; 0x4b
 80033d2:	22dc      	movs	r2, #220	; 0xdc
 80033d4:	2132      	movs	r1, #50	; 0x32
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd ffd8 	bl	800138c <fill_rectangle>
    HAL_Delay(100);
 80033dc:	2064      	movs	r0, #100	; 0x64
 80033de:	f002 fa3f 	bl	8005860 <HAL_Delay>

    draw_string(22, 57, COLOR_GOLD, 1.5, "Humidity:");
 80033e2:	4b45      	ldr	r3, [pc, #276]	; (80034f8 <re_screen_init+0x1c4>)
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2301      	movs	r3, #1
 80033e8:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80033ec:	2139      	movs	r1, #57	; 0x39
 80033ee:	2016      	movs	r0, #22
 80033f0:	f7fe fa2e 	bl	8001850 <draw_string>
    sprintf((char*)humidity, "%.f", DHT1.Humi);
 80033f4:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <re_screen_init+0x1b8>)
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd f815 	bl	8000428 <__aeabi_f2d>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	493b      	ldr	r1, [pc, #236]	; (80034f0 <re_screen_init+0x1bc>)
 8003404:	483d      	ldr	r0, [pc, #244]	; (80034fc <re_screen_init+0x1c8>)
 8003406:	f006 f851 	bl	80094ac <siprintf>
    draw_string(105, 57, COLOR_GOLD, 1.5, (char*)humidity);
 800340a:	4b3c      	ldr	r3, [pc, #240]	; (80034fc <re_screen_init+0x1c8>)
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2301      	movs	r3, #1
 8003410:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8003414:	2139      	movs	r1, #57	; 0x39
 8003416:	2069      	movs	r0, #105	; 0x69
 8003418:	f7fe fa1a 	bl	8001850 <draw_string>
    HAL_Delay(100);
 800341c:	2064      	movs	r0, #100	; 0x64
 800341e:	f002 fa1f 	bl	8005860 <HAL_Delay>


    draw_line(5, 171, 215, 171, COLOR_BLACK);
 8003422:	2300      	movs	r3, #0
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	23ab      	movs	r3, #171	; 0xab
 8003428:	22d7      	movs	r2, #215	; 0xd7
 800342a:	21ab      	movs	r1, #171	; 0xab
 800342c:	2005      	movs	r0, #5
 800342e:	f7fe f864 	bl	80014fa <draw_line>
    draw_line(5, 5, 5, 171, COLOR_BLACK);
 8003432:	2300      	movs	r3, #0
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	23ab      	movs	r3, #171	; 0xab
 8003438:	2205      	movs	r2, #5
 800343a:	2105      	movs	r1, #5
 800343c:	2005      	movs	r0, #5
 800343e:	f7fe f85c 	bl	80014fa <draw_line>
    // vẽ biểu tượng
    draw_bieu_tuong(2, 27, 0, COLOR_GOLD, 2);
 8003442:	2302      	movs	r3, #2
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 800344a:	2200      	movs	r2, #0
 800344c:	211b      	movs	r1, #27
 800344e:	2002      	movs	r0, #2
 8003450:	f7fe fa60 	bl	8001914 <draw_bieu_tuong>
    draw_bieu_tuong(2, 55, 1, COLOR_GOLD, 2);
 8003454:	2302      	movs	r3, #2
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 800345c:	2201      	movs	r2, #1
 800345e:	2137      	movs	r1, #55	; 0x37
 8003460:	2002      	movs	r0, #2
 8003462:	f7fe fa57 	bl	8001914 <draw_bieu_tuong>
    draw_bieu_tuong(17, 97, 2, COLOR_DARKBLUE, 2);
 8003466:	2302      	movs	r3, #2
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2311      	movs	r3, #17
 800346c:	2202      	movs	r2, #2
 800346e:	2161      	movs	r1, #97	; 0x61
 8003470:	2011      	movs	r0, #17
 8003472:	f7fe fa4f 	bl	8001914 <draw_bieu_tuong>
    draw_bieu_tuong(17, 117, 3, COLOR_DARKBLUE, 2);
 8003476:	2302      	movs	r3, #2
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2311      	movs	r3, #17
 800347c:	2203      	movs	r2, #3
 800347e:	2175      	movs	r1, #117	; 0x75
 8003480:	2011      	movs	r0, #17
 8003482:	f7fe fa47 	bl	8001914 <draw_bieu_tuong>
    sprintf(str1, "Time %.2d:%.2d:%.2d", datetime.hour, datetime.min, datetime.second);
 8003486:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <re_screen_init+0x1cc>)
 8003488:	789b      	ldrb	r3, [r3, #2]
 800348a:	461a      	mov	r2, r3
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <re_screen_init+0x1cc>)
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	4619      	mov	r1, r3
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <re_screen_init+0x1cc>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	460b      	mov	r3, r1
 800349a:	491a      	ldr	r1, [pc, #104]	; (8003504 <re_screen_init+0x1d0>)
 800349c:	481a      	ldr	r0, [pc, #104]	; (8003508 <re_screen_init+0x1d4>)
 800349e:	f006 f805 	bl	80094ac <siprintf>
    draw_string(40, 100, COLOR_BLACK, 1, str1);
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <re_screen_init+0x1d4>)
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2301      	movs	r3, #1
 80034a8:	2200      	movs	r2, #0
 80034aa:	2164      	movs	r1, #100	; 0x64
 80034ac:	2028      	movs	r0, #40	; 0x28
 80034ae:	f7fe f9cf 	bl	8001850 <draw_string>
    sprintf(str2, "Date %.2d:%.2d:%.2d", datetime.date, datetime.month, datetime.year);
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <re_screen_init+0x1cc>)
 80034b4:	791b      	ldrb	r3, [r3, #4]
 80034b6:	461a      	mov	r2, r3
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <re_screen_init+0x1cc>)
 80034ba:	795b      	ldrb	r3, [r3, #5]
 80034bc:	4619      	mov	r1, r3
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <re_screen_init+0x1cc>)
 80034c0:	799b      	ldrb	r3, [r3, #6]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	460b      	mov	r3, r1
 80034c6:	4911      	ldr	r1, [pc, #68]	; (800350c <re_screen_init+0x1d8>)
 80034c8:	4811      	ldr	r0, [pc, #68]	; (8003510 <re_screen_init+0x1dc>)
 80034ca:	f005 ffef 	bl	80094ac <siprintf>
    draw_string(40, 120, COLOR_BLACK, 1, str2);
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <re_screen_init+0x1dc>)
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2301      	movs	r3, #1
 80034d4:	2200      	movs	r2, #0
 80034d6:	2178      	movs	r1, #120	; 0x78
 80034d8:	2028      	movs	r0, #40	; 0x28
 80034da:	f7fe f9b9 	bl	8001850 <draw_string>
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	0800c770 	.word	0x0800c770
 80034e8:	0800c780 	.word	0x0800c780
 80034ec:	20000368 	.word	0x20000368
 80034f0:	0800c790 	.word	0x0800c790
 80034f4:	20000380 	.word	0x20000380
 80034f8:	0800c794 	.word	0x0800c794
 80034fc:	20000394 	.word	0x20000394
 8003500:	200003a8 	.word	0x200003a8
 8003504:	0800c7a0 	.word	0x0800c7a0
 8003508:	20000308 	.word	0x20000308
 800350c:	0800c7b4 	.word	0x0800c7b4
 8003510:	2000031c 	.word	0x2000031c

08003514 <man_hinh_chinh.0>:

	        switch (state)
	        {
	        case 0: /// man hinh chinh
	            void man_hinh_chinh()
	            {
 8003514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003516:	b08b      	sub	sp, #44	; 0x2c
 8003518:	af08      	add	r7, sp, #32
 800351a:	4664      	mov	r4, ip
 800351c:	f8c7 c004 	str.w	ip, [r7, #4]
	                RTC_ReadTime(&datetime);
 8003520:	4874      	ldr	r0, [pc, #464]	; (80036f4 <man_hinh_chinh.0+0x1e0>)
 8003522:	f7ff fbad 	bl	8002c80 <RTC_ReadTime>

	                DHT_ReadTempHum(&DHT1, &a);
 8003526:	4974      	ldr	r1, [pc, #464]	; (80036f8 <man_hinh_chinh.0+0x1e4>)
 8003528:	4874      	ldr	r0, [pc, #464]	; (80036fc <man_hinh_chinh.0+0x1e8>)
 800352a:	f7fd fc6e 	bl	8000e0a <DHT_ReadTempHum>

	                sprintf((char*)temperature, "%.f", DHT1.Temp);
 800352e:	4b73      	ldr	r3, [pc, #460]	; (80036fc <man_hinh_chinh.0+0x1e8>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fc ff78 	bl	8000428 <__aeabi_f2d>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4970      	ldr	r1, [pc, #448]	; (8003700 <man_hinh_chinh.0+0x1ec>)
 800353e:	4871      	ldr	r0, [pc, #452]	; (8003704 <man_hinh_chinh.0+0x1f0>)
 8003540:	f005 ffb4 	bl	80094ac <siprintf>
	                update_change(&temperature_temp, temperature_present, DHT1.Temp, 135 , 32, COLOR_GOLD, 1.5, 135, 27, 155, 45, COLOR_RED);
 8003544:	f104 051f 	add.w	r5, r4, #31
 8003548:	4b6c      	ldr	r3, [pc, #432]	; (80036fc <man_hinh_chinh.0+0x1e8>)
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fd faeb 	bl	8000b28 <__aeabi_f2uiz>
 8003552:	4603      	mov	r3, r0
 8003554:	b2da      	uxtb	r2, r3
 8003556:	7fa1      	ldrb	r1, [r4, #30]
 8003558:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800355c:	9307      	str	r3, [sp, #28]
 800355e:	232d      	movs	r3, #45	; 0x2d
 8003560:	9306      	str	r3, [sp, #24]
 8003562:	239b      	movs	r3, #155	; 0x9b
 8003564:	9305      	str	r3, [sp, #20]
 8003566:	231b      	movs	r3, #27
 8003568:	9304      	str	r3, [sp, #16]
 800356a:	2387      	movs	r3, #135	; 0x87
 800356c:	9303      	str	r3, [sp, #12]
 800356e:	2301      	movs	r3, #1
 8003570:	9302      	str	r3, [sp, #8]
 8003572:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	2320      	movs	r3, #32
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	2387      	movs	r3, #135	; 0x87
 800357e:	4628      	mov	r0, r5
 8003580:	f7ff fc32 	bl	8002de8 <update_change>


	                sprintf((char*)humidity, "%.f", DHT1.Humi);
 8003584:	4b5d      	ldr	r3, [pc, #372]	; (80036fc <man_hinh_chinh.0+0x1e8>)
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	4618      	mov	r0, r3
 800358a:	f7fc ff4d 	bl	8000428 <__aeabi_f2d>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	495b      	ldr	r1, [pc, #364]	; (8003700 <man_hinh_chinh.0+0x1ec>)
 8003594:	485c      	ldr	r0, [pc, #368]	; (8003708 <man_hinh_chinh.0+0x1f4>)
 8003596:	f005 ff89 	bl	80094ac <siprintf>
	                update_change(&humidity_temp, humidity_present, DHT1.Humi, 105 , 57, COLOR_GOLD, 1.5, 105, 55, 125, 73, COLOR_BLUE);
 800359a:	f104 0514 	add.w	r5, r4, #20
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd fac1 	bl	8000b28 <__aeabi_f2uiz>
 80035a6:	4603      	mov	r3, r0
 80035a8:	b2de      	uxtb	r6, r3
 80035aa:	4b54      	ldr	r3, [pc, #336]	; (80036fc <man_hinh_chinh.0+0x1e8>)
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd faba 	bl	8000b28 <__aeabi_f2uiz>
 80035b4:	4603      	mov	r3, r0
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	231f      	movs	r3, #31
 80035ba:	9307      	str	r3, [sp, #28]
 80035bc:	2349      	movs	r3, #73	; 0x49
 80035be:	9306      	str	r3, [sp, #24]
 80035c0:	237d      	movs	r3, #125	; 0x7d
 80035c2:	9305      	str	r3, [sp, #20]
 80035c4:	2337      	movs	r3, #55	; 0x37
 80035c6:	9304      	str	r3, [sp, #16]
 80035c8:	2369      	movs	r3, #105	; 0x69
 80035ca:	9303      	str	r3, [sp, #12]
 80035cc:	2301      	movs	r3, #1
 80035ce:	9302      	str	r3, [sp, #8]
 80035d0:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	2339      	movs	r3, #57	; 0x39
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2369      	movs	r3, #105	; 0x69
 80035dc:	4631      	mov	r1, r6
 80035de:	4628      	mov	r0, r5
 80035e0:	f7ff fc02 	bl	8002de8 <update_change>
                    sprintf(str1, "Time %.2d:%.2d:%.2d", datetime.hour, datetime.min, datetime.second);
 80035e4:	4b43      	ldr	r3, [pc, #268]	; (80036f4 <man_hinh_chinh.0+0x1e0>)
 80035e6:	789b      	ldrb	r3, [r3, #2]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b42      	ldr	r3, [pc, #264]	; (80036f4 <man_hinh_chinh.0+0x1e0>)
 80035ec:	785b      	ldrb	r3, [r3, #1]
 80035ee:	4619      	mov	r1, r3
 80035f0:	4b40      	ldr	r3, [pc, #256]	; (80036f4 <man_hinh_chinh.0+0x1e0>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	460b      	mov	r3, r1
 80035f8:	4944      	ldr	r1, [pc, #272]	; (800370c <man_hinh_chinh.0+0x1f8>)
 80035fa:	4845      	ldr	r0, [pc, #276]	; (8003710 <man_hinh_chinh.0+0x1fc>)
 80035fc:	f005 ff56 	bl	80094ac <siprintf>
	                update_change(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLACK , 1, 140, 100, 160, 110, COLOR_WHITE);
 8003600:	f104 001d 	add.w	r0, r4, #29
 8003604:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <man_hinh_chinh.0+0x1e0>)
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	7f21      	ldrb	r1, [r4, #28]
 800360a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800360e:	9307      	str	r3, [sp, #28]
 8003610:	236e      	movs	r3, #110	; 0x6e
 8003612:	9306      	str	r3, [sp, #24]
 8003614:	23a0      	movs	r3, #160	; 0xa0
 8003616:	9305      	str	r3, [sp, #20]
 8003618:	2364      	movs	r3, #100	; 0x64
 800361a:	9304      	str	r3, [sp, #16]
 800361c:	238c      	movs	r3, #140	; 0x8c
 800361e:	9303      	str	r3, [sp, #12]
 8003620:	2301      	movs	r3, #1
 8003622:	9302      	str	r3, [sp, #8]
 8003624:	2300      	movs	r3, #0
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	2364      	movs	r3, #100	; 0x64
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	238c      	movs	r3, #140	; 0x8c
 800362e:	f7ff fbdb 	bl	8002de8 <update_change>

	                update_change(&min_temp, min_present, datetime.min, 110, 100, COLOR_BLACK, 1, 110, 100, 130, 110, COLOR_WHITE);
 8003632:	f104 001b 	add.w	r0, r4, #27
 8003636:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <man_hinh_chinh.0+0x1e0>)
 8003638:	785a      	ldrb	r2, [r3, #1]
 800363a:	7ea1      	ldrb	r1, [r4, #26]
 800363c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003640:	9307      	str	r3, [sp, #28]
 8003642:	236e      	movs	r3, #110	; 0x6e
 8003644:	9306      	str	r3, [sp, #24]
 8003646:	2382      	movs	r3, #130	; 0x82
 8003648:	9305      	str	r3, [sp, #20]
 800364a:	2364      	movs	r3, #100	; 0x64
 800364c:	9304      	str	r3, [sp, #16]
 800364e:	236e      	movs	r3, #110	; 0x6e
 8003650:	9303      	str	r3, [sp, #12]
 8003652:	2301      	movs	r3, #1
 8003654:	9302      	str	r3, [sp, #8]
 8003656:	2300      	movs	r3, #0
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	2364      	movs	r3, #100	; 0x64
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	236e      	movs	r3, #110	; 0x6e
 8003660:	f7ff fbc2 	bl	8002de8 <update_change>

	                update_change(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLACK, 1, 85, 100, 105, 110, COLOR_WHITE);
 8003664:	f104 0019 	add.w	r0, r4, #25
 8003668:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <man_hinh_chinh.0+0x1e0>)
 800366a:	789a      	ldrb	r2, [r3, #2]
 800366c:	7e21      	ldrb	r1, [r4, #24]
 800366e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003672:	9307      	str	r3, [sp, #28]
 8003674:	236e      	movs	r3, #110	; 0x6e
 8003676:	9306      	str	r3, [sp, #24]
 8003678:	2369      	movs	r3, #105	; 0x69
 800367a:	9305      	str	r3, [sp, #20]
 800367c:	2364      	movs	r3, #100	; 0x64
 800367e:	9304      	str	r3, [sp, #16]
 8003680:	2355      	movs	r3, #85	; 0x55
 8003682:	9303      	str	r3, [sp, #12]
 8003684:	2301      	movs	r3, #1
 8003686:	9302      	str	r3, [sp, #8]
 8003688:	2300      	movs	r3, #0
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	2364      	movs	r3, #100	; 0x64
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	2355      	movs	r3, #85	; 0x55
 8003692:	f7ff fba9 	bl	8002de8 <update_change>

	                draw_string(40, 120, COLOR_BLACK, 1, str2);
 8003696:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <man_hinh_chinh.0+0x200>)
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2301      	movs	r3, #1
 800369c:	2200      	movs	r2, #0
 800369e:	2178      	movs	r1, #120	; 0x78
 80036a0:	2028      	movs	r0, #40	; 0x28
 80036a2:	f7fe f8d5 	bl	8001850 <draw_string>
	                convertSolar2Lunar(dd, mm, yy, timeZone);
 80036a6:	68e0      	ldr	r0, [r4, #12]
 80036a8:	68a1      	ldr	r1, [r4, #8]
 80036aa:	6862      	ldr	r2, [r4, #4]
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	f7ff f963 	bl	8002978 <convertSolar2Lunar>
	                draw_string(40, 120, COLOR_BLACK, 1, str2);
 80036b2:	4b18      	ldr	r3, [pc, #96]	; (8003714 <man_hinh_chinh.0+0x200>)
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2301      	movs	r3, #1
 80036b8:	2200      	movs	r2, #0
 80036ba:	2178      	movs	r1, #120	; 0x78
 80036bc:	2028      	movs	r0, #40	; 0x28
 80036be:	f7fe f8c7 	bl	8001850 <draw_string>
	                convertSolar2Lunar(dd, mm, yy, timeZone);
 80036c2:	68e0      	ldr	r0, [r4, #12]
 80036c4:	68a1      	ldr	r1, [r4, #8]
 80036c6:	6862      	ldr	r2, [r4, #4]
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	f7ff f955 	bl	8002978 <convertSolar2Lunar>
	                draw_string(40, 120, COLOR_BLACK, 1, str2);
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <man_hinh_chinh.0+0x200>)
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2301      	movs	r3, #1
 80036d4:	2200      	movs	r2, #0
 80036d6:	2178      	movs	r1, #120	; 0x78
 80036d8:	2028      	movs	r0, #40	; 0x28
 80036da:	f7fe f8b9 	bl	8001850 <draw_string>
	                convertSolar2Lunar(dd, mm, yy, timeZone);
 80036de:	68e0      	ldr	r0, [r4, #12]
 80036e0:	68a1      	ldr	r1, [r4, #8]
 80036e2:	6862      	ldr	r2, [r4, #4]
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	f7ff f947 	bl	8002978 <convertSolar2Lunar>
	            }
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200003a8 	.word	0x200003a8
 80036f8:	20000364 	.word	0x20000364
 80036fc:	20000368 	.word	0x20000368
 8003700:	0800c790 	.word	0x0800c790
 8003704:	20000380 	.word	0x20000380
 8003708:	20000394 	.word	0x20000394
 800370c:	0800c7a0 	.word	0x0800c7a0
 8003710:	20000308 	.word	0x20000308
 8003714:	2000031c 	.word	0x2000031c

08003718 <app_main>:
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b096      	sub	sp, #88	; 0x58
 800371c:	af08      	add	r7, sp, #32
void app_main()
 800371e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003722:	623b      	str	r3, [r7, #32]
    datetime.second = 50;
 8003724:	4ba6      	ldr	r3, [pc, #664]	; (80039c0 <app_main+0x2a8>)
 8003726:	2232      	movs	r2, #50	; 0x32
 8003728:	701a      	strb	r2, [r3, #0]
    datetime.min = 59;
 800372a:	4ba5      	ldr	r3, [pc, #660]	; (80039c0 <app_main+0x2a8>)
 800372c:	223b      	movs	r2, #59	; 0x3b
 800372e:	705a      	strb	r2, [r3, #1]
    datetime.hour = 22;
 8003730:	4ba3      	ldr	r3, [pc, #652]	; (80039c0 <app_main+0x2a8>)
 8003732:	2216      	movs	r2, #22
 8003734:	709a      	strb	r2, [r3, #2]
    datetime.day = 8;
 8003736:	4ba2      	ldr	r3, [pc, #648]	; (80039c0 <app_main+0x2a8>)
 8003738:	2208      	movs	r2, #8
 800373a:	70da      	strb	r2, [r3, #3]
    datetime.date = 1;
 800373c:	4ba0      	ldr	r3, [pc, #640]	; (80039c0 <app_main+0x2a8>)
 800373e:	2201      	movs	r2, #1
 8003740:	711a      	strb	r2, [r3, #4]
    datetime.month = 1;
 8003742:	4b9f      	ldr	r3, [pc, #636]	; (80039c0 <app_main+0x2a8>)
 8003744:	2201      	movs	r2, #1
 8003746:	715a      	strb	r2, [r3, #5]
    datetime.year = 24;
 8003748:	4b9d      	ldr	r3, [pc, #628]	; (80039c0 <app_main+0x2a8>)
 800374a:	2218      	movs	r2, #24
 800374c:	719a      	strb	r2, [r3, #6]
    alarm.hour = 0;
 800374e:	4b9d      	ldr	r3, [pc, #628]	; (80039c4 <app_main+0x2ac>)
 8003750:	2200      	movs	r2, #0
 8003752:	709a      	strb	r2, [r3, #2]
    alarm.min = 0;
 8003754:	4b9b      	ldr	r3, [pc, #620]	; (80039c4 <app_main+0x2ac>)
 8003756:	2200      	movs	r2, #0
 8003758:	705a      	strb	r2, [r3, #1]
    RTC_WriteTime(&datetime);
 800375a:	4899      	ldr	r0, [pc, #612]	; (80039c0 <app_main+0x2a8>)
 800375c:	f7ff fa4a 	bl	8002bf4 <RTC_WriteTime>
    flash_read(0x801FC00, alarm_buff, 3);// doc hen gio tu FLASH
 8003760:	2203      	movs	r2, #3
 8003762:	4999      	ldr	r1, [pc, #612]	; (80039c8 <app_main+0x2b0>)
 8003764:	4899      	ldr	r0, [pc, #612]	; (80039cc <app_main+0x2b4>)
 8003766:	f7fd fbea 	bl	8000f3e <flash_read>
    HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL); // nhay vao ngat doc Encoder
 800376a:	213c      	movs	r1, #60	; 0x3c
 800376c:	4898      	ldr	r0, [pc, #608]	; (80039d0 <app_main+0x2b8>)
 800376e:	f004 fd4f 	bl	8008210 <HAL_TIM_Encoder_Start_IT>
    DHT_Init(&DHT1, DHT11, &htim2, GPIOA, GPIO_PIN_9);
 8003772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4b96      	ldr	r3, [pc, #600]	; (80039d4 <app_main+0x2bc>)
 800377a:	4a97      	ldr	r2, [pc, #604]	; (80039d8 <app_main+0x2c0>)
 800377c:	2101      	movs	r1, #1
 800377e:	4897      	ldr	r0, [pc, #604]	; (80039dc <app_main+0x2c4>)
 8003780:	f7fd fb1c 	bl	8000dbc <DHT_Init>
    DHT_ReadTempHum(&DHT1, &a);
 8003784:	4996      	ldr	r1, [pc, #600]	; (80039e0 <app_main+0x2c8>)
 8003786:	4895      	ldr	r0, [pc, #596]	; (80039dc <app_main+0x2c4>)
 8003788:	f7fd fb3f 	bl	8000e0a <DHT_ReadTempHum>
    uint8_t second_temp = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	777b      	strb	r3, [r7, #29]
    uint8_t second_present = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	773b      	strb	r3, [r7, #28]
    uint8_t min_temp = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	76fb      	strb	r3, [r7, #27]
    uint8_t min_present = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	76bb      	strb	r3, [r7, #26]
    uint8_t hour_temp = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	767b      	strb	r3, [r7, #25]
    uint8_t hour_present = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	763b      	strb	r3, [r7, #24]
    uint8_t date_temp = datetime.date;
 80037a4:	4b86      	ldr	r3, [pc, #536]	; (80039c0 <app_main+0x2a8>)
 80037a6:	791b      	ldrb	r3, [r3, #4]
 80037a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t date_present = 0	;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t month_temp = datetime.month;
 80037b2:	4b83      	ldr	r3, [pc, #524]	; (80039c0 <app_main+0x2a8>)
 80037b4:	795b      	ldrb	r3, [r3, #5]
 80037b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t month_present = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    uint8_t year_temp = datetime.year;
 80037c0:	4b7f      	ldr	r3, [pc, #508]	; (80039c0 <app_main+0x2a8>)
 80037c2:	799b      	ldrb	r3, [r3, #6]
 80037c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t year_present = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    second_temp = datetime.second;
 80037ce:	4b7c      	ldr	r3, [pc, #496]	; (80039c0 <app_main+0x2a8>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	777b      	strb	r3, [r7, #29]
    min_temp = datetime.min;
 80037d4:	4b7a      	ldr	r3, [pc, #488]	; (80039c0 <app_main+0x2a8>)
 80037d6:	785b      	ldrb	r3, [r3, #1]
 80037d8:	76fb      	strb	r3, [r7, #27]
    hour_temp = datetime.hour;
 80037da:	4b79      	ldr	r3, [pc, #484]	; (80039c0 <app_main+0x2a8>)
 80037dc:	789b      	ldrb	r3, [r3, #2]
 80037de:	767b      	strb	r3, [r7, #25]
    uint8_t temperature_temp = DHT1.Temp;
 80037e0:	4b7e      	ldr	r3, [pc, #504]	; (80039dc <app_main+0x2c4>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd f99f 	bl	8000b28 <__aeabi_f2uiz>
 80037ea:	4603      	mov	r3, r0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	77fb      	strb	r3, [r7, #31]
    uint8_t temperature_present = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	77bb      	strb	r3, [r7, #30]
    float humidity_temp = DHT1.Humi;
 80037f4:	4b79      	ldr	r3, [pc, #484]	; (80039dc <app_main+0x2c4>)
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	617b      	str	r3, [r7, #20]
    float humidity_present = 0;
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
    int dd = (int)datetime.date;
 8003800:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <app_main+0x2a8>)
 8003802:	791b      	ldrb	r3, [r3, #4]
 8003804:	60fb      	str	r3, [r7, #12]
    int mm = (int)datetime.month;
 8003806:	4b6e      	ldr	r3, [pc, #440]	; (80039c0 <app_main+0x2a8>)
 8003808:	795b      	ldrb	r3, [r3, #5]
 800380a:	60bb      	str	r3, [r7, #8]
    int yy = (int)datetime.year + 2000;
 800380c:	4b6c      	ldr	r3, [pc, #432]	; (80039c0 <app_main+0x2a8>)
 800380e:	799b      	ldrb	r3, [r3, #6]
 8003810:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003814:	607b      	str	r3, [r7, #4]
    int julianDay = jdFromDate(dd, mm, yy);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe f8fd 	bl	8001a1c <jdFromDate>
 8003822:	6338      	str	r0, [r7, #48]	; 0x30
    int timeZone = 7;
 8003824:	2307      	movs	r3, #7
 8003826:	603b      	str	r3, [r7, #0]
    int k = (int)((dd - 2415021) / 29.530588853);
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4b6e      	ldr	r3, [pc, #440]	; (80039e4 <app_main+0x2cc>)
 800382c:	4413      	add	r3, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f7fc fde8 	bl	8000404 <__aeabi_i2d>
 8003834:	a360      	add	r3, pc, #384	; (adr r3, 80039b8 <app_main+0x2a0>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f7fc ff77 	bl	800072c <__aeabi_ddiv>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	f7fd f8f7 	bl	8000a38 <__aeabi_d2iz>
 800384a:	4603      	mov	r3, r0
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int lunarDay = getNewMoonDay(k, timeZone);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003854:	f7fe f964 	bl	8001b20 <getNewMoonDay>
 8003858:	62b8      	str	r0, [r7, #40]	; 0x28
    screen_init();
 800385a:	f7ff fc4f 	bl	80030fc <screen_init>
			button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800385e:	2104      	movs	r1, #4
 8003860:	485c      	ldr	r0, [pc, #368]	; (80039d4 <app_main+0x2bc>)
 8003862:	f002 fcb3 	bl	80061cc <HAL_GPIO_ReadPin>
 8003866:	4603      	mov	r3, r0
 8003868:	b29a      	uxth	r2, r3
 800386a:	4b5f      	ldr	r3, [pc, #380]	; (80039e8 <app_main+0x2d0>)
 800386c:	801a      	strh	r2, [r3, #0]
	        button = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 800386e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003872:	485e      	ldr	r0, [pc, #376]	; (80039ec <app_main+0x2d4>)
 8003874:	f002 fcaa 	bl	80061cc <HAL_GPIO_ReadPin>
 8003878:	4603      	mov	r3, r0
 800387a:	b29a      	uxth	r2, r3
 800387c:	4b5c      	ldr	r3, [pc, #368]	; (80039f0 <app_main+0x2d8>)
 800387e:	801a      	strh	r2, [r3, #0]
	        nut = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8003880:	2108      	movs	r1, #8
 8003882:	485a      	ldr	r0, [pc, #360]	; (80039ec <app_main+0x2d4>)
 8003884:	f002 fca2 	bl	80061cc <HAL_GPIO_ReadPin>
 8003888:	4603      	mov	r3, r0
 800388a:	b29a      	uxth	r2, r3
 800388c:	4b59      	ldr	r3, [pc, #356]	; (80039f4 <app_main+0x2dc>)
 800388e:	801a      	strh	r2, [r3, #0]
	        if(main_screen == 1)
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <app_main+0x2e0>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d104      	bne.n	80038a2 <app_main+0x18a>
	        	re_screen_init();
 8003898:	f7ff fd4c 	bl	8003334 <re_screen_init>
	        	main_screen = 0;
 800389c:	4b56      	ldr	r3, [pc, #344]	; (80039f8 <app_main+0x2e0>)
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
	        if(check_state == 1)
 80038a2:	4b56      	ldr	r3, [pc, #344]	; (80039fc <app_main+0x2e4>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d114      	bne.n	80038d6 <app_main+0x1be>
	        	state++;
 80038ac:	4b54      	ldr	r3, [pc, #336]	; (8003a00 <app_main+0x2e8>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4b52      	ldr	r3, [pc, #328]	; (8003a00 <app_main+0x2e8>)
 80038b8:	701a      	strb	r2, [r3, #0]
	        	if (state > 3)	// state = 4 ep ve 0
 80038ba:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <app_main+0x2e8>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d902      	bls.n	80038ca <app_main+0x1b2>
	        		state = 0;
 80038c4:	4b4e      	ldr	r3, [pc, #312]	; (8003a00 <app_main+0x2e8>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
	        		choose = 0;
 80038ca:	4b4e      	ldr	r3, [pc, #312]	; (8003a04 <app_main+0x2ec>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
					check_state = 0;
 80038d0:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <app_main+0x2e4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
	        if(check_flag == 1)
 80038d6:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <app_main+0x2f0>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d125      	bne.n	800392c <app_main+0x214>
				if (flag == 0)
 80038e0:	4b4a      	ldr	r3, [pc, #296]	; (8003a0c <app_main+0x2f4>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <app_main+0x1e6>
					flag = 1;
 80038ea:	4b48      	ldr	r3, [pc, #288]	; (8003a0c <app_main+0x2f4>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
					temp = htim4.Instance->CNT;	// luu gia tri ban dau cua encoder
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <app_main+0x2b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b45      	ldr	r3, [pc, #276]	; (8003a10 <app_main+0x2f8>)
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e013      	b.n	8003926 <app_main+0x20e>
				else if (flag == 1)
 80038fe:	4b43      	ldr	r3, [pc, #268]	; (8003a0c <app_main+0x2f4>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d103      	bne.n	8003910 <app_main+0x1f8>
					flag = 0;
 8003908:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <app_main+0x2f4>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e00a      	b.n	8003926 <app_main+0x20e>
				else if (flag == 2) // tat buzzer bao thuc
 8003910:	4b3e      	ldr	r3, [pc, #248]	; (8003a0c <app_main+0x2f4>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d105      	bne.n	8003926 <app_main+0x20e>
					flag = 0;
 800391a:	4b3c      	ldr	r3, [pc, #240]	; (8003a0c <app_main+0x2f4>)
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
					i = 60;
 8003920:	4b3c      	ldr	r3, [pc, #240]	; (8003a14 <app_main+0x2fc>)
 8003922:	223c      	movs	r2, #60	; 0x3c
 8003924:	701a      	strb	r2, [r3, #0]
				check_flag = 0;
 8003926:	4b38      	ldr	r3, [pc, #224]	; (8003a08 <app_main+0x2f0>)
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
	        if(check_choose == 1)
 800392c:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <app_main+0x300>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d12e      	bne.n	8003994 <app_main+0x27c>
				if (choose == 0)
 8003936:	4b33      	ldr	r3, [pc, #204]	; (8003a04 <app_main+0x2ec>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <app_main+0x23c>
					choose = 1;flag = 0; re_write =1;
 8003940:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <app_main+0x2ec>)
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <app_main+0x2f4>)
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <app_main+0x304>)
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e01c      	b.n	800398e <app_main+0x276>
				else if (choose == 1)
 8003954:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <app_main+0x2ec>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d109      	bne.n	8003972 <app_main+0x25a>
					choose = 2; flag = 0; re_write =1;
 800395e:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <app_main+0x2ec>)
 8003960:	2202      	movs	r2, #2
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <app_main+0x2f4>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <app_main+0x304>)
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e00d      	b.n	800398e <app_main+0x276>
				else if (choose == 2)
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <app_main+0x2ec>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d108      	bne.n	800398e <app_main+0x276>
					choose = 0; flag = 0; re_write =1;
 800397c:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <app_main+0x2ec>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <app_main+0x2f4>)
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <app_main+0x304>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
				check_choose = 0;
 800398e:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <app_main+0x300>)
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
	        if(check_intro ==1)
 8003994:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <app_main+0x308>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b01      	cmp	r3, #1
 800399c:	d14b      	bne.n	8003a36 <app_main+0x31e>
				if (state == 5)
 800399e:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <app_main+0x2e8>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b05      	cmp	r3, #5
 80039a6:	d13d      	bne.n	8003a24 <app_main+0x30c>
					state = 0;
 80039a8:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <app_main+0x2e8>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
					main_screen = 1; // bat ham re_screen_init() chay 1 lan
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <app_main+0x2e0>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	e03c      	b.n	8003a30 <app_main+0x318>
 80039b6:	bf00      	nop
 80039b8:	abcb41d5 	.word	0xabcb41d5
 80039bc:	403d87d4 	.word	0x403d87d4
 80039c0:	200003a8 	.word	0x200003a8
 80039c4:	200003b0 	.word	0x200003b0
 80039c8:	20000338 	.word	0x20000338
 80039cc:	0801fc00 	.word	0x0801fc00
 80039d0:	200004f8 	.word	0x200004f8
 80039d4:	40010800 	.word	0x40010800
 80039d8:	20000468 	.word	0x20000468
 80039dc:	20000368 	.word	0x20000368
 80039e0:	20000364 	.word	0x20000364
 80039e4:	ffdb2653 	.word	0xffdb2653
 80039e8:	20000350 	.word	0x20000350
 80039ec:	40010c00 	.word	0x40010c00
 80039f0:	20000352 	.word	0x20000352
 80039f4:	20000354 	.word	0x20000354
 80039f8:	20000333 	.word	0x20000333
 80039fc:	200003b7 	.word	0x200003b7
 8003a00:	20000357 	.word	0x20000357
 8003a04:	20000356 	.word	0x20000356
 8003a08:	200003b9 	.word	0x200003b9
 8003a0c:	20000358 	.word	0x20000358
 8003a10:	2000035c 	.word	0x2000035c
 8003a14:	200000dc 	.word	0x200000dc
 8003a18:	200003b8 	.word	0x200003b8
 8003a1c:	20000334 	.word	0x20000334
 8003a20:	200003ba 	.word	0x200003ba
					state = 5;
 8003a24:	4b3a      	ldr	r3, [pc, #232]	; (8003b10 <app_main+0x3f8>)
 8003a26:	2205      	movs	r2, #5
 8003a28:	701a      	strb	r2, [r3, #0]
					rub_screen = 1;
 8003a2a:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <app_main+0x3fc>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	701a      	strb	r2, [r3, #0]
				check_intro = 0;
 8003a30:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <app_main+0x400>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
	        if (datetime.hour < 0 || datetime.hour > 23)
 8003a36:	4b39      	ldr	r3, [pc, #228]	; (8003b1c <app_main+0x404>)
 8003a38:	789b      	ldrb	r3, [r3, #2]
 8003a3a:	2b17      	cmp	r3, #23
 8003a3c:	d905      	bls.n	8003a4a <app_main+0x332>
	            datetime.hour = 0;
 8003a3e:	4b37      	ldr	r3, [pc, #220]	; (8003b1c <app_main+0x404>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	709a      	strb	r2, [r3, #2]
	            RTC_WriteTime(&datetime);
 8003a44:	4835      	ldr	r0, [pc, #212]	; (8003b1c <app_main+0x404>)
 8003a46:	f7ff f8d5 	bl	8002bf4 <RTC_WriteTime>
	        if (datetime.min < 0 || datetime.min > 59)
 8003a4a:	4b34      	ldr	r3, [pc, #208]	; (8003b1c <app_main+0x404>)
 8003a4c:	785b      	ldrb	r3, [r3, #1]
 8003a4e:	2b3b      	cmp	r3, #59	; 0x3b
 8003a50:	d905      	bls.n	8003a5e <app_main+0x346>
	            datetime.min = 0;
 8003a52:	4b32      	ldr	r3, [pc, #200]	; (8003b1c <app_main+0x404>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	705a      	strb	r2, [r3, #1]
	            RTC_WriteTime(&datetime);
 8003a58:	4830      	ldr	r0, [pc, #192]	; (8003b1c <app_main+0x404>)
 8003a5a:	f7ff f8cb 	bl	8002bf4 <RTC_WriteTime>
	        if (datetime.second < 0 || datetime.second > 59)
 8003a5e:	4b2f      	ldr	r3, [pc, #188]	; (8003b1c <app_main+0x404>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b3b      	cmp	r3, #59	; 0x3b
 8003a64:	d905      	bls.n	8003a72 <app_main+0x35a>
	            datetime.second = 0;
 8003a66:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <app_main+0x404>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
	            RTC_WriteTime(&datetime);
 8003a6c:	482b      	ldr	r0, [pc, #172]	; (8003b1c <app_main+0x404>)
 8003a6e:	f7ff f8c1 	bl	8002bf4 <RTC_WriteTime>
	        if (datetime.date < 0 || datetime.date > 31)
 8003a72:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <app_main+0x404>)
 8003a74:	791b      	ldrb	r3, [r3, #4]
 8003a76:	2b1f      	cmp	r3, #31
 8003a78:	d905      	bls.n	8003a86 <app_main+0x36e>
	            datetime.date = 0;
 8003a7a:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <app_main+0x404>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	711a      	strb	r2, [r3, #4]
	            RTC_WriteTime(&datetime);
 8003a80:	4826      	ldr	r0, [pc, #152]	; (8003b1c <app_main+0x404>)
 8003a82:	f7ff f8b7 	bl	8002bf4 <RTC_WriteTime>
	        if (datetime.month < 0 || datetime.month > 12)
 8003a86:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <app_main+0x404>)
 8003a88:	795b      	ldrb	r3, [r3, #5]
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	d905      	bls.n	8003a9a <app_main+0x382>
	            datetime.month = 0;
 8003a8e:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <app_main+0x404>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	715a      	strb	r2, [r3, #5]
	            RTC_WriteTime(&datetime);
 8003a94:	4821      	ldr	r0, [pc, #132]	; (8003b1c <app_main+0x404>)
 8003a96:	f7ff f8ad 	bl	8002bf4 <RTC_WriteTime>
	        if (datetime.year < 0 || datetime.year > 99)
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <app_main+0x404>)
 8003a9c:	799b      	ldrb	r3, [r3, #6]
 8003a9e:	2b63      	cmp	r3, #99	; 0x63
 8003aa0:	d905      	bls.n	8003aae <app_main+0x396>
	            datetime.year = 0;
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <app_main+0x404>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	719a      	strb	r2, [r3, #6]
	            RTC_WriteTime(&datetime);
 8003aa8:	481c      	ldr	r0, [pc, #112]	; (8003b1c <app_main+0x404>)
 8003aaa:	f7ff f8a3 	bl	8002bf4 <RTC_WriteTime>
	        if((alarm_buff[0] == datetime.hour) && (alarm_buff[1] == datetime.min) && (flag != 1)){flag=2;alarm_buzzer();}
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <app_main+0x408>)
 8003ab0:	781a      	ldrb	r2, [r3, #0]
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <app_main+0x404>)
 8003ab4:	789b      	ldrb	r3, [r3, #2]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d10f      	bne.n	8003ada <app_main+0x3c2>
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <app_main+0x408>)
 8003abc:	785a      	ldrb	r2, [r3, #1]
 8003abe:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <app_main+0x404>)
 8003ac0:	785b      	ldrb	r3, [r3, #1]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d109      	bne.n	8003ada <app_main+0x3c2>
 8003ac6:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <app_main+0x40c>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d004      	beq.n	8003ada <app_main+0x3c2>
 8003ad0:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <app_main+0x40c>)
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	f7ff fadb 	bl	8003090 <alarm_buzzer>
	        switch (state)
 8003ada:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <app_main+0x3f8>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	f201 8112 	bhi.w	8004d0a <app_main+0x15f2>
 8003ae6:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <app_main+0x3d4>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003b05 	.word	0x08003b05
 8003af0:	08003b29 	.word	0x08003b29
 8003af4:	08004111 	.word	0x08004111
 8003af8:	080046f5 	.word	0x080046f5
 8003afc:	08004d0b 	.word	0x08004d0b
 8003b00:	08004ca3 	.word	0x08004ca3
	            man_hinh_chinh();
 8003b04:	463b      	mov	r3, r7
 8003b06:	469c      	mov	ip, r3
 8003b08:	f7ff fd04 	bl	8003514 <man_hinh_chinh.0>
	            break;
 8003b0c:	f001 b904 	b.w	8004d18 <app_main+0x1600>
 8003b10:	20000357 	.word	0x20000357
 8003b14:	20000332 	.word	0x20000332
 8003b18:	200003ba 	.word	0x200003ba
 8003b1c:	200003a8 	.word	0x200003a8
 8003b20:	20000338 	.word	0x20000338
 8003b24:	20000358 	.word	0x20000358

	        case 1: // cai dat gio
	        		RTC_ReadTime(&datetime);
 8003b28:	4879      	ldr	r0, [pc, #484]	; (8003d10 <app_main+0x5f8>)
 8003b2a:	f7ff f8a9 	bl	8002c80 <RTC_ReadTime>
					if (choose == 0)
 8003b2e:	4b79      	ldr	r3, [pc, #484]	; (8003d14 <app_main+0x5fc>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 80f5 	bne.w	8003d24 <app_main+0x60c>
					{
						if(re_write == 1)
 8003b3a:	4b77      	ldr	r3, [pc, #476]	; (8003d18 <app_main+0x600>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	f040 809f 	bne.w	8003c82 <app_main+0x56a>
						{
						    update_change(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLACK , 1, 140, 100, 160, 110, COLOR_WHITE);
 8003b44:	4b72      	ldr	r3, [pc, #456]	; (8003d10 <app_main+0x5f8>)
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	7f39      	ldrb	r1, [r7, #28]
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	f103 001d 	add.w	r0, r3, #29
 8003b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b54:	9307      	str	r3, [sp, #28]
 8003b56:	236e      	movs	r3, #110	; 0x6e
 8003b58:	9306      	str	r3, [sp, #24]
 8003b5a:	23a0      	movs	r3, #160	; 0xa0
 8003b5c:	9305      	str	r3, [sp, #20]
 8003b5e:	2364      	movs	r3, #100	; 0x64
 8003b60:	9304      	str	r3, [sp, #16]
 8003b62:	238c      	movs	r3, #140	; 0x8c
 8003b64:	9303      	str	r3, [sp, #12]
 8003b66:	2301      	movs	r3, #1
 8003b68:	9302      	str	r3, [sp, #8]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	2364      	movs	r3, #100	; 0x64
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	238c      	movs	r3, #140	; 0x8c
 8003b74:	f7ff f938 	bl	8002de8 <update_change>

						    update_change(&min_temp, min_present, datetime.min, 110, 100, COLOR_BLACK, 1, 110, 100, 130, 110, COLOR_WHITE);
 8003b78:	4b65      	ldr	r3, [pc, #404]	; (8003d10 <app_main+0x5f8>)
 8003b7a:	785a      	ldrb	r2, [r3, #1]
 8003b7c:	7eb9      	ldrb	r1, [r7, #26]
 8003b7e:	463b      	mov	r3, r7
 8003b80:	f103 001b 	add.w	r0, r3, #27
 8003b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b88:	9307      	str	r3, [sp, #28]
 8003b8a:	236e      	movs	r3, #110	; 0x6e
 8003b8c:	9306      	str	r3, [sp, #24]
 8003b8e:	2382      	movs	r3, #130	; 0x82
 8003b90:	9305      	str	r3, [sp, #20]
 8003b92:	2364      	movs	r3, #100	; 0x64
 8003b94:	9304      	str	r3, [sp, #16]
 8003b96:	236e      	movs	r3, #110	; 0x6e
 8003b98:	9303      	str	r3, [sp, #12]
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	9302      	str	r3, [sp, #8]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	2364      	movs	r3, #100	; 0x64
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	236e      	movs	r3, #110	; 0x6e
 8003ba8:	f7ff f91e 	bl	8002de8 <update_change>

						    update_change(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLACK, 1, 85, 100, 105, 110, COLOR_WHITE);
 8003bac:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <app_main+0x5f8>)
 8003bae:	789a      	ldrb	r2, [r3, #2]
 8003bb0:	7e39      	ldrb	r1, [r7, #24]
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	f103 0019 	add.w	r0, r3, #25
 8003bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bbc:	9307      	str	r3, [sp, #28]
 8003bbe:	236e      	movs	r3, #110	; 0x6e
 8003bc0:	9306      	str	r3, [sp, #24]
 8003bc2:	2369      	movs	r3, #105	; 0x69
 8003bc4:	9305      	str	r3, [sp, #20]
 8003bc6:	2364      	movs	r3, #100	; 0x64
 8003bc8:	9304      	str	r3, [sp, #16]
 8003bca:	2355      	movs	r3, #85	; 0x55
 8003bcc:	9303      	str	r3, [sp, #12]
 8003bce:	2301      	movs	r3, #1
 8003bd0:	9302      	str	r3, [sp, #8]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	2364      	movs	r3, #100	; 0x64
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2355      	movs	r3, #85	; 0x55
 8003bdc:	f7ff f904 	bl	8002de8 <update_change>

						    update_change(&date_temp, date_present, datetime.date, 85, 120, COLOR_BLACK, 1, 85, 115, 105, 135, COLOR_WHITE);
 8003be0:	4b4b      	ldr	r3, [pc, #300]	; (8003d10 <app_main+0x5f8>)
 8003be2:	791a      	ldrb	r2, [r3, #4]
 8003be4:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8003be8:	f107 0027 	add.w	r0, r7, #39	; 0x27
 8003bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bf0:	9307      	str	r3, [sp, #28]
 8003bf2:	2387      	movs	r3, #135	; 0x87
 8003bf4:	9306      	str	r3, [sp, #24]
 8003bf6:	2369      	movs	r3, #105	; 0x69
 8003bf8:	9305      	str	r3, [sp, #20]
 8003bfa:	2373      	movs	r3, #115	; 0x73
 8003bfc:	9304      	str	r3, [sp, #16]
 8003bfe:	2355      	movs	r3, #85	; 0x55
 8003c00:	9303      	str	r3, [sp, #12]
 8003c02:	2301      	movs	r3, #1
 8003c04:	9302      	str	r3, [sp, #8]
 8003c06:	2300      	movs	r3, #0
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	2378      	movs	r3, #120	; 0x78
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2355      	movs	r3, #85	; 0x55
 8003c10:	f7ff f8ea 	bl	8002de8 <update_change>

						    update_change(&month_temp, month_present, datetime.month, 112, 120, COLOR_BLACK, 1, 110, 115, 130, 135, COLOR_WHITE);
 8003c14:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <app_main+0x5f8>)
 8003c16:	795a      	ldrb	r2, [r3, #5]
 8003c18:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8003c1c:	f107 0026 	add.w	r0, r7, #38	; 0x26
 8003c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c24:	9307      	str	r3, [sp, #28]
 8003c26:	2387      	movs	r3, #135	; 0x87
 8003c28:	9306      	str	r3, [sp, #24]
 8003c2a:	2382      	movs	r3, #130	; 0x82
 8003c2c:	9305      	str	r3, [sp, #20]
 8003c2e:	2373      	movs	r3, #115	; 0x73
 8003c30:	9304      	str	r3, [sp, #16]
 8003c32:	236e      	movs	r3, #110	; 0x6e
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	2301      	movs	r3, #1
 8003c38:	9302      	str	r3, [sp, #8]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	2378      	movs	r3, #120	; 0x78
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	2370      	movs	r3, #112	; 0x70
 8003c44:	f7ff f8d0 	bl	8002de8 <update_change>

						    update_change(&year_temp, year_present, datetime.year, 139, 120, COLOR_BLACK, 1, 135, 115, 160, 135, COLOR_WHITE);
 8003c48:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <app_main+0x5f8>)
 8003c4a:	799a      	ldrb	r2, [r3, #6]
 8003c4c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003c50:	f107 0025 	add.w	r0, r7, #37	; 0x25
 8003c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c58:	9307      	str	r3, [sp, #28]
 8003c5a:	2387      	movs	r3, #135	; 0x87
 8003c5c:	9306      	str	r3, [sp, #24]
 8003c5e:	23a0      	movs	r3, #160	; 0xa0
 8003c60:	9305      	str	r3, [sp, #20]
 8003c62:	2373      	movs	r3, #115	; 0x73
 8003c64:	9304      	str	r3, [sp, #16]
 8003c66:	2387      	movs	r3, #135	; 0x87
 8003c68:	9303      	str	r3, [sp, #12]
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	9302      	str	r3, [sp, #8]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	2378      	movs	r3, #120	; 0x78
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	238b      	movs	r3, #139	; 0x8b
 8003c78:	f7ff f8b6 	bl	8002de8 <update_change>

							re_write = 0;
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <app_main+0x600>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
						}
						RTC_ReadTime(&datetime);
 8003c82:	4823      	ldr	r0, [pc, #140]	; (8003d10 <app_main+0x5f8>)
 8003c84:	f7fe fffc 	bl	8002c80 <RTC_ReadTime>
		                update_change_choose(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLUEVIOLET, 1, 85, 100, 105, 110, COLOR_WHITE);
 8003c88:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <app_main+0x5f8>)
 8003c8a:	789a      	ldrb	r2, [r3, #2]
 8003c8c:	7e39      	ldrb	r1, [r7, #24]
 8003c8e:	463b      	mov	r3, r7
 8003c90:	f103 0019 	add.w	r0, r3, #25
 8003c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c98:	9307      	str	r3, [sp, #28]
 8003c9a:	236e      	movs	r3, #110	; 0x6e
 8003c9c:	9306      	str	r3, [sp, #24]
 8003c9e:	2369      	movs	r3, #105	; 0x69
 8003ca0:	9305      	str	r3, [sp, #20]
 8003ca2:	2364      	movs	r3, #100	; 0x64
 8003ca4:	9304      	str	r3, [sp, #16]
 8003ca6:	2355      	movs	r3, #85	; 0x55
 8003ca8:	9303      	str	r3, [sp, #12]
 8003caa:	2301      	movs	r3, #1
 8003cac:	9302      	str	r3, [sp, #8]
 8003cae:	f648 135c 	movw	r3, #35164	; 0x895c
 8003cb2:	9301      	str	r3, [sp, #4]
 8003cb4:	2364      	movs	r3, #100	; 0x64
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2355      	movs	r3, #85	; 0x55
 8003cba:	f7ff f8dd 	bl	8002e78 <update_change_choose>
						if (flag == 1)
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <app_main+0x604>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	f041 8023 	bne.w	8004d10 <app_main+0x15f8>
						{
							choose = 0;
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <app_main+0x5fc>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
							value_changed(&datetime.hour);
 8003cd0:	4813      	ldr	r0, [pc, #76]	; (8003d20 <app_main+0x608>)
 8003cd2:	f7ff f82b 	bl	8002d2c <value_changed>
			                update_change_choose(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_RED, 1, 85, 100, 105, 110, COLOR_WHITE);
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <app_main+0x5f8>)
 8003cd8:	789a      	ldrb	r2, [r3, #2]
 8003cda:	7e39      	ldrb	r1, [r7, #24]
 8003cdc:	463b      	mov	r3, r7
 8003cde:	f103 0019 	add.w	r0, r3, #25
 8003ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ce6:	9307      	str	r3, [sp, #28]
 8003ce8:	236e      	movs	r3, #110	; 0x6e
 8003cea:	9306      	str	r3, [sp, #24]
 8003cec:	2369      	movs	r3, #105	; 0x69
 8003cee:	9305      	str	r3, [sp, #20]
 8003cf0:	2364      	movs	r3, #100	; 0x64
 8003cf2:	9304      	str	r3, [sp, #16]
 8003cf4:	2355      	movs	r3, #85	; 0x55
 8003cf6:	9303      	str	r3, [sp, #12]
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	9302      	str	r3, [sp, #8]
 8003cfc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	2364      	movs	r3, #100	; 0x64
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2355      	movs	r3, #85	; 0x55
 8003d08:	f7ff f8b6 	bl	8002e78 <update_change_choose>
			                update_change_choose(&second_temp, second_present, datetime.second, 140, 100, COLOR_RED , 1, 140, 100, 160, 110, COLOR_WHITE);

						}
					}

	            break;
 8003d0c:	f001 b800 	b.w	8004d10 <app_main+0x15f8>
 8003d10:	200003a8 	.word	0x200003a8
 8003d14:	20000356 	.word	0x20000356
 8003d18:	20000334 	.word	0x20000334
 8003d1c:	20000358 	.word	0x20000358
 8003d20:	200003aa 	.word	0x200003aa
					else if (choose == 1)
 8003d24:	4b78      	ldr	r3, [pc, #480]	; (8003f08 <app_main+0x7f0>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	f040 80f6 	bne.w	8003f1c <app_main+0x804>
						if(re_write == 1)
 8003d30:	4b76      	ldr	r3, [pc, #472]	; (8003f0c <app_main+0x7f4>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	f040 809f 	bne.w	8003e78 <app_main+0x760>
						    update_change(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLACK , 1, 140, 100, 160, 110, COLOR_WHITE);
 8003d3a:	4b75      	ldr	r3, [pc, #468]	; (8003f10 <app_main+0x7f8>)
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	7f39      	ldrb	r1, [r7, #28]
 8003d40:	463b      	mov	r3, r7
 8003d42:	f103 001d 	add.w	r0, r3, #29
 8003d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d4a:	9307      	str	r3, [sp, #28]
 8003d4c:	236e      	movs	r3, #110	; 0x6e
 8003d4e:	9306      	str	r3, [sp, #24]
 8003d50:	23a0      	movs	r3, #160	; 0xa0
 8003d52:	9305      	str	r3, [sp, #20]
 8003d54:	2364      	movs	r3, #100	; 0x64
 8003d56:	9304      	str	r3, [sp, #16]
 8003d58:	238c      	movs	r3, #140	; 0x8c
 8003d5a:	9303      	str	r3, [sp, #12]
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	9302      	str	r3, [sp, #8]
 8003d60:	2300      	movs	r3, #0
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	2364      	movs	r3, #100	; 0x64
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	238c      	movs	r3, #140	; 0x8c
 8003d6a:	f7ff f83d 	bl	8002de8 <update_change>
						    update_change(&min_temp, min_present, datetime.min, 110, 100, COLOR_BLACK, 1, 110, 100, 130, 110, COLOR_WHITE);
 8003d6e:	4b68      	ldr	r3, [pc, #416]	; (8003f10 <app_main+0x7f8>)
 8003d70:	785a      	ldrb	r2, [r3, #1]
 8003d72:	7eb9      	ldrb	r1, [r7, #26]
 8003d74:	463b      	mov	r3, r7
 8003d76:	f103 001b 	add.w	r0, r3, #27
 8003d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d7e:	9307      	str	r3, [sp, #28]
 8003d80:	236e      	movs	r3, #110	; 0x6e
 8003d82:	9306      	str	r3, [sp, #24]
 8003d84:	2382      	movs	r3, #130	; 0x82
 8003d86:	9305      	str	r3, [sp, #20]
 8003d88:	2364      	movs	r3, #100	; 0x64
 8003d8a:	9304      	str	r3, [sp, #16]
 8003d8c:	236e      	movs	r3, #110	; 0x6e
 8003d8e:	9303      	str	r3, [sp, #12]
 8003d90:	2301      	movs	r3, #1
 8003d92:	9302      	str	r3, [sp, #8]
 8003d94:	2300      	movs	r3, #0
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	2364      	movs	r3, #100	; 0x64
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	236e      	movs	r3, #110	; 0x6e
 8003d9e:	f7ff f823 	bl	8002de8 <update_change>
						    update_change(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLACK, 1, 85, 100, 105, 110, COLOR_WHITE);
 8003da2:	4b5b      	ldr	r3, [pc, #364]	; (8003f10 <app_main+0x7f8>)
 8003da4:	789a      	ldrb	r2, [r3, #2]
 8003da6:	7e39      	ldrb	r1, [r7, #24]
 8003da8:	463b      	mov	r3, r7
 8003daa:	f103 0019 	add.w	r0, r3, #25
 8003dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003db2:	9307      	str	r3, [sp, #28]
 8003db4:	236e      	movs	r3, #110	; 0x6e
 8003db6:	9306      	str	r3, [sp, #24]
 8003db8:	2369      	movs	r3, #105	; 0x69
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	2364      	movs	r3, #100	; 0x64
 8003dbe:	9304      	str	r3, [sp, #16]
 8003dc0:	2355      	movs	r3, #85	; 0x55
 8003dc2:	9303      	str	r3, [sp, #12]
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	9302      	str	r3, [sp, #8]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	2364      	movs	r3, #100	; 0x64
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2355      	movs	r3, #85	; 0x55
 8003dd2:	f7ff f809 	bl	8002de8 <update_change>
						    update_change(&date_temp, date_present, datetime.date, 85, 120, COLOR_BLACK, 1, 85, 115, 105, 135, COLOR_WHITE);
 8003dd6:	4b4e      	ldr	r3, [pc, #312]	; (8003f10 <app_main+0x7f8>)
 8003dd8:	791a      	ldrb	r2, [r3, #4]
 8003dda:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8003dde:	f107 0027 	add.w	r0, r7, #39	; 0x27
 8003de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003de6:	9307      	str	r3, [sp, #28]
 8003de8:	2387      	movs	r3, #135	; 0x87
 8003dea:	9306      	str	r3, [sp, #24]
 8003dec:	2369      	movs	r3, #105	; 0x69
 8003dee:	9305      	str	r3, [sp, #20]
 8003df0:	2373      	movs	r3, #115	; 0x73
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	2355      	movs	r3, #85	; 0x55
 8003df6:	9303      	str	r3, [sp, #12]
 8003df8:	2301      	movs	r3, #1
 8003dfa:	9302      	str	r3, [sp, #8]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	2378      	movs	r3, #120	; 0x78
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2355      	movs	r3, #85	; 0x55
 8003e06:	f7fe ffef 	bl	8002de8 <update_change>
						    update_change(&month_temp, month_present, datetime.month, 112, 120, COLOR_BLACK, 1, 110, 115, 130, 135, COLOR_WHITE);
 8003e0a:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <app_main+0x7f8>)
 8003e0c:	795a      	ldrb	r2, [r3, #5]
 8003e0e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8003e12:	f107 0026 	add.w	r0, r7, #38	; 0x26
 8003e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e1a:	9307      	str	r3, [sp, #28]
 8003e1c:	2387      	movs	r3, #135	; 0x87
 8003e1e:	9306      	str	r3, [sp, #24]
 8003e20:	2382      	movs	r3, #130	; 0x82
 8003e22:	9305      	str	r3, [sp, #20]
 8003e24:	2373      	movs	r3, #115	; 0x73
 8003e26:	9304      	str	r3, [sp, #16]
 8003e28:	236e      	movs	r3, #110	; 0x6e
 8003e2a:	9303      	str	r3, [sp, #12]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	9302      	str	r3, [sp, #8]
 8003e30:	2300      	movs	r3, #0
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	2378      	movs	r3, #120	; 0x78
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	2370      	movs	r3, #112	; 0x70
 8003e3a:	f7fe ffd5 	bl	8002de8 <update_change>
						    update_change(&year_temp, year_present, datetime.year, 139, 120, COLOR_BLACK, 1, 135, 115, 160, 135, COLOR_WHITE);
 8003e3e:	4b34      	ldr	r3, [pc, #208]	; (8003f10 <app_main+0x7f8>)
 8003e40:	799a      	ldrb	r2, [r3, #6]
 8003e42:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003e46:	f107 0025 	add.w	r0, r7, #37	; 0x25
 8003e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e4e:	9307      	str	r3, [sp, #28]
 8003e50:	2387      	movs	r3, #135	; 0x87
 8003e52:	9306      	str	r3, [sp, #24]
 8003e54:	23a0      	movs	r3, #160	; 0xa0
 8003e56:	9305      	str	r3, [sp, #20]
 8003e58:	2373      	movs	r3, #115	; 0x73
 8003e5a:	9304      	str	r3, [sp, #16]
 8003e5c:	2387      	movs	r3, #135	; 0x87
 8003e5e:	9303      	str	r3, [sp, #12]
 8003e60:	2301      	movs	r3, #1
 8003e62:	9302      	str	r3, [sp, #8]
 8003e64:	2300      	movs	r3, #0
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	2378      	movs	r3, #120	; 0x78
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	238b      	movs	r3, #139	; 0x8b
 8003e6e:	f7fe ffbb 	bl	8002de8 <update_change>
							re_write = 0;
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <app_main+0x7f4>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
						RTC_ReadTime(&datetime);
 8003e78:	4825      	ldr	r0, [pc, #148]	; (8003f10 <app_main+0x7f8>)
 8003e7a:	f7fe ff01 	bl	8002c80 <RTC_ReadTime>
		                update_change_choose(&min_temp, min_present, datetime.min, 111, 100, COLOR_BLUEVIOLET, 1, 110, 100, 130, 110, COLOR_WHITE);
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <app_main+0x7f8>)
 8003e80:	785a      	ldrb	r2, [r3, #1]
 8003e82:	7eb9      	ldrb	r1, [r7, #26]
 8003e84:	463b      	mov	r3, r7
 8003e86:	f103 001b 	add.w	r0, r3, #27
 8003e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e8e:	9307      	str	r3, [sp, #28]
 8003e90:	236e      	movs	r3, #110	; 0x6e
 8003e92:	9306      	str	r3, [sp, #24]
 8003e94:	2382      	movs	r3, #130	; 0x82
 8003e96:	9305      	str	r3, [sp, #20]
 8003e98:	2364      	movs	r3, #100	; 0x64
 8003e9a:	9304      	str	r3, [sp, #16]
 8003e9c:	236e      	movs	r3, #110	; 0x6e
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	9302      	str	r3, [sp, #8]
 8003ea4:	f648 135c 	movw	r3, #35164	; 0x895c
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	2364      	movs	r3, #100	; 0x64
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	236f      	movs	r3, #111	; 0x6f
 8003eb0:	f7fe ffe2 	bl	8002e78 <update_change_choose>
						if (flag == 1)
 8003eb4:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <app_main+0x7fc>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	f040 8728 	bne.w	8004d10 <app_main+0x15f8>
							choose = 1;
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <app_main+0x7f0>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
							value_changed(&datetime.min);
 8003ec6:	4814      	ldr	r0, [pc, #80]	; (8003f18 <app_main+0x800>)
 8003ec8:	f7fe ff30 	bl	8002d2c <value_changed>
			                update_change_choose(&min_temp, min_present, datetime.min, 111, 100, COLOR_RED, 1, 110, 100, 130, 110, COLOR_WHITE);
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <app_main+0x7f8>)
 8003ece:	785a      	ldrb	r2, [r3, #1]
 8003ed0:	7eb9      	ldrb	r1, [r7, #26]
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	f103 001b 	add.w	r0, r3, #27
 8003ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003edc:	9307      	str	r3, [sp, #28]
 8003ede:	236e      	movs	r3, #110	; 0x6e
 8003ee0:	9306      	str	r3, [sp, #24]
 8003ee2:	2382      	movs	r3, #130	; 0x82
 8003ee4:	9305      	str	r3, [sp, #20]
 8003ee6:	2364      	movs	r3, #100	; 0x64
 8003ee8:	9304      	str	r3, [sp, #16]
 8003eea:	236e      	movs	r3, #110	; 0x6e
 8003eec:	9303      	str	r3, [sp, #12]
 8003eee:	2301      	movs	r3, #1
 8003ef0:	9302      	str	r3, [sp, #8]
 8003ef2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	2364      	movs	r3, #100	; 0x64
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	236f      	movs	r3, #111	; 0x6f
 8003efe:	f7fe ffbb 	bl	8002e78 <update_change_choose>
	            break;
 8003f02:	f000 bf05 	b.w	8004d10 <app_main+0x15f8>
 8003f06:	bf00      	nop
 8003f08:	20000356 	.word	0x20000356
 8003f0c:	20000334 	.word	0x20000334
 8003f10:	200003a8 	.word	0x200003a8
 8003f14:	20000358 	.word	0x20000358
 8003f18:	200003a9 	.word	0x200003a9
					else if (choose == 2)
 8003f1c:	4b78      	ldr	r3, [pc, #480]	; (8004100 <app_main+0x9e8>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	f040 86f4 	bne.w	8004d10 <app_main+0x15f8>
						if(re_write == 1)
 8003f28:	4b76      	ldr	r3, [pc, #472]	; (8004104 <app_main+0x9ec>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	f040 809f 	bne.w	8004070 <app_main+0x958>
						    update_change(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLACK , 1, 140, 100, 160, 110, COLOR_WHITE);
 8003f32:	4b75      	ldr	r3, [pc, #468]	; (8004108 <app_main+0x9f0>)
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	7f39      	ldrb	r1, [r7, #28]
 8003f38:	463b      	mov	r3, r7
 8003f3a:	f103 001d 	add.w	r0, r3, #29
 8003f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f42:	9307      	str	r3, [sp, #28]
 8003f44:	236e      	movs	r3, #110	; 0x6e
 8003f46:	9306      	str	r3, [sp, #24]
 8003f48:	23a0      	movs	r3, #160	; 0xa0
 8003f4a:	9305      	str	r3, [sp, #20]
 8003f4c:	2364      	movs	r3, #100	; 0x64
 8003f4e:	9304      	str	r3, [sp, #16]
 8003f50:	238c      	movs	r3, #140	; 0x8c
 8003f52:	9303      	str	r3, [sp, #12]
 8003f54:	2301      	movs	r3, #1
 8003f56:	9302      	str	r3, [sp, #8]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	2364      	movs	r3, #100	; 0x64
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	238c      	movs	r3, #140	; 0x8c
 8003f62:	f7fe ff41 	bl	8002de8 <update_change>
						    update_change(&min_temp, min_present, datetime.min, 110, 100, COLOR_BLACK, 1, 110, 100, 130, 110, COLOR_WHITE);
 8003f66:	4b68      	ldr	r3, [pc, #416]	; (8004108 <app_main+0x9f0>)
 8003f68:	785a      	ldrb	r2, [r3, #1]
 8003f6a:	7eb9      	ldrb	r1, [r7, #26]
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	f103 001b 	add.w	r0, r3, #27
 8003f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f76:	9307      	str	r3, [sp, #28]
 8003f78:	236e      	movs	r3, #110	; 0x6e
 8003f7a:	9306      	str	r3, [sp, #24]
 8003f7c:	2382      	movs	r3, #130	; 0x82
 8003f7e:	9305      	str	r3, [sp, #20]
 8003f80:	2364      	movs	r3, #100	; 0x64
 8003f82:	9304      	str	r3, [sp, #16]
 8003f84:	236e      	movs	r3, #110	; 0x6e
 8003f86:	9303      	str	r3, [sp, #12]
 8003f88:	2301      	movs	r3, #1
 8003f8a:	9302      	str	r3, [sp, #8]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	2364      	movs	r3, #100	; 0x64
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	236e      	movs	r3, #110	; 0x6e
 8003f96:	f7fe ff27 	bl	8002de8 <update_change>
						    update_change(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLACK, 1, 85, 100, 105, 110, COLOR_WHITE);
 8003f9a:	4b5b      	ldr	r3, [pc, #364]	; (8004108 <app_main+0x9f0>)
 8003f9c:	789a      	ldrb	r2, [r3, #2]
 8003f9e:	7e39      	ldrb	r1, [r7, #24]
 8003fa0:	463b      	mov	r3, r7
 8003fa2:	f103 0019 	add.w	r0, r3, #25
 8003fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003faa:	9307      	str	r3, [sp, #28]
 8003fac:	236e      	movs	r3, #110	; 0x6e
 8003fae:	9306      	str	r3, [sp, #24]
 8003fb0:	2369      	movs	r3, #105	; 0x69
 8003fb2:	9305      	str	r3, [sp, #20]
 8003fb4:	2364      	movs	r3, #100	; 0x64
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	2355      	movs	r3, #85	; 0x55
 8003fba:	9303      	str	r3, [sp, #12]
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	9302      	str	r3, [sp, #8]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	2364      	movs	r3, #100	; 0x64
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	2355      	movs	r3, #85	; 0x55
 8003fca:	f7fe ff0d 	bl	8002de8 <update_change>
						    update_change(&date_temp, date_present, datetime.date, 85, 120, COLOR_BLACK, 1, 85, 115, 105, 135, COLOR_WHITE);
 8003fce:	4b4e      	ldr	r3, [pc, #312]	; (8004108 <app_main+0x9f0>)
 8003fd0:	791a      	ldrb	r2, [r3, #4]
 8003fd2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8003fd6:	f107 0027 	add.w	r0, r7, #39	; 0x27
 8003fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fde:	9307      	str	r3, [sp, #28]
 8003fe0:	2387      	movs	r3, #135	; 0x87
 8003fe2:	9306      	str	r3, [sp, #24]
 8003fe4:	2369      	movs	r3, #105	; 0x69
 8003fe6:	9305      	str	r3, [sp, #20]
 8003fe8:	2373      	movs	r3, #115	; 0x73
 8003fea:	9304      	str	r3, [sp, #16]
 8003fec:	2355      	movs	r3, #85	; 0x55
 8003fee:	9303      	str	r3, [sp, #12]
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	9302      	str	r3, [sp, #8]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	2378      	movs	r3, #120	; 0x78
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2355      	movs	r3, #85	; 0x55
 8003ffe:	f7fe fef3 	bl	8002de8 <update_change>
						    update_change(&month_temp, month_present, datetime.month, 112, 120, COLOR_BLACK, 1, 110, 115, 130, 135, COLOR_WHITE);
 8004002:	4b41      	ldr	r3, [pc, #260]	; (8004108 <app_main+0x9f0>)
 8004004:	795a      	ldrb	r2, [r3, #5]
 8004006:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800400a:	f107 0026 	add.w	r0, r7, #38	; 0x26
 800400e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004012:	9307      	str	r3, [sp, #28]
 8004014:	2387      	movs	r3, #135	; 0x87
 8004016:	9306      	str	r3, [sp, #24]
 8004018:	2382      	movs	r3, #130	; 0x82
 800401a:	9305      	str	r3, [sp, #20]
 800401c:	2373      	movs	r3, #115	; 0x73
 800401e:	9304      	str	r3, [sp, #16]
 8004020:	236e      	movs	r3, #110	; 0x6e
 8004022:	9303      	str	r3, [sp, #12]
 8004024:	2301      	movs	r3, #1
 8004026:	9302      	str	r3, [sp, #8]
 8004028:	2300      	movs	r3, #0
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	2378      	movs	r3, #120	; 0x78
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2370      	movs	r3, #112	; 0x70
 8004032:	f7fe fed9 	bl	8002de8 <update_change>
						    update_change(&year_temp, year_present, datetime.year, 139, 120, COLOR_BLACK, 1, 135, 115, 160, 135, COLOR_WHITE);
 8004036:	4b34      	ldr	r3, [pc, #208]	; (8004108 <app_main+0x9f0>)
 8004038:	799a      	ldrb	r2, [r3, #6]
 800403a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800403e:	f107 0025 	add.w	r0, r7, #37	; 0x25
 8004042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004046:	9307      	str	r3, [sp, #28]
 8004048:	2387      	movs	r3, #135	; 0x87
 800404a:	9306      	str	r3, [sp, #24]
 800404c:	23a0      	movs	r3, #160	; 0xa0
 800404e:	9305      	str	r3, [sp, #20]
 8004050:	2373      	movs	r3, #115	; 0x73
 8004052:	9304      	str	r3, [sp, #16]
 8004054:	2387      	movs	r3, #135	; 0x87
 8004056:	9303      	str	r3, [sp, #12]
 8004058:	2301      	movs	r3, #1
 800405a:	9302      	str	r3, [sp, #8]
 800405c:	2300      	movs	r3, #0
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	2378      	movs	r3, #120	; 0x78
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	238b      	movs	r3, #139	; 0x8b
 8004066:	f7fe febf 	bl	8002de8 <update_change>
							re_write = 0;
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <app_main+0x9ec>)
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
						RTC_ReadTime(&datetime);
 8004070:	4825      	ldr	r0, [pc, #148]	; (8004108 <app_main+0x9f0>)
 8004072:	f7fe fe05 	bl	8002c80 <RTC_ReadTime>
		                update_change_choose(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLUEVIOLET , 1, 140, 100, 160, 110, COLOR_WHITE);
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <app_main+0x9f0>)
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	7f39      	ldrb	r1, [r7, #28]
 800407c:	463b      	mov	r3, r7
 800407e:	f103 001d 	add.w	r0, r3, #29
 8004082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004086:	9307      	str	r3, [sp, #28]
 8004088:	236e      	movs	r3, #110	; 0x6e
 800408a:	9306      	str	r3, [sp, #24]
 800408c:	23a0      	movs	r3, #160	; 0xa0
 800408e:	9305      	str	r3, [sp, #20]
 8004090:	2364      	movs	r3, #100	; 0x64
 8004092:	9304      	str	r3, [sp, #16]
 8004094:	238c      	movs	r3, #140	; 0x8c
 8004096:	9303      	str	r3, [sp, #12]
 8004098:	2301      	movs	r3, #1
 800409a:	9302      	str	r3, [sp, #8]
 800409c:	f648 135c 	movw	r3, #35164	; 0x895c
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	2364      	movs	r3, #100	; 0x64
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	238c      	movs	r3, #140	; 0x8c
 80040a8:	f7fe fee6 	bl	8002e78 <update_change_choose>
						if (flag == 1)
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <app_main+0x9f4>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	f040 862c 	bne.w	8004d10 <app_main+0x15f8>
							choose = 2;
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <app_main+0x9e8>)
 80040ba:	2202      	movs	r2, #2
 80040bc:	701a      	strb	r2, [r3, #0]
							value_changed(&datetime.second);
 80040be:	4812      	ldr	r0, [pc, #72]	; (8004108 <app_main+0x9f0>)
 80040c0:	f7fe fe34 	bl	8002d2c <value_changed>
			                update_change_choose(&second_temp, second_present, datetime.second, 140, 100, COLOR_RED , 1, 140, 100, 160, 110, COLOR_WHITE);
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <app_main+0x9f0>)
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	7f39      	ldrb	r1, [r7, #28]
 80040ca:	463b      	mov	r3, r7
 80040cc:	f103 001d 	add.w	r0, r3, #29
 80040d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040d4:	9307      	str	r3, [sp, #28]
 80040d6:	236e      	movs	r3, #110	; 0x6e
 80040d8:	9306      	str	r3, [sp, #24]
 80040da:	23a0      	movs	r3, #160	; 0xa0
 80040dc:	9305      	str	r3, [sp, #20]
 80040de:	2364      	movs	r3, #100	; 0x64
 80040e0:	9304      	str	r3, [sp, #16]
 80040e2:	238c      	movs	r3, #140	; 0x8c
 80040e4:	9303      	str	r3, [sp, #12]
 80040e6:	2301      	movs	r3, #1
 80040e8:	9302      	str	r3, [sp, #8]
 80040ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	2364      	movs	r3, #100	; 0x64
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	238c      	movs	r3, #140	; 0x8c
 80040f6:	f7fe febf 	bl	8002e78 <update_change_choose>
	            break;
 80040fa:	f000 be09 	b.w	8004d10 <app_main+0x15f8>
 80040fe:	bf00      	nop
 8004100:	20000356 	.word	0x20000356
 8004104:	20000334 	.word	0x20000334
 8004108:	200003a8 	.word	0x200003a8
 800410c:	20000358 	.word	0x20000358
	            //--------------------------------------------------------------------------------------------------------
	        case 2: // cai dat ngay thang
//				fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
//	        	while(1)
//	        	{
	        		RTC_ReadTime(&datetime);
 8004110:	4879      	ldr	r0, [pc, #484]	; (80042f8 <app_main+0xbe0>)
 8004112:	f7fe fdb5 	bl	8002c80 <RTC_ReadTime>
					if (choose == 0)
 8004116:	4b79      	ldr	r3, [pc, #484]	; (80042fc <app_main+0xbe4>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	f040 80f5 	bne.w	800430c <app_main+0xbf4>
					{
						if(re_write == 1)
 8004122:	4b77      	ldr	r3, [pc, #476]	; (8004300 <app_main+0xbe8>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b01      	cmp	r3, #1
 8004128:	f040 809f 	bne.w	800426a <app_main+0xb52>
						{
						    update_change(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLACK , 1, 140, 100, 160, 110, COLOR_WHITE);
 800412c:	4b72      	ldr	r3, [pc, #456]	; (80042f8 <app_main+0xbe0>)
 800412e:	781a      	ldrb	r2, [r3, #0]
 8004130:	7f39      	ldrb	r1, [r7, #28]
 8004132:	463b      	mov	r3, r7
 8004134:	f103 001d 	add.w	r0, r3, #29
 8004138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800413c:	9307      	str	r3, [sp, #28]
 800413e:	236e      	movs	r3, #110	; 0x6e
 8004140:	9306      	str	r3, [sp, #24]
 8004142:	23a0      	movs	r3, #160	; 0xa0
 8004144:	9305      	str	r3, [sp, #20]
 8004146:	2364      	movs	r3, #100	; 0x64
 8004148:	9304      	str	r3, [sp, #16]
 800414a:	238c      	movs	r3, #140	; 0x8c
 800414c:	9303      	str	r3, [sp, #12]
 800414e:	2301      	movs	r3, #1
 8004150:	9302      	str	r3, [sp, #8]
 8004152:	2300      	movs	r3, #0
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	2364      	movs	r3, #100	; 0x64
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	238c      	movs	r3, #140	; 0x8c
 800415c:	f7fe fe44 	bl	8002de8 <update_change>

						    update_change(&min_temp, min_present, datetime.min, 110, 100, COLOR_BLACK, 1, 110, 100, 130, 110, COLOR_WHITE);
 8004160:	4b65      	ldr	r3, [pc, #404]	; (80042f8 <app_main+0xbe0>)
 8004162:	785a      	ldrb	r2, [r3, #1]
 8004164:	7eb9      	ldrb	r1, [r7, #26]
 8004166:	463b      	mov	r3, r7
 8004168:	f103 001b 	add.w	r0, r3, #27
 800416c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004170:	9307      	str	r3, [sp, #28]
 8004172:	236e      	movs	r3, #110	; 0x6e
 8004174:	9306      	str	r3, [sp, #24]
 8004176:	2382      	movs	r3, #130	; 0x82
 8004178:	9305      	str	r3, [sp, #20]
 800417a:	2364      	movs	r3, #100	; 0x64
 800417c:	9304      	str	r3, [sp, #16]
 800417e:	236e      	movs	r3, #110	; 0x6e
 8004180:	9303      	str	r3, [sp, #12]
 8004182:	2301      	movs	r3, #1
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	2300      	movs	r3, #0
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	2364      	movs	r3, #100	; 0x64
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	236e      	movs	r3, #110	; 0x6e
 8004190:	f7fe fe2a 	bl	8002de8 <update_change>

						    update_change(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLACK, 1, 85, 100, 105, 110, COLOR_WHITE);
 8004194:	4b58      	ldr	r3, [pc, #352]	; (80042f8 <app_main+0xbe0>)
 8004196:	789a      	ldrb	r2, [r3, #2]
 8004198:	7e39      	ldrb	r1, [r7, #24]
 800419a:	463b      	mov	r3, r7
 800419c:	f103 0019 	add.w	r0, r3, #25
 80041a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041a4:	9307      	str	r3, [sp, #28]
 80041a6:	236e      	movs	r3, #110	; 0x6e
 80041a8:	9306      	str	r3, [sp, #24]
 80041aa:	2369      	movs	r3, #105	; 0x69
 80041ac:	9305      	str	r3, [sp, #20]
 80041ae:	2364      	movs	r3, #100	; 0x64
 80041b0:	9304      	str	r3, [sp, #16]
 80041b2:	2355      	movs	r3, #85	; 0x55
 80041b4:	9303      	str	r3, [sp, #12]
 80041b6:	2301      	movs	r3, #1
 80041b8:	9302      	str	r3, [sp, #8]
 80041ba:	2300      	movs	r3, #0
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	2364      	movs	r3, #100	; 0x64
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	2355      	movs	r3, #85	; 0x55
 80041c4:	f7fe fe10 	bl	8002de8 <update_change>

						    update_change(&date_temp, date_present, datetime.date, 85, 120, COLOR_BLACK, 1, 85, 115, 105, 135, COLOR_WHITE);
 80041c8:	4b4b      	ldr	r3, [pc, #300]	; (80042f8 <app_main+0xbe0>)
 80041ca:	791a      	ldrb	r2, [r3, #4]
 80041cc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80041d0:	f107 0027 	add.w	r0, r7, #39	; 0x27
 80041d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041d8:	9307      	str	r3, [sp, #28]
 80041da:	2387      	movs	r3, #135	; 0x87
 80041dc:	9306      	str	r3, [sp, #24]
 80041de:	2369      	movs	r3, #105	; 0x69
 80041e0:	9305      	str	r3, [sp, #20]
 80041e2:	2373      	movs	r3, #115	; 0x73
 80041e4:	9304      	str	r3, [sp, #16]
 80041e6:	2355      	movs	r3, #85	; 0x55
 80041e8:	9303      	str	r3, [sp, #12]
 80041ea:	2301      	movs	r3, #1
 80041ec:	9302      	str	r3, [sp, #8]
 80041ee:	2300      	movs	r3, #0
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	2378      	movs	r3, #120	; 0x78
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	2355      	movs	r3, #85	; 0x55
 80041f8:	f7fe fdf6 	bl	8002de8 <update_change>

						    update_change(&month_temp, month_present, datetime.month, 112, 120, COLOR_BLACK, 1, 110, 115, 130, 135, COLOR_WHITE);
 80041fc:	4b3e      	ldr	r3, [pc, #248]	; (80042f8 <app_main+0xbe0>)
 80041fe:	795a      	ldrb	r2, [r3, #5]
 8004200:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8004204:	f107 0026 	add.w	r0, r7, #38	; 0x26
 8004208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800420c:	9307      	str	r3, [sp, #28]
 800420e:	2387      	movs	r3, #135	; 0x87
 8004210:	9306      	str	r3, [sp, #24]
 8004212:	2382      	movs	r3, #130	; 0x82
 8004214:	9305      	str	r3, [sp, #20]
 8004216:	2373      	movs	r3, #115	; 0x73
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	236e      	movs	r3, #110	; 0x6e
 800421c:	9303      	str	r3, [sp, #12]
 800421e:	2301      	movs	r3, #1
 8004220:	9302      	str	r3, [sp, #8]
 8004222:	2300      	movs	r3, #0
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	2378      	movs	r3, #120	; 0x78
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2370      	movs	r3, #112	; 0x70
 800422c:	f7fe fddc 	bl	8002de8 <update_change>

						    update_change(&year_temp, year_present, datetime.year, 139, 120, COLOR_BLACK, 1, 135, 115, 160, 135, COLOR_WHITE);
 8004230:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <app_main+0xbe0>)
 8004232:	799a      	ldrb	r2, [r3, #6]
 8004234:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8004238:	f107 0025 	add.w	r0, r7, #37	; 0x25
 800423c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004240:	9307      	str	r3, [sp, #28]
 8004242:	2387      	movs	r3, #135	; 0x87
 8004244:	9306      	str	r3, [sp, #24]
 8004246:	23a0      	movs	r3, #160	; 0xa0
 8004248:	9305      	str	r3, [sp, #20]
 800424a:	2373      	movs	r3, #115	; 0x73
 800424c:	9304      	str	r3, [sp, #16]
 800424e:	2387      	movs	r3, #135	; 0x87
 8004250:	9303      	str	r3, [sp, #12]
 8004252:	2301      	movs	r3, #1
 8004254:	9302      	str	r3, [sp, #8]
 8004256:	2300      	movs	r3, #0
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	2378      	movs	r3, #120	; 0x78
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	238b      	movs	r3, #139	; 0x8b
 8004260:	f7fe fdc2 	bl	8002de8 <update_change>

							re_write = 0;
 8004264:	4b26      	ldr	r3, [pc, #152]	; (8004300 <app_main+0xbe8>)
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
						}
						RTC_ReadTime(&datetime);
 800426a:	4823      	ldr	r0, [pc, #140]	; (80042f8 <app_main+0xbe0>)
 800426c:	f7fe fd08 	bl	8002c80 <RTC_ReadTime>
		                update_change_choose(&date_temp, date_present, datetime.date, 85, 120, COLOR_BLUE, 1, 85, 115, 105, 135, COLOR_WHITE);
 8004270:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <app_main+0xbe0>)
 8004272:	791a      	ldrb	r2, [r3, #4]
 8004274:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8004278:	f107 0027 	add.w	r0, r7, #39	; 0x27
 800427c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004280:	9307      	str	r3, [sp, #28]
 8004282:	2387      	movs	r3, #135	; 0x87
 8004284:	9306      	str	r3, [sp, #24]
 8004286:	2369      	movs	r3, #105	; 0x69
 8004288:	9305      	str	r3, [sp, #20]
 800428a:	2373      	movs	r3, #115	; 0x73
 800428c:	9304      	str	r3, [sp, #16]
 800428e:	2355      	movs	r3, #85	; 0x55
 8004290:	9303      	str	r3, [sp, #12]
 8004292:	2301      	movs	r3, #1
 8004294:	9302      	str	r3, [sp, #8]
 8004296:	231f      	movs	r3, #31
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	2378      	movs	r3, #120	; 0x78
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2355      	movs	r3, #85	; 0x55
 80042a0:	f7fe fdea 	bl	8002e78 <update_change_choose>
						if (flag == 1)
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <app_main+0xbec>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	f040 8533 	bne.w	8004d16 <app_main+0x15fe>
						{
							choose = 0;
 80042b0:	4b12      	ldr	r3, [pc, #72]	; (80042fc <app_main+0xbe4>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
							value_changed(&datetime.date);
 80042b6:	4814      	ldr	r0, [pc, #80]	; (8004308 <app_main+0xbf0>)
 80042b8:	f7fe fd38 	bl	8002d2c <value_changed>
			                update_change_choose(&date_temp, date_present, datetime.date, 85, 120, COLOR_RED, 1, 85, 115, 105, 135, COLOR_WHITE);
 80042bc:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <app_main+0xbe0>)
 80042be:	791a      	ldrb	r2, [r3, #4]
 80042c0:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80042c4:	f107 0027 	add.w	r0, r7, #39	; 0x27
 80042c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042cc:	9307      	str	r3, [sp, #28]
 80042ce:	2387      	movs	r3, #135	; 0x87
 80042d0:	9306      	str	r3, [sp, #24]
 80042d2:	2369      	movs	r3, #105	; 0x69
 80042d4:	9305      	str	r3, [sp, #20]
 80042d6:	2373      	movs	r3, #115	; 0x73
 80042d8:	9304      	str	r3, [sp, #16]
 80042da:	2355      	movs	r3, #85	; 0x55
 80042dc:	9303      	str	r3, [sp, #12]
 80042de:	2301      	movs	r3, #1
 80042e0:	9302      	str	r3, [sp, #8]
 80042e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	2378      	movs	r3, #120	; 0x78
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	2355      	movs	r3, #85	; 0x55
 80042ee:	f7fe fdc3 	bl	8002e78 <update_change_choose>
							value_changed(&datetime.year);
			                update_change_choose(&year_temp, year_present, datetime.year, 139, 120, COLOR_RED, 1, 135, 115, 160, 135, COLOR_WHITE);
						}
					}
//	        	}
	            break;
 80042f2:	f000 bd10 	b.w	8004d16 <app_main+0x15fe>
 80042f6:	bf00      	nop
 80042f8:	200003a8 	.word	0x200003a8
 80042fc:	20000356 	.word	0x20000356
 8004300:	20000334 	.word	0x20000334
 8004304:	20000358 	.word	0x20000358
 8004308:	200003ac 	.word	0x200003ac
					else if (choose == 1)
 800430c:	4b77      	ldr	r3, [pc, #476]	; (80044ec <app_main+0xdd4>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b01      	cmp	r3, #1
 8004314:	f040 80f4 	bne.w	8004500 <app_main+0xde8>
						if(re_write == 1)
 8004318:	4b75      	ldr	r3, [pc, #468]	; (80044f0 <app_main+0xdd8>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	f040 809f 	bne.w	8004460 <app_main+0xd48>
						    update_change(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLACK , 1, 140, 100, 160, 110, COLOR_WHITE);
 8004322:	4b74      	ldr	r3, [pc, #464]	; (80044f4 <app_main+0xddc>)
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	7f39      	ldrb	r1, [r7, #28]
 8004328:	463b      	mov	r3, r7
 800432a:	f103 001d 	add.w	r0, r3, #29
 800432e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004332:	9307      	str	r3, [sp, #28]
 8004334:	236e      	movs	r3, #110	; 0x6e
 8004336:	9306      	str	r3, [sp, #24]
 8004338:	23a0      	movs	r3, #160	; 0xa0
 800433a:	9305      	str	r3, [sp, #20]
 800433c:	2364      	movs	r3, #100	; 0x64
 800433e:	9304      	str	r3, [sp, #16]
 8004340:	238c      	movs	r3, #140	; 0x8c
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	2301      	movs	r3, #1
 8004346:	9302      	str	r3, [sp, #8]
 8004348:	2300      	movs	r3, #0
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	2364      	movs	r3, #100	; 0x64
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	238c      	movs	r3, #140	; 0x8c
 8004352:	f7fe fd49 	bl	8002de8 <update_change>
						    update_change(&min_temp, min_present, datetime.min, 110, 100, COLOR_BLACK, 1, 110, 100, 130, 110, COLOR_WHITE);
 8004356:	4b67      	ldr	r3, [pc, #412]	; (80044f4 <app_main+0xddc>)
 8004358:	785a      	ldrb	r2, [r3, #1]
 800435a:	7eb9      	ldrb	r1, [r7, #26]
 800435c:	463b      	mov	r3, r7
 800435e:	f103 001b 	add.w	r0, r3, #27
 8004362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004366:	9307      	str	r3, [sp, #28]
 8004368:	236e      	movs	r3, #110	; 0x6e
 800436a:	9306      	str	r3, [sp, #24]
 800436c:	2382      	movs	r3, #130	; 0x82
 800436e:	9305      	str	r3, [sp, #20]
 8004370:	2364      	movs	r3, #100	; 0x64
 8004372:	9304      	str	r3, [sp, #16]
 8004374:	236e      	movs	r3, #110	; 0x6e
 8004376:	9303      	str	r3, [sp, #12]
 8004378:	2301      	movs	r3, #1
 800437a:	9302      	str	r3, [sp, #8]
 800437c:	2300      	movs	r3, #0
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	2364      	movs	r3, #100	; 0x64
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	236e      	movs	r3, #110	; 0x6e
 8004386:	f7fe fd2f 	bl	8002de8 <update_change>
						    update_change(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLACK, 1, 85, 100, 105, 110, COLOR_WHITE);
 800438a:	4b5a      	ldr	r3, [pc, #360]	; (80044f4 <app_main+0xddc>)
 800438c:	789a      	ldrb	r2, [r3, #2]
 800438e:	7e39      	ldrb	r1, [r7, #24]
 8004390:	463b      	mov	r3, r7
 8004392:	f103 0019 	add.w	r0, r3, #25
 8004396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800439a:	9307      	str	r3, [sp, #28]
 800439c:	236e      	movs	r3, #110	; 0x6e
 800439e:	9306      	str	r3, [sp, #24]
 80043a0:	2369      	movs	r3, #105	; 0x69
 80043a2:	9305      	str	r3, [sp, #20]
 80043a4:	2364      	movs	r3, #100	; 0x64
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	2355      	movs	r3, #85	; 0x55
 80043aa:	9303      	str	r3, [sp, #12]
 80043ac:	2301      	movs	r3, #1
 80043ae:	9302      	str	r3, [sp, #8]
 80043b0:	2300      	movs	r3, #0
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	2364      	movs	r3, #100	; 0x64
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2355      	movs	r3, #85	; 0x55
 80043ba:	f7fe fd15 	bl	8002de8 <update_change>
						    update_change(&date_temp, date_present, datetime.date, 85, 120, COLOR_BLACK, 1, 85, 115, 105, 135, COLOR_WHITE);
 80043be:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <app_main+0xddc>)
 80043c0:	791a      	ldrb	r2, [r3, #4]
 80043c2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80043c6:	f107 0027 	add.w	r0, r7, #39	; 0x27
 80043ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043ce:	9307      	str	r3, [sp, #28]
 80043d0:	2387      	movs	r3, #135	; 0x87
 80043d2:	9306      	str	r3, [sp, #24]
 80043d4:	2369      	movs	r3, #105	; 0x69
 80043d6:	9305      	str	r3, [sp, #20]
 80043d8:	2373      	movs	r3, #115	; 0x73
 80043da:	9304      	str	r3, [sp, #16]
 80043dc:	2355      	movs	r3, #85	; 0x55
 80043de:	9303      	str	r3, [sp, #12]
 80043e0:	2301      	movs	r3, #1
 80043e2:	9302      	str	r3, [sp, #8]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	2378      	movs	r3, #120	; 0x78
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2355      	movs	r3, #85	; 0x55
 80043ee:	f7fe fcfb 	bl	8002de8 <update_change>
						    update_change(&month_temp, month_present, datetime.month, 112, 120, COLOR_BLACK, 1, 110, 115, 130, 135, COLOR_WHITE);
 80043f2:	4b40      	ldr	r3, [pc, #256]	; (80044f4 <app_main+0xddc>)
 80043f4:	795a      	ldrb	r2, [r3, #5]
 80043f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80043fa:	f107 0026 	add.w	r0, r7, #38	; 0x26
 80043fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004402:	9307      	str	r3, [sp, #28]
 8004404:	2387      	movs	r3, #135	; 0x87
 8004406:	9306      	str	r3, [sp, #24]
 8004408:	2382      	movs	r3, #130	; 0x82
 800440a:	9305      	str	r3, [sp, #20]
 800440c:	2373      	movs	r3, #115	; 0x73
 800440e:	9304      	str	r3, [sp, #16]
 8004410:	236e      	movs	r3, #110	; 0x6e
 8004412:	9303      	str	r3, [sp, #12]
 8004414:	2301      	movs	r3, #1
 8004416:	9302      	str	r3, [sp, #8]
 8004418:	2300      	movs	r3, #0
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	2378      	movs	r3, #120	; 0x78
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2370      	movs	r3, #112	; 0x70
 8004422:	f7fe fce1 	bl	8002de8 <update_change>
						    update_change(&year_temp, year_present, datetime.year, 139, 120, COLOR_BLACK, 1, 135, 115, 160, 135, COLOR_WHITE);
 8004426:	4b33      	ldr	r3, [pc, #204]	; (80044f4 <app_main+0xddc>)
 8004428:	799a      	ldrb	r2, [r3, #6]
 800442a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800442e:	f107 0025 	add.w	r0, r7, #37	; 0x25
 8004432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004436:	9307      	str	r3, [sp, #28]
 8004438:	2387      	movs	r3, #135	; 0x87
 800443a:	9306      	str	r3, [sp, #24]
 800443c:	23a0      	movs	r3, #160	; 0xa0
 800443e:	9305      	str	r3, [sp, #20]
 8004440:	2373      	movs	r3, #115	; 0x73
 8004442:	9304      	str	r3, [sp, #16]
 8004444:	2387      	movs	r3, #135	; 0x87
 8004446:	9303      	str	r3, [sp, #12]
 8004448:	2301      	movs	r3, #1
 800444a:	9302      	str	r3, [sp, #8]
 800444c:	2300      	movs	r3, #0
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	2378      	movs	r3, #120	; 0x78
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	238b      	movs	r3, #139	; 0x8b
 8004456:	f7fe fcc7 	bl	8002de8 <update_change>
							re_write = 0;
 800445a:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <app_main+0xdd8>)
 800445c:	2200      	movs	r2, #0
 800445e:	701a      	strb	r2, [r3, #0]
						RTC_ReadTime(&datetime);
 8004460:	4824      	ldr	r0, [pc, #144]	; (80044f4 <app_main+0xddc>)
 8004462:	f7fe fc0d 	bl	8002c80 <RTC_ReadTime>
		                update_change_choose(&month_temp, month_present, datetime.month, 112, 120, COLOR_BLUE, 1, 110, 115, 130, 135, COLOR_WHITE);
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <app_main+0xddc>)
 8004468:	795a      	ldrb	r2, [r3, #5]
 800446a:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800446e:	f107 0026 	add.w	r0, r7, #38	; 0x26
 8004472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004476:	9307      	str	r3, [sp, #28]
 8004478:	2387      	movs	r3, #135	; 0x87
 800447a:	9306      	str	r3, [sp, #24]
 800447c:	2382      	movs	r3, #130	; 0x82
 800447e:	9305      	str	r3, [sp, #20]
 8004480:	2373      	movs	r3, #115	; 0x73
 8004482:	9304      	str	r3, [sp, #16]
 8004484:	236e      	movs	r3, #110	; 0x6e
 8004486:	9303      	str	r3, [sp, #12]
 8004488:	2301      	movs	r3, #1
 800448a:	9302      	str	r3, [sp, #8]
 800448c:	231f      	movs	r3, #31
 800448e:	9301      	str	r3, [sp, #4]
 8004490:	2378      	movs	r3, #120	; 0x78
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	2370      	movs	r3, #112	; 0x70
 8004496:	f7fe fcef 	bl	8002e78 <update_change_choose>
						if (flag == 1)
 800449a:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <app_main+0xde0>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f040 8438 	bne.w	8004d16 <app_main+0x15fe>
							choose = 1;
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <app_main+0xdd4>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]
							value_changed(&datetime.month);
 80044ac:	4813      	ldr	r0, [pc, #76]	; (80044fc <app_main+0xde4>)
 80044ae:	f7fe fc3d 	bl	8002d2c <value_changed>
			                update_change_choose(&month_temp, month_present, datetime.month, 112, 120, COLOR_RED, 1, 110, 115, 130, 135, COLOR_WHITE);
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <app_main+0xddc>)
 80044b4:	795a      	ldrb	r2, [r3, #5]
 80044b6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80044ba:	f107 0026 	add.w	r0, r7, #38	; 0x26
 80044be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044c2:	9307      	str	r3, [sp, #28]
 80044c4:	2387      	movs	r3, #135	; 0x87
 80044c6:	9306      	str	r3, [sp, #24]
 80044c8:	2382      	movs	r3, #130	; 0x82
 80044ca:	9305      	str	r3, [sp, #20]
 80044cc:	2373      	movs	r3, #115	; 0x73
 80044ce:	9304      	str	r3, [sp, #16]
 80044d0:	236e      	movs	r3, #110	; 0x6e
 80044d2:	9303      	str	r3, [sp, #12]
 80044d4:	2301      	movs	r3, #1
 80044d6:	9302      	str	r3, [sp, #8]
 80044d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	2378      	movs	r3, #120	; 0x78
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2370      	movs	r3, #112	; 0x70
 80044e4:	f7fe fcc8 	bl	8002e78 <update_change_choose>
	            break;
 80044e8:	f000 bc15 	b.w	8004d16 <app_main+0x15fe>
 80044ec:	20000356 	.word	0x20000356
 80044f0:	20000334 	.word	0x20000334
 80044f4:	200003a8 	.word	0x200003a8
 80044f8:	20000358 	.word	0x20000358
 80044fc:	200003ad 	.word	0x200003ad
					else if (choose == 2)
 8004500:	4b77      	ldr	r3, [pc, #476]	; (80046e0 <app_main+0xfc8>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	f040 8405 	bne.w	8004d16 <app_main+0x15fe>
						if(re_write == 1)
 800450c:	4b75      	ldr	r3, [pc, #468]	; (80046e4 <app_main+0xfcc>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	f040 809f 	bne.w	8004654 <app_main+0xf3c>
						    update_change(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLACK , 1, 140, 100, 160, 110, COLOR_WHITE);
 8004516:	4b74      	ldr	r3, [pc, #464]	; (80046e8 <app_main+0xfd0>)
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	7f39      	ldrb	r1, [r7, #28]
 800451c:	463b      	mov	r3, r7
 800451e:	f103 001d 	add.w	r0, r3, #29
 8004522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004526:	9307      	str	r3, [sp, #28]
 8004528:	236e      	movs	r3, #110	; 0x6e
 800452a:	9306      	str	r3, [sp, #24]
 800452c:	23a0      	movs	r3, #160	; 0xa0
 800452e:	9305      	str	r3, [sp, #20]
 8004530:	2364      	movs	r3, #100	; 0x64
 8004532:	9304      	str	r3, [sp, #16]
 8004534:	238c      	movs	r3, #140	; 0x8c
 8004536:	9303      	str	r3, [sp, #12]
 8004538:	2301      	movs	r3, #1
 800453a:	9302      	str	r3, [sp, #8]
 800453c:	2300      	movs	r3, #0
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	2364      	movs	r3, #100	; 0x64
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	238c      	movs	r3, #140	; 0x8c
 8004546:	f7fe fc4f 	bl	8002de8 <update_change>
						    update_change(&min_temp, min_present, datetime.min, 110, 100, COLOR_BLACK, 1, 110, 100, 130, 110, COLOR_WHITE);
 800454a:	4b67      	ldr	r3, [pc, #412]	; (80046e8 <app_main+0xfd0>)
 800454c:	785a      	ldrb	r2, [r3, #1]
 800454e:	7eb9      	ldrb	r1, [r7, #26]
 8004550:	463b      	mov	r3, r7
 8004552:	f103 001b 	add.w	r0, r3, #27
 8004556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800455a:	9307      	str	r3, [sp, #28]
 800455c:	236e      	movs	r3, #110	; 0x6e
 800455e:	9306      	str	r3, [sp, #24]
 8004560:	2382      	movs	r3, #130	; 0x82
 8004562:	9305      	str	r3, [sp, #20]
 8004564:	2364      	movs	r3, #100	; 0x64
 8004566:	9304      	str	r3, [sp, #16]
 8004568:	236e      	movs	r3, #110	; 0x6e
 800456a:	9303      	str	r3, [sp, #12]
 800456c:	2301      	movs	r3, #1
 800456e:	9302      	str	r3, [sp, #8]
 8004570:	2300      	movs	r3, #0
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	2364      	movs	r3, #100	; 0x64
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	236e      	movs	r3, #110	; 0x6e
 800457a:	f7fe fc35 	bl	8002de8 <update_change>
						    update_change(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLACK, 1, 85, 100, 105, 110, COLOR_WHITE);
 800457e:	4b5a      	ldr	r3, [pc, #360]	; (80046e8 <app_main+0xfd0>)
 8004580:	789a      	ldrb	r2, [r3, #2]
 8004582:	7e39      	ldrb	r1, [r7, #24]
 8004584:	463b      	mov	r3, r7
 8004586:	f103 0019 	add.w	r0, r3, #25
 800458a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800458e:	9307      	str	r3, [sp, #28]
 8004590:	236e      	movs	r3, #110	; 0x6e
 8004592:	9306      	str	r3, [sp, #24]
 8004594:	2369      	movs	r3, #105	; 0x69
 8004596:	9305      	str	r3, [sp, #20]
 8004598:	2364      	movs	r3, #100	; 0x64
 800459a:	9304      	str	r3, [sp, #16]
 800459c:	2355      	movs	r3, #85	; 0x55
 800459e:	9303      	str	r3, [sp, #12]
 80045a0:	2301      	movs	r3, #1
 80045a2:	9302      	str	r3, [sp, #8]
 80045a4:	2300      	movs	r3, #0
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	2364      	movs	r3, #100	; 0x64
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2355      	movs	r3, #85	; 0x55
 80045ae:	f7fe fc1b 	bl	8002de8 <update_change>
						    update_change(&date_temp, date_present, datetime.date, 85, 120, COLOR_BLACK, 1, 85, 115, 105, 135, COLOR_WHITE);
 80045b2:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <app_main+0xfd0>)
 80045b4:	791a      	ldrb	r2, [r3, #4]
 80045b6:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80045ba:	f107 0027 	add.w	r0, r7, #39	; 0x27
 80045be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045c2:	9307      	str	r3, [sp, #28]
 80045c4:	2387      	movs	r3, #135	; 0x87
 80045c6:	9306      	str	r3, [sp, #24]
 80045c8:	2369      	movs	r3, #105	; 0x69
 80045ca:	9305      	str	r3, [sp, #20]
 80045cc:	2373      	movs	r3, #115	; 0x73
 80045ce:	9304      	str	r3, [sp, #16]
 80045d0:	2355      	movs	r3, #85	; 0x55
 80045d2:	9303      	str	r3, [sp, #12]
 80045d4:	2301      	movs	r3, #1
 80045d6:	9302      	str	r3, [sp, #8]
 80045d8:	2300      	movs	r3, #0
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	2378      	movs	r3, #120	; 0x78
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2355      	movs	r3, #85	; 0x55
 80045e2:	f7fe fc01 	bl	8002de8 <update_change>
						    update_change(&month_temp, month_present, datetime.month, 112, 120, COLOR_BLACK, 1, 110, 115, 130, 135, COLOR_WHITE);
 80045e6:	4b40      	ldr	r3, [pc, #256]	; (80046e8 <app_main+0xfd0>)
 80045e8:	795a      	ldrb	r2, [r3, #5]
 80045ea:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80045ee:	f107 0026 	add.w	r0, r7, #38	; 0x26
 80045f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045f6:	9307      	str	r3, [sp, #28]
 80045f8:	2387      	movs	r3, #135	; 0x87
 80045fa:	9306      	str	r3, [sp, #24]
 80045fc:	2382      	movs	r3, #130	; 0x82
 80045fe:	9305      	str	r3, [sp, #20]
 8004600:	2373      	movs	r3, #115	; 0x73
 8004602:	9304      	str	r3, [sp, #16]
 8004604:	236e      	movs	r3, #110	; 0x6e
 8004606:	9303      	str	r3, [sp, #12]
 8004608:	2301      	movs	r3, #1
 800460a:	9302      	str	r3, [sp, #8]
 800460c:	2300      	movs	r3, #0
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	2378      	movs	r3, #120	; 0x78
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2370      	movs	r3, #112	; 0x70
 8004616:	f7fe fbe7 	bl	8002de8 <update_change>
						    update_change(&year_temp, year_present, datetime.year, 139, 120, COLOR_BLACK, 1, 135, 115, 160, 135, COLOR_WHITE);
 800461a:	4b33      	ldr	r3, [pc, #204]	; (80046e8 <app_main+0xfd0>)
 800461c:	799a      	ldrb	r2, [r3, #6]
 800461e:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8004622:	f107 0025 	add.w	r0, r7, #37	; 0x25
 8004626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800462a:	9307      	str	r3, [sp, #28]
 800462c:	2387      	movs	r3, #135	; 0x87
 800462e:	9306      	str	r3, [sp, #24]
 8004630:	23a0      	movs	r3, #160	; 0xa0
 8004632:	9305      	str	r3, [sp, #20]
 8004634:	2373      	movs	r3, #115	; 0x73
 8004636:	9304      	str	r3, [sp, #16]
 8004638:	2387      	movs	r3, #135	; 0x87
 800463a:	9303      	str	r3, [sp, #12]
 800463c:	2301      	movs	r3, #1
 800463e:	9302      	str	r3, [sp, #8]
 8004640:	2300      	movs	r3, #0
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	2378      	movs	r3, #120	; 0x78
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	238b      	movs	r3, #139	; 0x8b
 800464a:	f7fe fbcd 	bl	8002de8 <update_change>
							re_write = 0;
 800464e:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <app_main+0xfcc>)
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
						RTC_ReadTime(&datetime);
 8004654:	4824      	ldr	r0, [pc, #144]	; (80046e8 <app_main+0xfd0>)
 8004656:	f7fe fb13 	bl	8002c80 <RTC_ReadTime>
		                update_change_choose(&year_temp, year_present, datetime.year, 139, 120, COLOR_BLUE, 1, 135, 115, 160, 135, COLOR_WHITE);
 800465a:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <app_main+0xfd0>)
 800465c:	799a      	ldrb	r2, [r3, #6]
 800465e:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8004662:	f107 0025 	add.w	r0, r7, #37	; 0x25
 8004666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800466a:	9307      	str	r3, [sp, #28]
 800466c:	2387      	movs	r3, #135	; 0x87
 800466e:	9306      	str	r3, [sp, #24]
 8004670:	23a0      	movs	r3, #160	; 0xa0
 8004672:	9305      	str	r3, [sp, #20]
 8004674:	2373      	movs	r3, #115	; 0x73
 8004676:	9304      	str	r3, [sp, #16]
 8004678:	2387      	movs	r3, #135	; 0x87
 800467a:	9303      	str	r3, [sp, #12]
 800467c:	2301      	movs	r3, #1
 800467e:	9302      	str	r3, [sp, #8]
 8004680:	231f      	movs	r3, #31
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	2378      	movs	r3, #120	; 0x78
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	238b      	movs	r3, #139	; 0x8b
 800468a:	f7fe fbf5 	bl	8002e78 <update_change_choose>
						if (flag == 1)
 800468e:	4b17      	ldr	r3, [pc, #92]	; (80046ec <app_main+0xfd4>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	f040 833e 	bne.w	8004d16 <app_main+0x15fe>
							choose = 2;
 800469a:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <app_main+0xfc8>)
 800469c:	2202      	movs	r2, #2
 800469e:	701a      	strb	r2, [r3, #0]
							value_changed(&datetime.year);
 80046a0:	4813      	ldr	r0, [pc, #76]	; (80046f0 <app_main+0xfd8>)
 80046a2:	f7fe fb43 	bl	8002d2c <value_changed>
			                update_change_choose(&year_temp, year_present, datetime.year, 139, 120, COLOR_RED, 1, 135, 115, 160, 135, COLOR_WHITE);
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <app_main+0xfd0>)
 80046a8:	799a      	ldrb	r2, [r3, #6]
 80046aa:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80046ae:	f107 0025 	add.w	r0, r7, #37	; 0x25
 80046b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046b6:	9307      	str	r3, [sp, #28]
 80046b8:	2387      	movs	r3, #135	; 0x87
 80046ba:	9306      	str	r3, [sp, #24]
 80046bc:	23a0      	movs	r3, #160	; 0xa0
 80046be:	9305      	str	r3, [sp, #20]
 80046c0:	2373      	movs	r3, #115	; 0x73
 80046c2:	9304      	str	r3, [sp, #16]
 80046c4:	2387      	movs	r3, #135	; 0x87
 80046c6:	9303      	str	r3, [sp, #12]
 80046c8:	2301      	movs	r3, #1
 80046ca:	9302      	str	r3, [sp, #8]
 80046cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	2378      	movs	r3, #120	; 0x78
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	238b      	movs	r3, #139	; 0x8b
 80046d8:	f7fe fbce 	bl	8002e78 <update_change_choose>
	            break;
 80046dc:	e31b      	b.n	8004d16 <app_main+0x15fe>
 80046de:	bf00      	nop
 80046e0:	20000356 	.word	0x20000356
 80046e4:	20000334 	.word	0x20000334
 80046e8:	200003a8 	.word	0x200003a8
 80046ec:	20000358 	.word	0x20000358
 80046f0:	200003ae 	.word	0x200003ae
	        case 3: // cai dat gio bao thuc
//	        					fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
//
//	        	while(1)
//	        	{
					if (choose == 0)
 80046f4:	4b76      	ldr	r3, [pc, #472]	; (80048d0 <app_main+0x11b8>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f040 80f2 	bne.w	80048e4 <app_main+0x11cc>
					{
						if(re_write == 1)
 8004700:	4b74      	ldr	r3, [pc, #464]	; (80048d4 <app_main+0x11bc>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	f040 809f 	bne.w	8004848 <app_main+0x1130>
						{
						    update_change(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLACK , 1, 140, 100, 160, 110, COLOR_WHITE);
 800470a:	4b73      	ldr	r3, [pc, #460]	; (80048d8 <app_main+0x11c0>)
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	7f39      	ldrb	r1, [r7, #28]
 8004710:	463b      	mov	r3, r7
 8004712:	f103 001d 	add.w	r0, r3, #29
 8004716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800471a:	9307      	str	r3, [sp, #28]
 800471c:	236e      	movs	r3, #110	; 0x6e
 800471e:	9306      	str	r3, [sp, #24]
 8004720:	23a0      	movs	r3, #160	; 0xa0
 8004722:	9305      	str	r3, [sp, #20]
 8004724:	2364      	movs	r3, #100	; 0x64
 8004726:	9304      	str	r3, [sp, #16]
 8004728:	238c      	movs	r3, #140	; 0x8c
 800472a:	9303      	str	r3, [sp, #12]
 800472c:	2301      	movs	r3, #1
 800472e:	9302      	str	r3, [sp, #8]
 8004730:	2300      	movs	r3, #0
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	2364      	movs	r3, #100	; 0x64
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	238c      	movs	r3, #140	; 0x8c
 800473a:	f7fe fb55 	bl	8002de8 <update_change>

						    update_change(&min_temp, min_present, datetime.min, 110, 100, COLOR_BLACK, 1, 110, 100, 130, 110, COLOR_WHITE);
 800473e:	4b66      	ldr	r3, [pc, #408]	; (80048d8 <app_main+0x11c0>)
 8004740:	785a      	ldrb	r2, [r3, #1]
 8004742:	7eb9      	ldrb	r1, [r7, #26]
 8004744:	463b      	mov	r3, r7
 8004746:	f103 001b 	add.w	r0, r3, #27
 800474a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800474e:	9307      	str	r3, [sp, #28]
 8004750:	236e      	movs	r3, #110	; 0x6e
 8004752:	9306      	str	r3, [sp, #24]
 8004754:	2382      	movs	r3, #130	; 0x82
 8004756:	9305      	str	r3, [sp, #20]
 8004758:	2364      	movs	r3, #100	; 0x64
 800475a:	9304      	str	r3, [sp, #16]
 800475c:	236e      	movs	r3, #110	; 0x6e
 800475e:	9303      	str	r3, [sp, #12]
 8004760:	2301      	movs	r3, #1
 8004762:	9302      	str	r3, [sp, #8]
 8004764:	2300      	movs	r3, #0
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	2364      	movs	r3, #100	; 0x64
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	236e      	movs	r3, #110	; 0x6e
 800476e:	f7fe fb3b 	bl	8002de8 <update_change>

						    update_change(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLACK, 1, 85, 100, 105, 110, COLOR_WHITE);
 8004772:	4b59      	ldr	r3, [pc, #356]	; (80048d8 <app_main+0x11c0>)
 8004774:	789a      	ldrb	r2, [r3, #2]
 8004776:	7e39      	ldrb	r1, [r7, #24]
 8004778:	463b      	mov	r3, r7
 800477a:	f103 0019 	add.w	r0, r3, #25
 800477e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004782:	9307      	str	r3, [sp, #28]
 8004784:	236e      	movs	r3, #110	; 0x6e
 8004786:	9306      	str	r3, [sp, #24]
 8004788:	2369      	movs	r3, #105	; 0x69
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	2364      	movs	r3, #100	; 0x64
 800478e:	9304      	str	r3, [sp, #16]
 8004790:	2355      	movs	r3, #85	; 0x55
 8004792:	9303      	str	r3, [sp, #12]
 8004794:	2301      	movs	r3, #1
 8004796:	9302      	str	r3, [sp, #8]
 8004798:	2300      	movs	r3, #0
 800479a:	9301      	str	r3, [sp, #4]
 800479c:	2364      	movs	r3, #100	; 0x64
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	2355      	movs	r3, #85	; 0x55
 80047a2:	f7fe fb21 	bl	8002de8 <update_change>

						    update_change(&date_temp, date_present, datetime.date, 85, 120, COLOR_BLACK, 1, 85, 115, 105, 135, COLOR_WHITE);
 80047a6:	4b4c      	ldr	r3, [pc, #304]	; (80048d8 <app_main+0x11c0>)
 80047a8:	791a      	ldrb	r2, [r3, #4]
 80047aa:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80047ae:	f107 0027 	add.w	r0, r7, #39	; 0x27
 80047b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047b6:	9307      	str	r3, [sp, #28]
 80047b8:	2387      	movs	r3, #135	; 0x87
 80047ba:	9306      	str	r3, [sp, #24]
 80047bc:	2369      	movs	r3, #105	; 0x69
 80047be:	9305      	str	r3, [sp, #20]
 80047c0:	2373      	movs	r3, #115	; 0x73
 80047c2:	9304      	str	r3, [sp, #16]
 80047c4:	2355      	movs	r3, #85	; 0x55
 80047c6:	9303      	str	r3, [sp, #12]
 80047c8:	2301      	movs	r3, #1
 80047ca:	9302      	str	r3, [sp, #8]
 80047cc:	2300      	movs	r3, #0
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	2378      	movs	r3, #120	; 0x78
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2355      	movs	r3, #85	; 0x55
 80047d6:	f7fe fb07 	bl	8002de8 <update_change>

						    update_change(&month_temp, month_present, datetime.month, 112, 120, COLOR_BLACK, 1, 110, 115, 130, 135, COLOR_WHITE);
 80047da:	4b3f      	ldr	r3, [pc, #252]	; (80048d8 <app_main+0x11c0>)
 80047dc:	795a      	ldrb	r2, [r3, #5]
 80047de:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80047e2:	f107 0026 	add.w	r0, r7, #38	; 0x26
 80047e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047ea:	9307      	str	r3, [sp, #28]
 80047ec:	2387      	movs	r3, #135	; 0x87
 80047ee:	9306      	str	r3, [sp, #24]
 80047f0:	2382      	movs	r3, #130	; 0x82
 80047f2:	9305      	str	r3, [sp, #20]
 80047f4:	2373      	movs	r3, #115	; 0x73
 80047f6:	9304      	str	r3, [sp, #16]
 80047f8:	236e      	movs	r3, #110	; 0x6e
 80047fa:	9303      	str	r3, [sp, #12]
 80047fc:	2301      	movs	r3, #1
 80047fe:	9302      	str	r3, [sp, #8]
 8004800:	2300      	movs	r3, #0
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	2378      	movs	r3, #120	; 0x78
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2370      	movs	r3, #112	; 0x70
 800480a:	f7fe faed 	bl	8002de8 <update_change>

						    update_change(&year_temp, year_present, datetime.year, 139, 120, COLOR_BLACK, 1, 135, 115, 160, 135, COLOR_WHITE);
 800480e:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <app_main+0x11c0>)
 8004810:	799a      	ldrb	r2, [r3, #6]
 8004812:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8004816:	f107 0025 	add.w	r0, r7, #37	; 0x25
 800481a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800481e:	9307      	str	r3, [sp, #28]
 8004820:	2387      	movs	r3, #135	; 0x87
 8004822:	9306      	str	r3, [sp, #24]
 8004824:	23a0      	movs	r3, #160	; 0xa0
 8004826:	9305      	str	r3, [sp, #20]
 8004828:	2373      	movs	r3, #115	; 0x73
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	2387      	movs	r3, #135	; 0x87
 800482e:	9303      	str	r3, [sp, #12]
 8004830:	2301      	movs	r3, #1
 8004832:	9302      	str	r3, [sp, #8]
 8004834:	2300      	movs	r3, #0
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	2378      	movs	r3, #120	; 0x78
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	238b      	movs	r3, #139	; 0x8b
 800483e:	f7fe fad3 	bl	8002de8 <update_change>

							re_write = 0;
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <app_main+0x11bc>)
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
						}
		                update_change_choose(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLUEVIOLET, 1, 85, 100, 105, 110, COLOR_WHITE);
 8004848:	4b23      	ldr	r3, [pc, #140]	; (80048d8 <app_main+0x11c0>)
 800484a:	789a      	ldrb	r2, [r3, #2]
 800484c:	7e39      	ldrb	r1, [r7, #24]
 800484e:	463b      	mov	r3, r7
 8004850:	f103 0019 	add.w	r0, r3, #25
 8004854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004858:	9307      	str	r3, [sp, #28]
 800485a:	236e      	movs	r3, #110	; 0x6e
 800485c:	9306      	str	r3, [sp, #24]
 800485e:	2369      	movs	r3, #105	; 0x69
 8004860:	9305      	str	r3, [sp, #20]
 8004862:	2364      	movs	r3, #100	; 0x64
 8004864:	9304      	str	r3, [sp, #16]
 8004866:	2355      	movs	r3, #85	; 0x55
 8004868:	9303      	str	r3, [sp, #12]
 800486a:	2301      	movs	r3, #1
 800486c:	9302      	str	r3, [sp, #8]
 800486e:	f648 135c 	movw	r3, #35164	; 0x895c
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	2364      	movs	r3, #100	; 0x64
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	2355      	movs	r3, #85	; 0x55
 800487a:	f7fe fafd 	bl	8002e78 <update_change_choose>
						if (flag == 1)
 800487e:	4b17      	ldr	r3, [pc, #92]	; (80048dc <app_main+0x11c4>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	f040 81f7 	bne.w	8004c78 <app_main+0x1560>
						{
							choose = 0;
 800488a:	4b11      	ldr	r3, [pc, #68]	; (80048d0 <app_main+0x11b8>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
							alarm_changed(&alarm.hour);
 8004890:	4813      	ldr	r0, [pc, #76]	; (80048e0 <app_main+0x11c8>)
 8004892:	f7fe fa7b 	bl	8002d8c <alarm_changed>
			                update_change_choose(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_RED, 1, 85, 100, 105, 110, COLOR_WHITE);
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <app_main+0x11c0>)
 8004898:	789a      	ldrb	r2, [r3, #2]
 800489a:	7e39      	ldrb	r1, [r7, #24]
 800489c:	463b      	mov	r3, r7
 800489e:	f103 0019 	add.w	r0, r3, #25
 80048a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048a6:	9307      	str	r3, [sp, #28]
 80048a8:	236e      	movs	r3, #110	; 0x6e
 80048aa:	9306      	str	r3, [sp, #24]
 80048ac:	2369      	movs	r3, #105	; 0x69
 80048ae:	9305      	str	r3, [sp, #20]
 80048b0:	2364      	movs	r3, #100	; 0x64
 80048b2:	9304      	str	r3, [sp, #16]
 80048b4:	2355      	movs	r3, #85	; 0x55
 80048b6:	9303      	str	r3, [sp, #12]
 80048b8:	2301      	movs	r3, #1
 80048ba:	9302      	str	r3, [sp, #8]
 80048bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	2364      	movs	r3, #100	; 0x64
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2355      	movs	r3, #85	; 0x55
 80048c8:	f7fe fad6 	bl	8002e78 <update_change_choose>
 80048cc:	e1d4      	b.n	8004c78 <app_main+0x1560>
 80048ce:	bf00      	nop
 80048d0:	20000356 	.word	0x20000356
 80048d4:	20000334 	.word	0x20000334
 80048d8:	200003a8 	.word	0x200003a8
 80048dc:	20000358 	.word	0x20000358
 80048e0:	200003b2 	.word	0x200003b2

						}
					}
					else if (choose == 1)
 80048e4:	4b76      	ldr	r3, [pc, #472]	; (8004ac0 <app_main+0x13a8>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	f040 80f2 	bne.w	8004ad4 <app_main+0x13bc>
					{
		                update_change_choose(&min_temp, min_present, datetime.min, 111, 100, COLOR_BLUEVIOLET, 1, 110, 100, 130, 110, COLOR_WHITE);
 80048f0:	4b74      	ldr	r3, [pc, #464]	; (8004ac4 <app_main+0x13ac>)
 80048f2:	785a      	ldrb	r2, [r3, #1]
 80048f4:	7eb9      	ldrb	r1, [r7, #26]
 80048f6:	463b      	mov	r3, r7
 80048f8:	f103 001b 	add.w	r0, r3, #27
 80048fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004900:	9307      	str	r3, [sp, #28]
 8004902:	236e      	movs	r3, #110	; 0x6e
 8004904:	9306      	str	r3, [sp, #24]
 8004906:	2382      	movs	r3, #130	; 0x82
 8004908:	9305      	str	r3, [sp, #20]
 800490a:	2364      	movs	r3, #100	; 0x64
 800490c:	9304      	str	r3, [sp, #16]
 800490e:	236e      	movs	r3, #110	; 0x6e
 8004910:	9303      	str	r3, [sp, #12]
 8004912:	2301      	movs	r3, #1
 8004914:	9302      	str	r3, [sp, #8]
 8004916:	f648 135c 	movw	r3, #35164	; 0x895c
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	2364      	movs	r3, #100	; 0x64
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	236f      	movs	r3, #111	; 0x6f
 8004922:	f7fe faa9 	bl	8002e78 <update_change_choose>
						if (flag == 1)
 8004926:	4b68      	ldr	r3, [pc, #416]	; (8004ac8 <app_main+0x13b0>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	f040 81a3 	bne.w	8004c78 <app_main+0x1560>
						{
							if(re_write == 1)
 8004932:	4b66      	ldr	r3, [pc, #408]	; (8004acc <app_main+0x13b4>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	f040 809f 	bne.w	8004a7a <app_main+0x1362>
							{
							    update_change(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLACK , 1, 140, 100, 160, 110, COLOR_WHITE);
 800493c:	4b61      	ldr	r3, [pc, #388]	; (8004ac4 <app_main+0x13ac>)
 800493e:	781a      	ldrb	r2, [r3, #0]
 8004940:	7f39      	ldrb	r1, [r7, #28]
 8004942:	463b      	mov	r3, r7
 8004944:	f103 001d 	add.w	r0, r3, #29
 8004948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800494c:	9307      	str	r3, [sp, #28]
 800494e:	236e      	movs	r3, #110	; 0x6e
 8004950:	9306      	str	r3, [sp, #24]
 8004952:	23a0      	movs	r3, #160	; 0xa0
 8004954:	9305      	str	r3, [sp, #20]
 8004956:	2364      	movs	r3, #100	; 0x64
 8004958:	9304      	str	r3, [sp, #16]
 800495a:	238c      	movs	r3, #140	; 0x8c
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	2301      	movs	r3, #1
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	2300      	movs	r3, #0
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	2364      	movs	r3, #100	; 0x64
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	238c      	movs	r3, #140	; 0x8c
 800496c:	f7fe fa3c 	bl	8002de8 <update_change>

							    update_change(&min_temp, min_present, datetime.min, 110, 100, COLOR_BLACK, 1, 110, 100, 130, 110, COLOR_WHITE);
 8004970:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <app_main+0x13ac>)
 8004972:	785a      	ldrb	r2, [r3, #1]
 8004974:	7eb9      	ldrb	r1, [r7, #26]
 8004976:	463b      	mov	r3, r7
 8004978:	f103 001b 	add.w	r0, r3, #27
 800497c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004980:	9307      	str	r3, [sp, #28]
 8004982:	236e      	movs	r3, #110	; 0x6e
 8004984:	9306      	str	r3, [sp, #24]
 8004986:	2382      	movs	r3, #130	; 0x82
 8004988:	9305      	str	r3, [sp, #20]
 800498a:	2364      	movs	r3, #100	; 0x64
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	236e      	movs	r3, #110	; 0x6e
 8004990:	9303      	str	r3, [sp, #12]
 8004992:	2301      	movs	r3, #1
 8004994:	9302      	str	r3, [sp, #8]
 8004996:	2300      	movs	r3, #0
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	2364      	movs	r3, #100	; 0x64
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	236e      	movs	r3, #110	; 0x6e
 80049a0:	f7fe fa22 	bl	8002de8 <update_change>

							    update_change(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLACK, 1, 85, 100, 105, 110, COLOR_WHITE);
 80049a4:	4b47      	ldr	r3, [pc, #284]	; (8004ac4 <app_main+0x13ac>)
 80049a6:	789a      	ldrb	r2, [r3, #2]
 80049a8:	7e39      	ldrb	r1, [r7, #24]
 80049aa:	463b      	mov	r3, r7
 80049ac:	f103 0019 	add.w	r0, r3, #25
 80049b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049b4:	9307      	str	r3, [sp, #28]
 80049b6:	236e      	movs	r3, #110	; 0x6e
 80049b8:	9306      	str	r3, [sp, #24]
 80049ba:	2369      	movs	r3, #105	; 0x69
 80049bc:	9305      	str	r3, [sp, #20]
 80049be:	2364      	movs	r3, #100	; 0x64
 80049c0:	9304      	str	r3, [sp, #16]
 80049c2:	2355      	movs	r3, #85	; 0x55
 80049c4:	9303      	str	r3, [sp, #12]
 80049c6:	2301      	movs	r3, #1
 80049c8:	9302      	str	r3, [sp, #8]
 80049ca:	2300      	movs	r3, #0
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	2364      	movs	r3, #100	; 0x64
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	2355      	movs	r3, #85	; 0x55
 80049d4:	f7fe fa08 	bl	8002de8 <update_change>

							    update_change(&date_temp, date_present, datetime.date, 85, 120, COLOR_BLACK, 1, 85, 115, 105, 135, COLOR_WHITE);
 80049d8:	4b3a      	ldr	r3, [pc, #232]	; (8004ac4 <app_main+0x13ac>)
 80049da:	791a      	ldrb	r2, [r3, #4]
 80049dc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80049e0:	f107 0027 	add.w	r0, r7, #39	; 0x27
 80049e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049e8:	9307      	str	r3, [sp, #28]
 80049ea:	2387      	movs	r3, #135	; 0x87
 80049ec:	9306      	str	r3, [sp, #24]
 80049ee:	2369      	movs	r3, #105	; 0x69
 80049f0:	9305      	str	r3, [sp, #20]
 80049f2:	2373      	movs	r3, #115	; 0x73
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	2355      	movs	r3, #85	; 0x55
 80049f8:	9303      	str	r3, [sp, #12]
 80049fa:	2301      	movs	r3, #1
 80049fc:	9302      	str	r3, [sp, #8]
 80049fe:	2300      	movs	r3, #0
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	2378      	movs	r3, #120	; 0x78
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2355      	movs	r3, #85	; 0x55
 8004a08:	f7fe f9ee 	bl	8002de8 <update_change>

							    update_change(&month_temp, month_present, datetime.month, 112, 120, COLOR_BLACK, 1, 110, 115, 130, 135, COLOR_WHITE);
 8004a0c:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <app_main+0x13ac>)
 8004a0e:	795a      	ldrb	r2, [r3, #5]
 8004a10:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8004a14:	f107 0026 	add.w	r0, r7, #38	; 0x26
 8004a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a1c:	9307      	str	r3, [sp, #28]
 8004a1e:	2387      	movs	r3, #135	; 0x87
 8004a20:	9306      	str	r3, [sp, #24]
 8004a22:	2382      	movs	r3, #130	; 0x82
 8004a24:	9305      	str	r3, [sp, #20]
 8004a26:	2373      	movs	r3, #115	; 0x73
 8004a28:	9304      	str	r3, [sp, #16]
 8004a2a:	236e      	movs	r3, #110	; 0x6e
 8004a2c:	9303      	str	r3, [sp, #12]
 8004a2e:	2301      	movs	r3, #1
 8004a30:	9302      	str	r3, [sp, #8]
 8004a32:	2300      	movs	r3, #0
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	2378      	movs	r3, #120	; 0x78
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2370      	movs	r3, #112	; 0x70
 8004a3c:	f7fe f9d4 	bl	8002de8 <update_change>

							    update_change(&year_temp, year_present, datetime.year, 139, 120, COLOR_BLACK, 1, 135, 115, 160, 135, COLOR_WHITE);
 8004a40:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <app_main+0x13ac>)
 8004a42:	799a      	ldrb	r2, [r3, #6]
 8004a44:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8004a48:	f107 0025 	add.w	r0, r7, #37	; 0x25
 8004a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a50:	9307      	str	r3, [sp, #28]
 8004a52:	2387      	movs	r3, #135	; 0x87
 8004a54:	9306      	str	r3, [sp, #24]
 8004a56:	23a0      	movs	r3, #160	; 0xa0
 8004a58:	9305      	str	r3, [sp, #20]
 8004a5a:	2373      	movs	r3, #115	; 0x73
 8004a5c:	9304      	str	r3, [sp, #16]
 8004a5e:	2387      	movs	r3, #135	; 0x87
 8004a60:	9303      	str	r3, [sp, #12]
 8004a62:	2301      	movs	r3, #1
 8004a64:	9302      	str	r3, [sp, #8]
 8004a66:	2300      	movs	r3, #0
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	2378      	movs	r3, #120	; 0x78
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	238b      	movs	r3, #139	; 0x8b
 8004a70:	f7fe f9ba 	bl	8002de8 <update_change>

								re_write = 0;
 8004a74:	4b15      	ldr	r3, [pc, #84]	; (8004acc <app_main+0x13b4>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
							}
							choose = 1;
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <app_main+0x13a8>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
							alarm_changed(&alarm.min);
 8004a80:	4813      	ldr	r0, [pc, #76]	; (8004ad0 <app_main+0x13b8>)
 8004a82:	f7fe f983 	bl	8002d8c <alarm_changed>
			                update_change_choose(&min_temp, min_present, datetime.min, 111, 100, COLOR_RED, 1, 110, 100, 130, 110, COLOR_WHITE);
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <app_main+0x13ac>)
 8004a88:	785a      	ldrb	r2, [r3, #1]
 8004a8a:	7eb9      	ldrb	r1, [r7, #26]
 8004a8c:	463b      	mov	r3, r7
 8004a8e:	f103 001b 	add.w	r0, r3, #27
 8004a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a96:	9307      	str	r3, [sp, #28]
 8004a98:	236e      	movs	r3, #110	; 0x6e
 8004a9a:	9306      	str	r3, [sp, #24]
 8004a9c:	2382      	movs	r3, #130	; 0x82
 8004a9e:	9305      	str	r3, [sp, #20]
 8004aa0:	2364      	movs	r3, #100	; 0x64
 8004aa2:	9304      	str	r3, [sp, #16]
 8004aa4:	236e      	movs	r3, #110	; 0x6e
 8004aa6:	9303      	str	r3, [sp, #12]
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	9302      	str	r3, [sp, #8]
 8004aac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	2364      	movs	r3, #100	; 0x64
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	236f      	movs	r3, #111	; 0x6f
 8004ab8:	f7fe f9de 	bl	8002e78 <update_change_choose>
 8004abc:	e0dc      	b.n	8004c78 <app_main+0x1560>
 8004abe:	bf00      	nop
 8004ac0:	20000356 	.word	0x20000356
 8004ac4:	200003a8 	.word	0x200003a8
 8004ac8:	20000358 	.word	0x20000358
 8004acc:	20000334 	.word	0x20000334
 8004ad0:	200003b1 	.word	0x200003b1
						}
					}
					else if (choose == 2)
 8004ad4:	4b91      	ldr	r3, [pc, #580]	; (8004d1c <app_main+0x1604>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	f040 80cc 	bne.w	8004c78 <app_main+0x1560>
					{
		                update_change_choose(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLUEVIOLET , 1, 140, 100, 160, 110, COLOR_WHITE);
 8004ae0:	4b8f      	ldr	r3, [pc, #572]	; (8004d20 <app_main+0x1608>)
 8004ae2:	781a      	ldrb	r2, [r3, #0]
 8004ae4:	7f39      	ldrb	r1, [r7, #28]
 8004ae6:	463b      	mov	r3, r7
 8004ae8:	f103 001d 	add.w	r0, r3, #29
 8004aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004af0:	9307      	str	r3, [sp, #28]
 8004af2:	236e      	movs	r3, #110	; 0x6e
 8004af4:	9306      	str	r3, [sp, #24]
 8004af6:	23a0      	movs	r3, #160	; 0xa0
 8004af8:	9305      	str	r3, [sp, #20]
 8004afa:	2364      	movs	r3, #100	; 0x64
 8004afc:	9304      	str	r3, [sp, #16]
 8004afe:	238c      	movs	r3, #140	; 0x8c
 8004b00:	9303      	str	r3, [sp, #12]
 8004b02:	2301      	movs	r3, #1
 8004b04:	9302      	str	r3, [sp, #8]
 8004b06:	f648 135c 	movw	r3, #35164	; 0x895c
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	2364      	movs	r3, #100	; 0x64
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	238c      	movs	r3, #140	; 0x8c
 8004b12:	f7fe f9b1 	bl	8002e78 <update_change_choose>
						if (flag == 1)
 8004b16:	4b83      	ldr	r3, [pc, #524]	; (8004d24 <app_main+0x160c>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	f040 80ab 	bne.w	8004c78 <app_main+0x1560>
						{
							if(re_write == 1)
 8004b22:	4b81      	ldr	r3, [pc, #516]	; (8004d28 <app_main+0x1610>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	f040 8085 	bne.w	8004c36 <app_main+0x151e>
							{
							    update_change(&second_temp, second_present, datetime.second, 140, 100, COLOR_BLACK , 1, 140, 100, 160, 110, COLOR_WHITE);
 8004b2c:	4b7c      	ldr	r3, [pc, #496]	; (8004d20 <app_main+0x1608>)
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	7f39      	ldrb	r1, [r7, #28]
 8004b32:	463b      	mov	r3, r7
 8004b34:	f103 001d 	add.w	r0, r3, #29
 8004b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b3c:	9307      	str	r3, [sp, #28]
 8004b3e:	236e      	movs	r3, #110	; 0x6e
 8004b40:	9306      	str	r3, [sp, #24]
 8004b42:	23a0      	movs	r3, #160	; 0xa0
 8004b44:	9305      	str	r3, [sp, #20]
 8004b46:	2364      	movs	r3, #100	; 0x64
 8004b48:	9304      	str	r3, [sp, #16]
 8004b4a:	238c      	movs	r3, #140	; 0x8c
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	2301      	movs	r3, #1
 8004b50:	9302      	str	r3, [sp, #8]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	2364      	movs	r3, #100	; 0x64
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	238c      	movs	r3, #140	; 0x8c
 8004b5c:	f7fe f944 	bl	8002de8 <update_change>

							    update_change(&min_temp, min_present, datetime.min, 110, 100, COLOR_BLACK, 1, 110, 100, 130, 110, COLOR_WHITE);
 8004b60:	4b6f      	ldr	r3, [pc, #444]	; (8004d20 <app_main+0x1608>)
 8004b62:	785a      	ldrb	r2, [r3, #1]
 8004b64:	7eb9      	ldrb	r1, [r7, #26]
 8004b66:	463b      	mov	r3, r7
 8004b68:	f103 001b 	add.w	r0, r3, #27
 8004b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b70:	9307      	str	r3, [sp, #28]
 8004b72:	236e      	movs	r3, #110	; 0x6e
 8004b74:	9306      	str	r3, [sp, #24]
 8004b76:	2382      	movs	r3, #130	; 0x82
 8004b78:	9305      	str	r3, [sp, #20]
 8004b7a:	2364      	movs	r3, #100	; 0x64
 8004b7c:	9304      	str	r3, [sp, #16]
 8004b7e:	236e      	movs	r3, #110	; 0x6e
 8004b80:	9303      	str	r3, [sp, #12]
 8004b82:	2301      	movs	r3, #1
 8004b84:	9302      	str	r3, [sp, #8]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	2364      	movs	r3, #100	; 0x64
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	236e      	movs	r3, #110	; 0x6e
 8004b90:	f7fe f92a 	bl	8002de8 <update_change>

							    update_change(&hour_temp, hour_present, datetime.hour, 85, 100, COLOR_BLACK, 1, 85, 100, 105, 110, COLOR_WHITE);
 8004b94:	4b62      	ldr	r3, [pc, #392]	; (8004d20 <app_main+0x1608>)
 8004b96:	789a      	ldrb	r2, [r3, #2]
 8004b98:	7e39      	ldrb	r1, [r7, #24]
 8004b9a:	463b      	mov	r3, r7
 8004b9c:	f103 0019 	add.w	r0, r3, #25
 8004ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ba4:	9307      	str	r3, [sp, #28]
 8004ba6:	236e      	movs	r3, #110	; 0x6e
 8004ba8:	9306      	str	r3, [sp, #24]
 8004baa:	2369      	movs	r3, #105	; 0x69
 8004bac:	9305      	str	r3, [sp, #20]
 8004bae:	2364      	movs	r3, #100	; 0x64
 8004bb0:	9304      	str	r3, [sp, #16]
 8004bb2:	2355      	movs	r3, #85	; 0x55
 8004bb4:	9303      	str	r3, [sp, #12]
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	9302      	str	r3, [sp, #8]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	2364      	movs	r3, #100	; 0x64
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	2355      	movs	r3, #85	; 0x55
 8004bc4:	f7fe f910 	bl	8002de8 <update_change>

							    update_change(&date_temp, date_present, datetime.date, 85, 120, COLOR_BLACK, 1, 85, 115, 105, 135, COLOR_WHITE);
 8004bc8:	4b55      	ldr	r3, [pc, #340]	; (8004d20 <app_main+0x1608>)
 8004bca:	791a      	ldrb	r2, [r3, #4]
 8004bcc:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8004bd0:	f107 0027 	add.w	r0, r7, #39	; 0x27
 8004bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bd8:	9307      	str	r3, [sp, #28]
 8004bda:	2387      	movs	r3, #135	; 0x87
 8004bdc:	9306      	str	r3, [sp, #24]
 8004bde:	2369      	movs	r3, #105	; 0x69
 8004be0:	9305      	str	r3, [sp, #20]
 8004be2:	2373      	movs	r3, #115	; 0x73
 8004be4:	9304      	str	r3, [sp, #16]
 8004be6:	2355      	movs	r3, #85	; 0x55
 8004be8:	9303      	str	r3, [sp, #12]
 8004bea:	2301      	movs	r3, #1
 8004bec:	9302      	str	r3, [sp, #8]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	2378      	movs	r3, #120	; 0x78
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	2355      	movs	r3, #85	; 0x55
 8004bf8:	f7fe f8f6 	bl	8002de8 <update_change>

							    update_change(&month_temp, month_present, datetime.month, 112, 120, COLOR_BLACK, 1, 110, 115, 130, 135, COLOR_WHITE);
 8004bfc:	4b48      	ldr	r3, [pc, #288]	; (8004d20 <app_main+0x1608>)
 8004bfe:	795a      	ldrb	r2, [r3, #5]
 8004c00:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8004c04:	f107 0026 	add.w	r0, r7, #38	; 0x26
 8004c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c0c:	9307      	str	r3, [sp, #28]
 8004c0e:	2387      	movs	r3, #135	; 0x87
 8004c10:	9306      	str	r3, [sp, #24]
 8004c12:	2382      	movs	r3, #130	; 0x82
 8004c14:	9305      	str	r3, [sp, #20]
 8004c16:	2373      	movs	r3, #115	; 0x73
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	236e      	movs	r3, #110	; 0x6e
 8004c1c:	9303      	str	r3, [sp, #12]
 8004c1e:	2301      	movs	r3, #1
 8004c20:	9302      	str	r3, [sp, #8]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	2378      	movs	r3, #120	; 0x78
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2370      	movs	r3, #112	; 0x70
 8004c2c:	f7fe f8dc 	bl	8002de8 <update_change>
//
//							    update_change(&year_temp, year_present, datetime.year, 139, 120, COLOR_BLACK, 1, 135, 115, 160, 135, COLOR_WHITE);

								re_write = 0;
 8004c30:	4b3d      	ldr	r3, [pc, #244]	; (8004d28 <app_main+0x1610>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
							}
							choose = 2;
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <app_main+0x1604>)
 8004c38:	2202      	movs	r2, #2
 8004c3a:	701a      	strb	r2, [r3, #0]
							alarm_changed(&alarm.second);
 8004c3c:	483b      	ldr	r0, [pc, #236]	; (8004d2c <app_main+0x1614>)
 8004c3e:	f7fe f8a5 	bl	8002d8c <alarm_changed>
			                update_change_choose(&second_temp, second_present, datetime.second, 140, 100, COLOR_RED , 1, 140, 100, 160, 110, COLOR_WHITE);
 8004c42:	4b37      	ldr	r3, [pc, #220]	; (8004d20 <app_main+0x1608>)
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	7f39      	ldrb	r1, [r7, #28]
 8004c48:	463b      	mov	r3, r7
 8004c4a:	f103 001d 	add.w	r0, r3, #29
 8004c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c52:	9307      	str	r3, [sp, #28]
 8004c54:	236e      	movs	r3, #110	; 0x6e
 8004c56:	9306      	str	r3, [sp, #24]
 8004c58:	23a0      	movs	r3, #160	; 0xa0
 8004c5a:	9305      	str	r3, [sp, #20]
 8004c5c:	2364      	movs	r3, #100	; 0x64
 8004c5e:	9304      	str	r3, [sp, #16]
 8004c60:	238c      	movs	r3, #140	; 0x8c
 8004c62:	9303      	str	r3, [sp, #12]
 8004c64:	2301      	movs	r3, #1
 8004c66:	9302      	str	r3, [sp, #8]
 8004c68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	2364      	movs	r3, #100	; 0x64
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	238c      	movs	r3, #140	; 0x8c
 8004c74:	f7fe f900 	bl	8002e78 <update_change_choose>
						}
					}
					alarm_buff[0] = alarm.hour;
 8004c78:	4b2c      	ldr	r3, [pc, #176]	; (8004d2c <app_main+0x1614>)
 8004c7a:	789a      	ldrb	r2, [r3, #2]
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <app_main+0x1618>)
 8004c7e:	701a      	strb	r2, [r3, #0]
					alarm_buff[1] = alarm.min;
 8004c80:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <app_main+0x1614>)
 8004c82:	785a      	ldrb	r2, [r3, #1]
 8004c84:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <app_main+0x1618>)
 8004c86:	705a      	strb	r2, [r3, #1]
					/// luu vao FLASH
					flash_unlock();
 8004c88:	f7fc f90a 	bl	8000ea0 <flash_unlock>
					flash_eraser(0x801FC00);
 8004c8c:	4829      	ldr	r0, [pc, #164]	; (8004d34 <app_main+0x161c>)
 8004c8e:	f7fc f913 	bl	8000eb8 <flash_eraser>
					flash_write_arr(0x801FC00, alarm_buff, sizeof(alarm_buff));
 8004c92:	2203      	movs	r2, #3
 8004c94:	4926      	ldr	r1, [pc, #152]	; (8004d30 <app_main+0x1618>)
 8004c96:	4827      	ldr	r0, [pc, #156]	; (8004d34 <app_main+0x161c>)
 8004c98:	f7fc f924 	bl	8000ee4 <flash_write_arr>
					flash_lock();
 8004c9c:	f7fc f906 	bl	8000eac <flash_lock>
//	        	}
	            break;
 8004ca0:	e03a      	b.n	8004d18 <app_main+0x1600>
	            //		  case 4: //cai dat ngay bao thuc
	            //	            				  break;
	        case 5: // introduce yourself
	        	if(rub_screen == 1)
 8004ca2:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <app_main+0x1620>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d10b      	bne.n	8004cc2 <app_main+0x15aa>
	        	{
	        		fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
 8004caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	23b0      	movs	r3, #176	; 0xb0
 8004cb2:	22dc      	movs	r2, #220	; 0xdc
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f7fc fb68 	bl	800138c <fill_rectangle>
	        		rub_screen = 0;
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <app_main+0x1620>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
	        	}
	            draw_string(5, 20, COLOR_BLACK, 1, "BT1 de chon mode");
 8004cc2:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <app_main+0x1624>)
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2114      	movs	r1, #20
 8004ccc:	2005      	movs	r0, #5
 8004cce:	f7fc fdbf 	bl	8001850 <draw_string>
	            draw_fast_string(5	, 40, COLOR_BLACK, COLOR_WHITE, "BT2 de chon cai can chinh ");
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <app_main+0x1628>)
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2128      	movs	r1, #40	; 0x28
 8004cde:	2005      	movs	r0, #5
 8004ce0:	f7fc fdea 	bl	80018b8 <draw_fast_string>
	            draw_fast_string(5	, 60, COLOR_BLACK, COLOR_WHITE, "BT3 Cho phep chinh cai da chon");
 8004ce4:	4b17      	ldr	r3, [pc, #92]	; (8004d44 <app_main+0x162c>)
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cec:	2200      	movs	r2, #0
 8004cee:	213c      	movs	r1, #60	; 0x3c
 8004cf0:	2005      	movs	r0, #5
 8004cf2:	f7fc fde1 	bl	80018b8 <draw_fast_string>
	            draw_fast_string(5	, 80, COLOR_BLACK, COLOR_WHITE, "BT4 Huong dan su dung");
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <app_main+0x1630>)
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2150      	movs	r1, #80	; 0x50
 8004d02:	2005      	movs	r0, #5
 8004d04:	f7fc fdd8 	bl	80018b8 <draw_fast_string>
	            break;
 8004d08:	e006      	b.n	8004d18 <app_main+0x1600>
	        default:
	            break;
 8004d0a:	bf00      	nop
 8004d0c:	f7fe bda7 	b.w	800385e <app_main+0x146>
	            break;
 8004d10:	bf00      	nop
 8004d12:	f7fe bda4 	b.w	800385e <app_main+0x146>
	            break;
 8004d16:	bf00      	nop
			button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8004d18:	f7fe bda1 	b.w	800385e <app_main+0x146>
 8004d1c:	20000356 	.word	0x20000356
 8004d20:	200003a8 	.word	0x200003a8
 8004d24:	20000358 	.word	0x20000358
 8004d28:	20000334 	.word	0x20000334
 8004d2c:	200003b0 	.word	0x200003b0
 8004d30:	20000338 	.word	0x20000338
 8004d34:	0801fc00 	.word	0x0801fc00
 8004d38:	20000332 	.word	0x20000332
 8004d3c:	0800c7c8 	.word	0x0800c7c8
 8004d40:	0800c7dc 	.word	0x0800c7dc
 8004d44:	0800c7f8 	.word	0x0800c7f8
 8004d48:	0800c818 	.word	0x0800c818

08004d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d50:	f000 fd24 	bl	800579c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d54:	f000 f80f 	bl	8004d76 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d58:	f000 f9aa 	bl	80050b0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8004d5c:	f000 f850 	bl	8004e00 <MX_I2C2_Init>
  MX_SPI1_Init();
 8004d60:	f000 f87c 	bl	8004e5c <MX_SPI1_Init>
  MX_TIM3_Init();
 8004d64:	f000 f8fc 	bl	8004f60 <MX_TIM3_Init>
  MX_TIM2_Init();
 8004d68:	f000 f8ae 	bl	8004ec8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8004d6c:	f000 f94c 	bl	8005008 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8004d70:	f7fe fcd2 	bl	8003718 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8004d74:	e7fe      	b.n	8004d74 <main+0x28>

08004d76 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b090      	sub	sp, #64	; 0x40
 8004d7a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d7c:	f107 0318 	add.w	r3, r7, #24
 8004d80:	2228      	movs	r2, #40	; 0x28
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f004 fbf4 	bl	8009572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	605a      	str	r2, [r3, #4]
 8004d92:	609a      	str	r2, [r3, #8]
 8004d94:	60da      	str	r2, [r3, #12]
 8004d96:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004da0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004da2:	2300      	movs	r3, #0
 8004da4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004da6:	2301      	movs	r3, #1
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004daa:	2302      	movs	r3, #2
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004db2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004db4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004dba:	f107 0318 	add.w	r3, r7, #24
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f002 fa80 	bl	80072c4 <HAL_RCC_OscConfig>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004dca:	f000 fa43 	bl	8005254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dce:	230f      	movs	r3, #15
 8004dd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004de4:	1d3b      	adds	r3, r7, #4
 8004de6:	2102      	movs	r1, #2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f002 fced 	bl	80077c8 <HAL_RCC_ClockConfig>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004df4:	f000 fa2e 	bl	8005254 <Error_Handler>
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3740      	adds	r7, #64	; 0x40
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004e04:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <MX_I2C2_Init+0x50>)
 8004e06:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <MX_I2C2_Init+0x54>)
 8004e08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004e0a:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <MX_I2C2_Init+0x50>)
 8004e0c:	4a12      	ldr	r2, [pc, #72]	; (8004e58 <MX_I2C2_Init+0x58>)
 8004e0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <MX_I2C2_Init+0x50>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <MX_I2C2_Init+0x50>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <MX_I2C2_Init+0x50>)
 8004e1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <MX_I2C2_Init+0x50>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <MX_I2C2_Init+0x50>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <MX_I2C2_Init+0x50>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <MX_I2C2_Init+0x50>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004e3c:	4804      	ldr	r0, [pc, #16]	; (8004e50 <MX_I2C2_Init+0x50>)
 8004e3e:	f001 fa0d 	bl	800625c <HAL_I2C_Init>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004e48:	f000 fa04 	bl	8005254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004e4c:	bf00      	nop
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200003bc 	.word	0x200003bc
 8004e54:	40005800 	.word	0x40005800
 8004e58:	000186a0 	.word	0x000186a0

08004e5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004e60:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004e62:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <MX_SPI1_Init+0x68>)
 8004e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e66:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e6e:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e74:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e7a:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e80:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e86:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004e90:	2228      	movs	r2, #40	; 0x28
 8004e92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e94:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004ea8:	220a      	movs	r2, #10
 8004eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004eac:	4804      	ldr	r0, [pc, #16]	; (8004ec0 <MX_SPI1_Init+0x64>)
 8004eae:	f002 fe05 	bl	8007abc <HAL_SPI_Init>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004eb8:	f000 f9cc 	bl	8005254 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004ebc:	bf00      	nop
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000410 	.word	0x20000410
 8004ec4:	40013000 	.word	0x40013000

08004ec8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ece:	f107 0308 	add.w	r3, r7, #8
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
 8004eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004edc:	463b      	mov	r3, r7
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <MX_TIM2_Init+0x94>)
 8004ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004eea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <MX_TIM2_Init+0x94>)
 8004eee:	2247      	movs	r2, #71	; 0x47
 8004ef0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ef2:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <MX_TIM2_Init+0x94>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004ef8:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <MX_TIM2_Init+0x94>)
 8004efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004efe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f00:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <MX_TIM2_Init+0x94>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <MX_TIM2_Init+0x94>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004f0c:	4813      	ldr	r0, [pc, #76]	; (8004f5c <MX_TIM2_Init+0x94>)
 8004f0e:	f003 f843 	bl	8007f98 <HAL_TIM_Base_Init>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004f18:	f000 f99c 	bl	8005254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f22:	f107 0308 	add.w	r3, r7, #8
 8004f26:	4619      	mov	r1, r3
 8004f28:	480c      	ldr	r0, [pc, #48]	; (8004f5c <MX_TIM2_Init+0x94>)
 8004f2a:	f003 fb27 	bl	800857c <HAL_TIM_ConfigClockSource>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004f34:	f000 f98e 	bl	8005254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f40:	463b      	mov	r3, r7
 8004f42:	4619      	mov	r1, r3
 8004f44:	4805      	ldr	r0, [pc, #20]	; (8004f5c <MX_TIM2_Init+0x94>)
 8004f46:	f003 fd21 	bl	800898c <HAL_TIMEx_MasterConfigSynchronization>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004f50:	f000 f980 	bl	8005254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004f54:	bf00      	nop
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000468 	.word	0x20000468

08004f60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08c      	sub	sp, #48	; 0x30
 8004f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f66:	f107 030c 	add.w	r3, r7, #12
 8004f6a:	2224      	movs	r2, #36	; 0x24
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f004 faff 	bl	8009572 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f7c:	4b20      	ldr	r3, [pc, #128]	; (8005000 <MX_TIM3_Init+0xa0>)
 8004f7e:	4a21      	ldr	r2, [pc, #132]	; (8005004 <MX_TIM3_Init+0xa4>)
 8004f80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004f82:	4b1f      	ldr	r3, [pc, #124]	; (8005000 <MX_TIM3_Init+0xa0>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f88:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <MX_TIM3_Init+0xa0>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004f8e:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <MX_TIM3_Init+0xa0>)
 8004f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f96:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <MX_TIM3_Init+0xa0>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f9c:	4b18      	ldr	r3, [pc, #96]	; (8005000 <MX_TIM3_Init+0xa0>)
 8004f9e:	2280      	movs	r2, #128	; 0x80
 8004fa0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004faa:	2301      	movs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8004fb2:	230a      	movs	r3, #10
 8004fb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8004fc2:	230a      	movs	r3, #10
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004fc6:	f107 030c 	add.w	r3, r7, #12
 8004fca:	4619      	mov	r1, r3
 8004fcc:	480c      	ldr	r0, [pc, #48]	; (8005000 <MX_TIM3_Init+0xa0>)
 8004fce:	f003 f87d 	bl	80080cc <HAL_TIM_Encoder_Init>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004fd8:	f000 f93c 	bl	8005254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004fe4:	1d3b      	adds	r3, r7, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4805      	ldr	r0, [pc, #20]	; (8005000 <MX_TIM3_Init+0xa0>)
 8004fea:	f003 fccf 	bl	800898c <HAL_TIMEx_MasterConfigSynchronization>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004ff4:	f000 f92e 	bl	8005254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ff8:	bf00      	nop
 8004ffa:	3730      	adds	r7, #48	; 0x30
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	200004b0 	.word	0x200004b0
 8005004:	40000400 	.word	0x40000400

08005008 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800500e:	f107 030c 	add.w	r3, r7, #12
 8005012:	2224      	movs	r2, #36	; 0x24
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f004 faab 	bl	8009572 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800501c:	1d3b      	adds	r3, r7, #4
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005024:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <MX_TIM4_Init+0xa0>)
 8005026:	4a21      	ldr	r2, [pc, #132]	; (80050ac <MX_TIM4_Init+0xa4>)
 8005028:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800502a:	4b1f      	ldr	r3, [pc, #124]	; (80050a8 <MX_TIM4_Init+0xa0>)
 800502c:	2200      	movs	r2, #0
 800502e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005030:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <MX_TIM4_Init+0xa0>)
 8005032:	2200      	movs	r2, #0
 8005034:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005036:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <MX_TIM4_Init+0xa0>)
 8005038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800503c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800503e:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <MX_TIM4_Init+0xa0>)
 8005040:	2200      	movs	r2, #0
 8005042:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005044:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <MX_TIM4_Init+0xa0>)
 8005046:	2280      	movs	r2, #128	; 0x80
 8005048:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800504a:	2303      	movs	r3, #3
 800504c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800504e:	2300      	movs	r3, #0
 8005050:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005052:	2301      	movs	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005056:	2300      	movs	r3, #0
 8005058:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800505a:	230a      	movs	r3, #10
 800505c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800505e:	2300      	movs	r3, #0
 8005060:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005062:	2301      	movs	r3, #1
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005066:	2300      	movs	r3, #0
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800506a:	230a      	movs	r3, #10
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800506e:	f107 030c 	add.w	r3, r7, #12
 8005072:	4619      	mov	r1, r3
 8005074:	480c      	ldr	r0, [pc, #48]	; (80050a8 <MX_TIM4_Init+0xa0>)
 8005076:	f003 f829 	bl	80080cc <HAL_TIM_Encoder_Init>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8005080:	f000 f8e8 	bl	8005254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005084:	2300      	movs	r3, #0
 8005086:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005088:	2300      	movs	r3, #0
 800508a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800508c:	1d3b      	adds	r3, r7, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4805      	ldr	r0, [pc, #20]	; (80050a8 <MX_TIM4_Init+0xa0>)
 8005092:	f003 fc7b 	bl	800898c <HAL_TIMEx_MasterConfigSynchronization>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800509c:	f000 f8da 	bl	8005254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80050a0:	bf00      	nop
 80050a2:	3730      	adds	r7, #48	; 0x30
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	200004f8 	.word	0x200004f8
 80050ac:	40000800 	.word	0x40000800

080050b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b6:	f107 0310 	add.w	r3, r7, #16
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	609a      	str	r2, [r3, #8]
 80050c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050c4:	4b5d      	ldr	r3, [pc, #372]	; (800523c <MX_GPIO_Init+0x18c>)
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	4a5c      	ldr	r2, [pc, #368]	; (800523c <MX_GPIO_Init+0x18c>)
 80050ca:	f043 0310 	orr.w	r3, r3, #16
 80050ce:	6193      	str	r3, [r2, #24]
 80050d0:	4b5a      	ldr	r3, [pc, #360]	; (800523c <MX_GPIO_Init+0x18c>)
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050dc:	4b57      	ldr	r3, [pc, #348]	; (800523c <MX_GPIO_Init+0x18c>)
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	4a56      	ldr	r2, [pc, #344]	; (800523c <MX_GPIO_Init+0x18c>)
 80050e2:	f043 0320 	orr.w	r3, r3, #32
 80050e6:	6193      	str	r3, [r2, #24]
 80050e8:	4b54      	ldr	r3, [pc, #336]	; (800523c <MX_GPIO_Init+0x18c>)
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050f4:	4b51      	ldr	r3, [pc, #324]	; (800523c <MX_GPIO_Init+0x18c>)
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	4a50      	ldr	r2, [pc, #320]	; (800523c <MX_GPIO_Init+0x18c>)
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	6193      	str	r3, [r2, #24]
 8005100:	4b4e      	ldr	r3, [pc, #312]	; (800523c <MX_GPIO_Init+0x18c>)
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800510c:	4b4b      	ldr	r3, [pc, #300]	; (800523c <MX_GPIO_Init+0x18c>)
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	4a4a      	ldr	r2, [pc, #296]	; (800523c <MX_GPIO_Init+0x18c>)
 8005112:	f043 0308 	orr.w	r3, r3, #8
 8005116:	6193      	str	r3, [r2, #24]
 8005118:	4b48      	ldr	r3, [pc, #288]	; (800523c <MX_GPIO_Init+0x18c>)
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|CSX_Pin, GPIO_PIN_RESET);
 8005124:	2200      	movs	r2, #0
 8005126:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800512a:	4845      	ldr	r0, [pc, #276]	; (8005240 <MX_GPIO_Init+0x190>)
 800512c:	f001 f865 	bl	80061fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESX_Pin|CMD_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8005130:	2200      	movs	r2, #0
 8005132:	210b      	movs	r1, #11
 8005134:	4843      	ldr	r0, [pc, #268]	; (8005244 <MX_GPIO_Init+0x194>)
 8005136:	f001 f860 	bl	80061fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 CSX_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CSX_Pin;
 800513a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800513e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005140:	2301      	movs	r3, #1
 8005142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005148:	2302      	movs	r3, #2
 800514a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800514c:	f107 0310 	add.w	r3, r7, #16
 8005150:	4619      	mov	r1, r3
 8005152:	483b      	ldr	r0, [pc, #236]	; (8005240 <MX_GPIO_Init+0x190>)
 8005154:	f000 feb6 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESX_Pin CMD_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = RESX_Pin|CMD_Pin|Buzzer_Pin;
 8005158:	230b      	movs	r3, #11
 800515a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800515c:	2301      	movs	r3, #1
 800515e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005160:	2300      	movs	r3, #0
 8005162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005164:	2302      	movs	r3, #2
 8005166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005168:	f107 0310 	add.w	r3, r7, #16
 800516c:	4619      	mov	r1, r3
 800516e:	4835      	ldr	r0, [pc, #212]	; (8005244 <MX_GPIO_Init+0x194>)
 8005170:	f000 fea8 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005174:	2304      	movs	r3, #4
 8005176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005178:	4b33      	ldr	r3, [pc, #204]	; (8005248 <MX_GPIO_Init+0x198>)
 800517a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800517c:	2301      	movs	r3, #1
 800517e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	4619      	mov	r1, r3
 8005186:	482f      	ldr	r0, [pc, #188]	; (8005244 <MX_GPIO_Init+0x194>)
 8005188:	f000 fe9c 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : state_Pin */
  GPIO_InitStruct.Pin = state_Pin;
 800518c:	2310      	movs	r3, #16
 800518e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005190:	4b2e      	ldr	r3, [pc, #184]	; (800524c <MX_GPIO_Init+0x19c>)
 8005192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005194:	2301      	movs	r3, #1
 8005196:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(state_GPIO_Port, &GPIO_InitStruct);
 8005198:	f107 0310 	add.w	r3, r7, #16
 800519c:	4619      	mov	r1, r3
 800519e:	4829      	ldr	r0, [pc, #164]	; (8005244 <MX_GPIO_Init+0x194>)
 80051a0:	f000 fe90 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80051a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80051b2:	f107 0310 	add.w	r3, r7, #16
 80051b6:	4619      	mov	r1, r3
 80051b8:	4822      	ldr	r0, [pc, #136]	; (8005244 <MX_GPIO_Init+0x194>)
 80051ba:	f000 fe83 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : choose_time_Pin flag_Pin */
  GPIO_InitStruct.Pin = choose_time_Pin|flag_Pin;
 80051be:	f44f 7384 	mov.w	r3, #264	; 0x108
 80051c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80051c4:	4b20      	ldr	r3, [pc, #128]	; (8005248 <MX_GPIO_Init+0x198>)
 80051c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051c8:	2301      	movs	r3, #1
 80051ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051cc:	f107 0310 	add.w	r3, r7, #16
 80051d0:	4619      	mov	r1, r3
 80051d2:	481f      	ldr	r0, [pc, #124]	; (8005250 <MX_GPIO_Init+0x1a0>)
 80051d4:	f000 fe76 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80051d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051e6:	f107 0310 	add.w	r3, r7, #16
 80051ea:	4619      	mov	r1, r3
 80051ec:	4818      	ldr	r0, [pc, #96]	; (8005250 <MX_GPIO_Init+0x1a0>)
 80051ee:	f000 fe69 	bl	8005ec4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80051f2:	2200      	movs	r2, #0
 80051f4:	2100      	movs	r1, #0
 80051f6:	2008      	movs	r0, #8
 80051f8:	f000 fc2d 	bl	8005a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80051fc:	2008      	movs	r0, #8
 80051fe:	f000 fc46 	bl	8005a8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8005202:	2200      	movs	r2, #0
 8005204:	2100      	movs	r1, #0
 8005206:	2009      	movs	r0, #9
 8005208:	f000 fc25 	bl	8005a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800520c:	2009      	movs	r0, #9
 800520e:	f000 fc3e 	bl	8005a8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005212:	2200      	movs	r2, #0
 8005214:	2100      	movs	r1, #0
 8005216:	200a      	movs	r0, #10
 8005218:	f000 fc1d 	bl	8005a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800521c:	200a      	movs	r0, #10
 800521e:	f000 fc36 	bl	8005a8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005222:	2200      	movs	r2, #0
 8005224:	2100      	movs	r1, #0
 8005226:	2017      	movs	r0, #23
 8005228:	f000 fc15 	bl	8005a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800522c:	2017      	movs	r0, #23
 800522e:	f000 fc2e 	bl	8005a8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005232:	bf00      	nop
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000
 8005240:	40011000 	.word	0x40011000
 8005244:	40010800 	.word	0x40010800
 8005248:	10210000 	.word	0x10210000
 800524c:	10310000 	.word	0x10310000
 8005250:	40010c00 	.word	0x40010c00

08005254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005258:	b672      	cpsid	i
}
 800525a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800525c:	e7fe      	b.n	800525c <Error_Handler+0x8>
	...

08005260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005266:	4b15      	ldr	r3, [pc, #84]	; (80052bc <HAL_MspInit+0x5c>)
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	4a14      	ldr	r2, [pc, #80]	; (80052bc <HAL_MspInit+0x5c>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6193      	str	r3, [r2, #24]
 8005272:	4b12      	ldr	r3, [pc, #72]	; (80052bc <HAL_MspInit+0x5c>)
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800527e:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <HAL_MspInit+0x5c>)
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <HAL_MspInit+0x5c>)
 8005284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005288:	61d3      	str	r3, [r2, #28]
 800528a:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <HAL_MspInit+0x5c>)
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005292:	607b      	str	r3, [r7, #4]
 8005294:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <HAL_MspInit+0x60>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <HAL_MspInit+0x60>)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	40021000 	.word	0x40021000
 80052c0:	40010000 	.word	0x40010000

080052c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052cc:	f107 0310 	add.w	r3, r7, #16
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a16      	ldr	r2, [pc, #88]	; (8005338 <HAL_I2C_MspInit+0x74>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d124      	bne.n	800532e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052e4:	4b15      	ldr	r3, [pc, #84]	; (800533c <HAL_I2C_MspInit+0x78>)
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	4a14      	ldr	r2, [pc, #80]	; (800533c <HAL_I2C_MspInit+0x78>)
 80052ea:	f043 0308 	orr.w	r3, r3, #8
 80052ee:	6193      	str	r3, [r2, #24]
 80052f0:	4b12      	ldr	r3, [pc, #72]	; (800533c <HAL_I2C_MspInit+0x78>)
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80052fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005300:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005302:	2312      	movs	r3, #18
 8005304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005306:	2303      	movs	r3, #3
 8005308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800530a:	f107 0310 	add.w	r3, r7, #16
 800530e:	4619      	mov	r1, r3
 8005310:	480b      	ldr	r0, [pc, #44]	; (8005340 <HAL_I2C_MspInit+0x7c>)
 8005312:	f000 fdd7 	bl	8005ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005316:	4b09      	ldr	r3, [pc, #36]	; (800533c <HAL_I2C_MspInit+0x78>)
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <HAL_I2C_MspInit+0x78>)
 800531c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005320:	61d3      	str	r3, [r2, #28]
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <HAL_I2C_MspInit+0x78>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800532e:	bf00      	nop
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40005800 	.word	0x40005800
 800533c:	40021000 	.word	0x40021000
 8005340:	40010c00 	.word	0x40010c00

08005344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534c:	f107 0310 	add.w	r3, r7, #16
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <HAL_SPI_MspInit+0x70>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d123      	bne.n	80053ac <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005364:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <HAL_SPI_MspInit+0x74>)
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <HAL_SPI_MspInit+0x74>)
 800536a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800536e:	6193      	str	r3, [r2, #24]
 8005370:	4b11      	ldr	r3, [pc, #68]	; (80053b8 <HAL_SPI_MspInit+0x74>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <HAL_SPI_MspInit+0x74>)
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	4a0d      	ldr	r2, [pc, #52]	; (80053b8 <HAL_SPI_MspInit+0x74>)
 8005382:	f043 0304 	orr.w	r3, r3, #4
 8005386:	6193      	str	r3, [r2, #24]
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_SPI_MspInit+0x74>)
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005394:	23a0      	movs	r3, #160	; 0xa0
 8005396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	2302      	movs	r3, #2
 800539a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800539c:	2303      	movs	r3, #3
 800539e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a0:	f107 0310 	add.w	r3, r7, #16
 80053a4:	4619      	mov	r1, r3
 80053a6:	4805      	ldr	r0, [pc, #20]	; (80053bc <HAL_SPI_MspInit+0x78>)
 80053a8:	f000 fd8c 	bl	8005ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80053ac:	bf00      	nop
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40013000 	.word	0x40013000
 80053b8:	40021000 	.word	0x40021000
 80053bc:	40010800 	.word	0x40010800

080053c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d10b      	bne.n	80053ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053d2:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <HAL_TIM_Base_MspInit+0x34>)
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <HAL_TIM_Base_MspInit+0x34>)
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	61d3      	str	r3, [r2, #28]
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <HAL_TIM_Base_MspInit+0x34>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr
 80053f4:	40021000 	.word	0x40021000

080053f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08c      	sub	sp, #48	; 0x30
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005400:	f107 031c 	add.w	r3, r7, #28
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	609a      	str	r2, [r3, #8]
 800540c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a3b      	ldr	r2, [pc, #236]	; (8005500 <HAL_TIM_Encoder_MspInit+0x108>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d13e      	bne.n	8005496 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005418:	4b3a      	ldr	r3, [pc, #232]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	4a39      	ldr	r2, [pc, #228]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 800541e:	f043 0302 	orr.w	r3, r3, #2
 8005422:	61d3      	str	r3, [r2, #28]
 8005424:	4b37      	ldr	r3, [pc, #220]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005430:	4b34      	ldr	r3, [pc, #208]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	4a33      	ldr	r2, [pc, #204]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 8005436:	f043 0308 	orr.w	r3, r3, #8
 800543a:	6193      	str	r3, [r2, #24]
 800543c:	4b31      	ldr	r3, [pc, #196]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005448:	2330      	movs	r3, #48	; 0x30
 800544a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800544c:	2300      	movs	r3, #0
 800544e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005450:	2300      	movs	r3, #0
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005454:	f107 031c 	add.w	r3, r7, #28
 8005458:	4619      	mov	r1, r3
 800545a:	482b      	ldr	r0, [pc, #172]	; (8005508 <HAL_TIM_Encoder_MspInit+0x110>)
 800545c:	f000 fd32 	bl	8005ec4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8005460:	4b2a      	ldr	r3, [pc, #168]	; (800550c <HAL_TIM_Encoder_MspInit+0x114>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800547e:	4a23      	ldr	r2, [pc, #140]	; (800550c <HAL_TIM_Encoder_MspInit+0x114>)
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005484:	2200      	movs	r2, #0
 8005486:	2101      	movs	r1, #1
 8005488:	201d      	movs	r0, #29
 800548a:	f000 fae4 	bl	8005a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800548e:	201d      	movs	r0, #29
 8005490:	f000 fafd 	bl	8005a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005494:	e030      	b.n	80054f8 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM4)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1d      	ldr	r2, [pc, #116]	; (8005510 <HAL_TIM_Encoder_MspInit+0x118>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d12b      	bne.n	80054f8 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80054a0:	4b18      	ldr	r3, [pc, #96]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	4a17      	ldr	r2, [pc, #92]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 80054a6:	f043 0304 	orr.w	r3, r3, #4
 80054aa:	61d3      	str	r3, [r2, #28]
 80054ac:	4b15      	ldr	r3, [pc, #84]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b8:	4b12      	ldr	r3, [pc, #72]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	4a11      	ldr	r2, [pc, #68]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 80054be:	f043 0308 	orr.w	r3, r3, #8
 80054c2:	6193      	str	r3, [r2, #24]
 80054c4:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <HAL_TIM_Encoder_MspInit+0x10c>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054d0:	23c0      	movs	r3, #192	; 0xc0
 80054d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054d4:	2300      	movs	r3, #0
 80054d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054dc:	f107 031c 	add.w	r3, r7, #28
 80054e0:	4619      	mov	r1, r3
 80054e2:	4809      	ldr	r0, [pc, #36]	; (8005508 <HAL_TIM_Encoder_MspInit+0x110>)
 80054e4:	f000 fcee 	bl	8005ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80054e8:	2200      	movs	r2, #0
 80054ea:	2100      	movs	r1, #0
 80054ec:	201e      	movs	r0, #30
 80054ee:	f000 fab2 	bl	8005a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80054f2:	201e      	movs	r0, #30
 80054f4:	f000 facb 	bl	8005a8e <HAL_NVIC_EnableIRQ>
}
 80054f8:	bf00      	nop
 80054fa:	3730      	adds	r7, #48	; 0x30
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40000400 	.word	0x40000400
 8005504:	40021000 	.word	0x40021000
 8005508:	40010c00 	.word	0x40010c00
 800550c:	40010000 	.word	0x40010000
 8005510:	40000800 	.word	0x40000800

08005514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005518:	e7fe      	b.n	8005518 <NMI_Handler+0x4>

0800551a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800551a:	b480      	push	{r7}
 800551c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800551e:	e7fe      	b.n	800551e <HardFault_Handler+0x4>

08005520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005524:	e7fe      	b.n	8005524 <MemManage_Handler+0x4>

08005526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005526:	b480      	push	{r7}
 8005528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800552a:	e7fe      	b.n	800552a <BusFault_Handler+0x4>

0800552c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005530:	e7fe      	b.n	8005530 <UsageFault_Handler+0x4>

08005532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005532:	b480      	push	{r7}
 8005534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800553e:	b480      	push	{r7}
 8005540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005542:	bf00      	nop
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800554a:	b480      	push	{r7}
 800554c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800554e:	bf00      	nop
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr

08005556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800555a:	f000 f965 	bl	8005828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800555e:	bf00      	nop
 8005560:	bd80      	pop	{r7, pc}

08005562 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005566:	2004      	movs	r0, #4
 8005568:	f000 fe60 	bl	800622c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800556c:	bf00      	nop
 800556e:	bd80      	pop	{r7, pc}

08005570 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(choose_time_Pin);
 8005574:	2008      	movs	r0, #8
 8005576:	f000 fe59 	bl	800622c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}

0800557e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(state_Pin);
 8005582:	2010      	movs	r0, #16
 8005584:	f000 fe52 	bl	800622c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005588:	bf00      	nop
 800558a:	bd80      	pop	{r7, pc}

0800558c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(flag_Pin);
 8005590:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005594:	f000 fe4a 	bl	800622c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005598:	bf00      	nop
 800559a:	bd80      	pop	{r7, pc}

0800559c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80055a0:	4802      	ldr	r0, [pc, #8]	; (80055ac <TIM3_IRQHandler+0x10>)
 80055a2:	f002 fee3 	bl	800836c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	200004b0 	.word	0x200004b0

080055b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80055b4:	4802      	ldr	r0, [pc, #8]	; (80055c0 <TIM4_IRQHandler+0x10>)
 80055b6:	f002 fed9 	bl	800836c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	200004f8 	.word	0x200004f8

080055c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return 1;
 80055c8:	2301      	movs	r3, #1
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr

080055d2 <_kill>:

int _kill(int pid, int sig)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80055dc:	f004 f81c 	bl	8009618 <__errno>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2216      	movs	r2, #22
 80055e4:	601a      	str	r2, [r3, #0]
  return -1;
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <_exit>:

void _exit (int status)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80055fa:	f04f 31ff 	mov.w	r1, #4294967295
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff ffe7 	bl	80055d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005604:	e7fe      	b.n	8005604 <_exit+0x12>

08005606 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	e00a      	b.n	800562e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005618:	f3af 8000 	nop.w
 800561c:	4601      	mov	r1, r0
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	60ba      	str	r2, [r7, #8]
 8005624:	b2ca      	uxtb	r2, r1
 8005626:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	3301      	adds	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	dbf0      	blt.n	8005618 <_read+0x12>
  }

  return len;
 8005636:	687b      	ldr	r3, [r7, #4]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e009      	b.n	8005666 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	60ba      	str	r2, [r7, #8]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	3301      	adds	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	429a      	cmp	r2, r3
 800566c:	dbf1      	blt.n	8005652 <_write+0x12>
  }
  return len;
 800566e:	687b      	ldr	r3, [r7, #4]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <_close>:

int _close(int file)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr

0800568e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800569e:	605a      	str	r2, [r3, #4]
  return 0;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <_isatty>:

int _isatty(int file)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80056b4:	2301      	movs	r3, #1
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056e0:	4a14      	ldr	r2, [pc, #80]	; (8005734 <_sbrk+0x5c>)
 80056e2:	4b15      	ldr	r3, [pc, #84]	; (8005738 <_sbrk+0x60>)
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056ec:	4b13      	ldr	r3, [pc, #76]	; (800573c <_sbrk+0x64>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056f4:	4b11      	ldr	r3, [pc, #68]	; (800573c <_sbrk+0x64>)
 80056f6:	4a12      	ldr	r2, [pc, #72]	; (8005740 <_sbrk+0x68>)
 80056f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056fa:	4b10      	ldr	r3, [pc, #64]	; (800573c <_sbrk+0x64>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	429a      	cmp	r2, r3
 8005706:	d207      	bcs.n	8005718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005708:	f003 ff86 	bl	8009618 <__errno>
 800570c:	4603      	mov	r3, r0
 800570e:	220c      	movs	r2, #12
 8005710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005712:	f04f 33ff 	mov.w	r3, #4294967295
 8005716:	e009      	b.n	800572c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005718:	4b08      	ldr	r3, [pc, #32]	; (800573c <_sbrk+0x64>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800571e:	4b07      	ldr	r3, [pc, #28]	; (800573c <_sbrk+0x64>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4413      	add	r3, r2
 8005726:	4a05      	ldr	r2, [pc, #20]	; (800573c <_sbrk+0x64>)
 8005728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800572a:	68fb      	ldr	r3, [r7, #12]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20005000 	.word	0x20005000
 8005738:	00000400 	.word	0x00000400
 800573c:	20000540 	.word	0x20000540
 8005740:	200006b8 	.word	0x200006b8

08005744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005750:	f7ff fff8 	bl	8005744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005754:	480b      	ldr	r0, [pc, #44]	; (8005784 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005756:	490c      	ldr	r1, [pc, #48]	; (8005788 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005758:	4a0c      	ldr	r2, [pc, #48]	; (800578c <LoopFillZerobss+0x16>)
  movs r3, #0
 800575a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800575c:	e002      	b.n	8005764 <LoopCopyDataInit>

0800575e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800575e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005762:	3304      	adds	r3, #4

08005764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005768:	d3f9      	bcc.n	800575e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800576a:	4a09      	ldr	r2, [pc, #36]	; (8005790 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800576c:	4c09      	ldr	r4, [pc, #36]	; (8005794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800576e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005770:	e001      	b.n	8005776 <LoopFillZerobss>

08005772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005774:	3204      	adds	r2, #4

08005776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005778:	d3fb      	bcc.n	8005772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800577a:	f003 ff53 	bl	8009624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800577e:	f7ff fae5 	bl	8004d4c <main>
  bx lr
 8005782:	4770      	bx	lr
  ldr r0, =_sdata
 8005784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005788:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 800578c:	0800d2a0 	.word	0x0800d2a0
  ldr r2, =_sbss
 8005790:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8005794:	200006b4 	.word	0x200006b4

08005798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005798:	e7fe      	b.n	8005798 <ADC1_2_IRQHandler>
	...

0800579c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057a0:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <HAL_Init+0x28>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <HAL_Init+0x28>)
 80057a6:	f043 0310 	orr.w	r3, r3, #16
 80057aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057ac:	2003      	movs	r0, #3
 80057ae:	f000 f947 	bl	8005a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057b2:	200f      	movs	r0, #15
 80057b4:	f000 f808 	bl	80057c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057b8:	f7ff fd52 	bl	8005260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40022000 	.word	0x40022000

080057c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057d0:	4b12      	ldr	r3, [pc, #72]	; (800581c <HAL_InitTick+0x54>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b12      	ldr	r3, [pc, #72]	; (8005820 <HAL_InitTick+0x58>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	4619      	mov	r1, r3
 80057da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057de:	fbb3 f3f1 	udiv	r3, r3, r1
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f95f 	bl	8005aaa <HAL_SYSTICK_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e00e      	b.n	8005814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b0f      	cmp	r3, #15
 80057fa:	d80a      	bhi.n	8005812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057fc:	2200      	movs	r2, #0
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	f000 f927 	bl	8005a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005808:	4a06      	ldr	r2, [pc, #24]	; (8005824 <HAL_InitTick+0x5c>)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	e000      	b.n	8005814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	200000e0 	.word	0x200000e0
 8005820:	200000e8 	.word	0x200000e8
 8005824:	200000e4 	.word	0x200000e4

08005828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800582c:	4b05      	ldr	r3, [pc, #20]	; (8005844 <HAL_IncTick+0x1c>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_IncTick+0x20>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4413      	add	r3, r2
 8005838:	4a03      	ldr	r2, [pc, #12]	; (8005848 <HAL_IncTick+0x20>)
 800583a:	6013      	str	r3, [r2, #0]
}
 800583c:	bf00      	nop
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	200000e8 	.word	0x200000e8
 8005848:	20000544 	.word	0x20000544

0800584c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return uwTick;
 8005850:	4b02      	ldr	r3, [pc, #8]	; (800585c <HAL_GetTick+0x10>)
 8005852:	681b      	ldr	r3, [r3, #0]
}
 8005854:	4618      	mov	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	20000544 	.word	0x20000544

08005860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005868:	f7ff fff0 	bl	800584c <HAL_GetTick>
 800586c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d005      	beq.n	8005886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800587a:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <HAL_Delay+0x44>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005886:	bf00      	nop
 8005888:	f7ff ffe0 	bl	800584c <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	429a      	cmp	r2, r3
 8005896:	d8f7      	bhi.n	8005888 <HAL_Delay+0x28>
  {
  }
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	200000e8 	.word	0x200000e8

080058a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058b8:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <__NVIC_SetPriorityGrouping+0x44>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058c4:	4013      	ands	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058da:	4a04      	ldr	r2, [pc, #16]	; (80058ec <__NVIC_SetPriorityGrouping+0x44>)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	60d3      	str	r3, [r2, #12]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	e000ed00 	.word	0xe000ed00

080058f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058f4:	4b04      	ldr	r3, [pc, #16]	; (8005908 <__NVIC_GetPriorityGrouping+0x18>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	f003 0307 	and.w	r3, r3, #7
}
 80058fe:	4618      	mov	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800591a:	2b00      	cmp	r3, #0
 800591c:	db0b      	blt.n	8005936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	f003 021f 	and.w	r2, r3, #31
 8005924:	4906      	ldr	r1, [pc, #24]	; (8005940 <__NVIC_EnableIRQ+0x34>)
 8005926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	2001      	movs	r0, #1
 800592e:	fa00 f202 	lsl.w	r2, r0, r2
 8005932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr
 8005940:	e000e100 	.word	0xe000e100

08005944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	6039      	str	r1, [r7, #0]
 800594e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005954:	2b00      	cmp	r3, #0
 8005956:	db0a      	blt.n	800596e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	b2da      	uxtb	r2, r3
 800595c:	490c      	ldr	r1, [pc, #48]	; (8005990 <__NVIC_SetPriority+0x4c>)
 800595e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005962:	0112      	lsls	r2, r2, #4
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	440b      	add	r3, r1
 8005968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800596c:	e00a      	b.n	8005984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	4908      	ldr	r1, [pc, #32]	; (8005994 <__NVIC_SetPriority+0x50>)
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	3b04      	subs	r3, #4
 800597c:	0112      	lsls	r2, r2, #4
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	440b      	add	r3, r1
 8005982:	761a      	strb	r2, [r3, #24]
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	e000e100 	.word	0xe000e100
 8005994:	e000ed00 	.word	0xe000ed00

08005998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005998:	b480      	push	{r7}
 800599a:	b089      	sub	sp, #36	; 0x24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f1c3 0307 	rsb	r3, r3, #7
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	bf28      	it	cs
 80059b6:	2304      	movcs	r3, #4
 80059b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3304      	adds	r3, #4
 80059be:	2b06      	cmp	r3, #6
 80059c0:	d902      	bls.n	80059c8 <NVIC_EncodePriority+0x30>
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	3b03      	subs	r3, #3
 80059c6:	e000      	b.n	80059ca <NVIC_EncodePriority+0x32>
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059cc:	f04f 32ff 	mov.w	r2, #4294967295
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43da      	mvns	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	401a      	ands	r2, r3
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059e0:	f04f 31ff 	mov.w	r1, #4294967295
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ea:	43d9      	mvns	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059f0:	4313      	orrs	r3, r2
         );
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3724      	adds	r7, #36	; 0x24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a0c:	d301      	bcc.n	8005a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e00f      	b.n	8005a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a12:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <SysTick_Config+0x40>)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a1a:	210f      	movs	r1, #15
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	f7ff ff90 	bl	8005944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <SysTick_Config+0x40>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a2a:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <SysTick_Config+0x40>)
 8005a2c:	2207      	movs	r2, #7
 8005a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	e000e010 	.word	0xe000e010

08005a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff ff2d 	bl	80058a8 <__NVIC_SetPriorityGrouping>
}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a68:	f7ff ff42 	bl	80058f0 <__NVIC_GetPriorityGrouping>
 8005a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	6978      	ldr	r0, [r7, #20]
 8005a74:	f7ff ff90 	bl	8005998 <NVIC_EncodePriority>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a7e:	4611      	mov	r1, r2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff ff5f 	bl	8005944 <__NVIC_SetPriority>
}
 8005a86:	bf00      	nop
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	4603      	mov	r3, r0
 8005a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff ff35 	bl	800590c <__NVIC_EnableIRQ>
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b082      	sub	sp, #8
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff ffa2 	bl	80059fc <SysTick_Config>
 8005ab8:	4603      	mov	r3, r0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ade:	4b2f      	ldr	r3, [pc, #188]	; (8005b9c <HAL_FLASH_Program+0xd8>)
 8005ae0:	7e1b      	ldrb	r3, [r3, #24]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_FLASH_Program+0x26>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e054      	b.n	8005b94 <HAL_FLASH_Program+0xd0>
 8005aea:	4b2c      	ldr	r3, [pc, #176]	; (8005b9c <HAL_FLASH_Program+0xd8>)
 8005aec:	2201      	movs	r2, #1
 8005aee:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005af0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005af4:	f000 f8a8 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d144      	bne.n	8005b8c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d102      	bne.n	8005b0e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	757b      	strb	r3, [r7, #21]
 8005b0c:	e007      	b.n	8005b1e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d102      	bne.n	8005b1a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005b14:	2302      	movs	r3, #2
 8005b16:	757b      	strb	r3, [r7, #21]
 8005b18:	e001      	b.n	8005b1e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75bb      	strb	r3, [r7, #22]
 8005b22:	e02d      	b.n	8005b80 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005b24:	7dbb      	ldrb	r3, [r7, #22]
 8005b26:	005a      	lsls	r2, r3, #1
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	eb02 0c03 	add.w	ip, r2, r3
 8005b2e:	7dbb      	ldrb	r3, [r7, #22]
 8005b30:	0119      	lsls	r1, r3, #4
 8005b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b36:	f1c1 0620 	rsb	r6, r1, #32
 8005b3a:	f1a1 0020 	sub.w	r0, r1, #32
 8005b3e:	fa22 f401 	lsr.w	r4, r2, r1
 8005b42:	fa03 f606 	lsl.w	r6, r3, r6
 8005b46:	4334      	orrs	r4, r6
 8005b48:	fa23 f000 	lsr.w	r0, r3, r0
 8005b4c:	4304      	orrs	r4, r0
 8005b4e:	fa23 f501 	lsr.w	r5, r3, r1
 8005b52:	b2a3      	uxth	r3, r4
 8005b54:	4619      	mov	r1, r3
 8005b56:	4660      	mov	r0, ip
 8005b58:	f000 f85a 	bl	8005c10 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b60:	f000 f872 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005b64:	4603      	mov	r3, r0
 8005b66:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005b68:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <HAL_FLASH_Program+0xdc>)
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ba0 <HAL_FLASH_Program+0xdc>)
 8005b6e:	f023 0301 	bic.w	r3, r3, #1
 8005b72:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d107      	bne.n	8005b8a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005b7a:	7dbb      	ldrb	r3, [r7, #22]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	75bb      	strb	r3, [r7, #22]
 8005b80:	7dba      	ldrb	r2, [r7, #22]
 8005b82:	7d7b      	ldrb	r3, [r7, #21]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d3cd      	bcc.n	8005b24 <HAL_FLASH_Program+0x60>
 8005b88:	e000      	b.n	8005b8c <HAL_FLASH_Program+0xc8>
      {
        break;
 8005b8a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005b8c:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <HAL_FLASH_Program+0xd8>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	761a      	strb	r2, [r3, #24]

  return status;
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9c:	20000548 	.word	0x20000548
 8005ba0:	40022000 	.word	0x40022000

08005ba4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005bae:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <HAL_FLASH_Unlock+0x40>)
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005bba:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <HAL_FLASH_Unlock+0x40>)
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <HAL_FLASH_Unlock+0x44>)
 8005bbe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005bc0:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <HAL_FLASH_Unlock+0x40>)
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <HAL_FLASH_Unlock+0x48>)
 8005bc4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <HAL_FLASH_Unlock+0x40>)
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40022000 	.word	0x40022000
 8005be8:	45670123 	.word	0x45670123
 8005bec:	cdef89ab 	.word	0xcdef89ab

08005bf0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_FLASH_Lock+0x1c>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <HAL_FLASH_Lock+0x1c>)
 8005bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40022000 	.word	0x40022000

08005c10 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c1c:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <FLASH_Program_HalfWord+0x30>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <FLASH_Program_HalfWord+0x34>)
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	4a07      	ldr	r2, [pc, #28]	; (8005c44 <FLASH_Program_HalfWord+0x34>)
 8005c28:	f043 0301 	orr.w	r3, r3, #1
 8005c2c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	887a      	ldrh	r2, [r7, #2]
 8005c32:	801a      	strh	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20000548 	.word	0x20000548
 8005c44:	40022000 	.word	0x40022000

08005c48 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005c50:	f7ff fdfc 	bl	800584c <HAL_GetTick>
 8005c54:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005c56:	e010      	b.n	8005c7a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d00c      	beq.n	8005c7a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <FLASH_WaitForLastOperation+0x2e>
 8005c66:	f7ff fdf1 	bl	800584c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d201      	bcs.n	8005c7a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e025      	b.n	8005cc6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005c7a:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e8      	bne.n	8005c58 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005c94:	2220      	movs	r2, #32
 8005c96:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005cbc:	f000 f80a 	bl	8005cd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	40022000 	.word	0x40022000

08005cd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005cde:	4b23      	ldr	r3, [pc, #140]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005cea:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f043 0302 	orr.w	r3, r3, #2
 8005cf2:	4a1f      	ldr	r2, [pc, #124]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005cf4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f043 0310 	orr.w	r3, r3, #16
 8005cfc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005cfe:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005d0a:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005d14:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f043 0304 	orr.w	r3, r3, #4
 8005d1c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005d2a:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f043 0304 	orr.w	r3, r3, #4
 8005d32:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005d34:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f240 1201 	movw	r2, #257	; 0x101
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d106      	bne.n	8005d5a <FLASH_SetErrorCode+0x86>
 8005d4c:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	4a06      	ldr	r2, [pc, #24]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	61d3      	str	r3, [r2, #28]
}  
 8005d58:	e002      	b.n	8005d60 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005d5a:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60d3      	str	r3, [r2, #12]
}  
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bc80      	pop	{r7}
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40022000 	.word	0x40022000
 8005d70:	20000548 	.word	0x20000548

08005d74 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d86:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <HAL_FLASHEx_Erase+0xd0>)
 8005d88:	7e1b      	ldrb	r3, [r3, #24]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_FLASHEx_Erase+0x1e>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e053      	b.n	8005e3a <HAL_FLASHEx_Erase+0xc6>
 8005d92:	4b2c      	ldr	r3, [pc, #176]	; (8005e44 <HAL_FLASHEx_Erase+0xd0>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d116      	bne.n	8005dce <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005da0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005da4:	f7ff ff50 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d141      	bne.n	8005e32 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005dae:	2001      	movs	r0, #1
 8005db0:	f000 f84c 	bl	8005e4c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005db8:	f7ff ff46 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005dc0:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <HAL_FLASHEx_Erase+0xd4>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <HAL_FLASHEx_Erase+0xd4>)
 8005dc6:	f023 0304 	bic.w	r3, r3, #4
 8005dca:	6113      	str	r3, [r2, #16]
 8005dcc:	e031      	b.n	8005e32 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005dce:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005dd2:	f7ff ff39 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d12a      	bne.n	8005e32 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	f04f 32ff 	mov.w	r2, #4294967295
 8005de2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	e019      	b.n	8005e20 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005dec:	68b8      	ldr	r0, [r7, #8]
 8005dee:	f000 f849 	bl	8005e84 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005df2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005df6:	f7ff ff27 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005dfe:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <HAL_FLASHEx_Erase+0xd4>)
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	4a11      	ldr	r2, [pc, #68]	; (8005e48 <HAL_FLASHEx_Erase+0xd4>)
 8005e04:	f023 0302 	bic.w	r3, r3, #2
 8005e08:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	601a      	str	r2, [r3, #0]
            break;
 8005e16:	e00c      	b.n	8005e32 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	029a      	lsls	r2, r3, #10
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d3dc      	bcc.n	8005dec <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e32:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <HAL_FLASHEx_Erase+0xd0>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	761a      	strb	r2, [r3, #24]

  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000548 	.word	0x20000548
 8005e48:	40022000 	.word	0x40022000

08005e4c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <FLASH_MassErase+0x30>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005e5a:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <FLASH_MassErase+0x34>)
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <FLASH_MassErase+0x34>)
 8005e60:	f043 0304 	orr.w	r3, r3, #4
 8005e64:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005e66:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <FLASH_MassErase+0x34>)
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	4a05      	ldr	r2, [pc, #20]	; (8005e80 <FLASH_MassErase+0x34>)
 8005e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e70:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr
 8005e7c:	20000548 	.word	0x20000548
 8005e80:	40022000 	.word	0x40022000

08005e84 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <FLASH_PageErase+0x38>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <FLASH_PageErase+0x3c>)
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <FLASH_PageErase+0x3c>)
 8005e98:	f043 0302 	orr.w	r3, r3, #2
 8005e9c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005e9e:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <FLASH_PageErase+0x3c>)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005ea4:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <FLASH_PageErase+0x3c>)
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	4a05      	ldr	r2, [pc, #20]	; (8005ec0 <FLASH_PageErase+0x3c>)
 8005eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000548 	.word	0x20000548
 8005ec0:	40022000 	.word	0x40022000

08005ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b08b      	sub	sp, #44	; 0x2c
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ed6:	e169      	b.n	80061ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005ed8:	2201      	movs	r2, #1
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	f040 8158 	bne.w	80061a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4a9a      	ldr	r2, [pc, #616]	; (8006164 <HAL_GPIO_Init+0x2a0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d05e      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
 8005f00:	4a98      	ldr	r2, [pc, #608]	; (8006164 <HAL_GPIO_Init+0x2a0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d875      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f06:	4a98      	ldr	r2, [pc, #608]	; (8006168 <HAL_GPIO_Init+0x2a4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d058      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
 8005f0c:	4a96      	ldr	r2, [pc, #600]	; (8006168 <HAL_GPIO_Init+0x2a4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d86f      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f12:	4a96      	ldr	r2, [pc, #600]	; (800616c <HAL_GPIO_Init+0x2a8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d052      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
 8005f18:	4a94      	ldr	r2, [pc, #592]	; (800616c <HAL_GPIO_Init+0x2a8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d869      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f1e:	4a94      	ldr	r2, [pc, #592]	; (8006170 <HAL_GPIO_Init+0x2ac>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d04c      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
 8005f24:	4a92      	ldr	r2, [pc, #584]	; (8006170 <HAL_GPIO_Init+0x2ac>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d863      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f2a:	4a92      	ldr	r2, [pc, #584]	; (8006174 <HAL_GPIO_Init+0x2b0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d046      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
 8005f30:	4a90      	ldr	r2, [pc, #576]	; (8006174 <HAL_GPIO_Init+0x2b0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d85d      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f36:	2b12      	cmp	r3, #18
 8005f38:	d82a      	bhi.n	8005f90 <HAL_GPIO_Init+0xcc>
 8005f3a:	2b12      	cmp	r3, #18
 8005f3c:	d859      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <HAL_GPIO_Init+0x80>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005fbf 	.word	0x08005fbf
 8005f48:	08005f99 	.word	0x08005f99
 8005f4c:	08005fab 	.word	0x08005fab
 8005f50:	08005fed 	.word	0x08005fed
 8005f54:	08005ff3 	.word	0x08005ff3
 8005f58:	08005ff3 	.word	0x08005ff3
 8005f5c:	08005ff3 	.word	0x08005ff3
 8005f60:	08005ff3 	.word	0x08005ff3
 8005f64:	08005ff3 	.word	0x08005ff3
 8005f68:	08005ff3 	.word	0x08005ff3
 8005f6c:	08005ff3 	.word	0x08005ff3
 8005f70:	08005ff3 	.word	0x08005ff3
 8005f74:	08005ff3 	.word	0x08005ff3
 8005f78:	08005ff3 	.word	0x08005ff3
 8005f7c:	08005ff3 	.word	0x08005ff3
 8005f80:	08005ff3 	.word	0x08005ff3
 8005f84:	08005ff3 	.word	0x08005ff3
 8005f88:	08005fa1 	.word	0x08005fa1
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	4a79      	ldr	r2, [pc, #484]	; (8006178 <HAL_GPIO_Init+0x2b4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005f96:	e02c      	b.n	8005ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	623b      	str	r3, [r7, #32]
          break;
 8005f9e:	e029      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	623b      	str	r3, [r7, #32]
          break;
 8005fa8:	e024      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	623b      	str	r3, [r7, #32]
          break;
 8005fb2:	e01f      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	623b      	str	r3, [r7, #32]
          break;
 8005fbc:	e01a      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d102      	bne.n	8005fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005fc6:	2304      	movs	r3, #4
 8005fc8:	623b      	str	r3, [r7, #32]
          break;
 8005fca:	e013      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d105      	bne.n	8005fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	611a      	str	r2, [r3, #16]
          break;
 8005fde:	e009      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	615a      	str	r2, [r3, #20]
          break;
 8005fea:	e003      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005fec:	2300      	movs	r3, #0
 8005fee:	623b      	str	r3, [r7, #32]
          break;
 8005ff0:	e000      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          break;
 8005ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2bff      	cmp	r3, #255	; 0xff
 8005ff8:	d801      	bhi.n	8005ffe <HAL_GPIO_Init+0x13a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	e001      	b.n	8006002 <HAL_GPIO_Init+0x13e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2bff      	cmp	r3, #255	; 0xff
 8006008:	d802      	bhi.n	8006010 <HAL_GPIO_Init+0x14c>
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	e002      	b.n	8006016 <HAL_GPIO_Init+0x152>
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	3b08      	subs	r3, #8
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	210f      	movs	r1, #15
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	6a39      	ldr	r1, [r7, #32]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	fa01 f303 	lsl.w	r3, r1, r3
 8006030:	431a      	orrs	r2, r3
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80b1 	beq.w	80061a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006044:	4b4d      	ldr	r3, [pc, #308]	; (800617c <HAL_GPIO_Init+0x2b8>)
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	4a4c      	ldr	r2, [pc, #304]	; (800617c <HAL_GPIO_Init+0x2b8>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	6193      	str	r3, [r2, #24]
 8006050:	4b4a      	ldr	r3, [pc, #296]	; (800617c <HAL_GPIO_Init+0x2b8>)
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800605c:	4a48      	ldr	r2, [pc, #288]	; (8006180 <HAL_GPIO_Init+0x2bc>)
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	089b      	lsrs	r3, r3, #2
 8006062:	3302      	adds	r3, #2
 8006064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	220f      	movs	r2, #15
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	43db      	mvns	r3, r3
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4013      	ands	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a40      	ldr	r2, [pc, #256]	; (8006184 <HAL_GPIO_Init+0x2c0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d013      	beq.n	80060b0 <HAL_GPIO_Init+0x1ec>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a3f      	ldr	r2, [pc, #252]	; (8006188 <HAL_GPIO_Init+0x2c4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00d      	beq.n	80060ac <HAL_GPIO_Init+0x1e8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a3e      	ldr	r2, [pc, #248]	; (800618c <HAL_GPIO_Init+0x2c8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <HAL_GPIO_Init+0x1e4>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3d      	ldr	r2, [pc, #244]	; (8006190 <HAL_GPIO_Init+0x2cc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d101      	bne.n	80060a4 <HAL_GPIO_Init+0x1e0>
 80060a0:	2303      	movs	r3, #3
 80060a2:	e006      	b.n	80060b2 <HAL_GPIO_Init+0x1ee>
 80060a4:	2304      	movs	r3, #4
 80060a6:	e004      	b.n	80060b2 <HAL_GPIO_Init+0x1ee>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e002      	b.n	80060b2 <HAL_GPIO_Init+0x1ee>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <HAL_GPIO_Init+0x1ee>
 80060b0:	2300      	movs	r3, #0
 80060b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b4:	f002 0203 	and.w	r2, r2, #3
 80060b8:	0092      	lsls	r2, r2, #2
 80060ba:	4093      	lsls	r3, r2
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80060c2:	492f      	ldr	r1, [pc, #188]	; (8006180 <HAL_GPIO_Init+0x2bc>)
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	089b      	lsrs	r3, r3, #2
 80060c8:	3302      	adds	r3, #2
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d006      	beq.n	80060ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80060dc:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	492c      	ldr	r1, [pc, #176]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	608b      	str	r3, [r1, #8]
 80060e8:	e006      	b.n	80060f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80060ea:	4b2a      	ldr	r3, [pc, #168]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	43db      	mvns	r3, r3
 80060f2:	4928      	ldr	r1, [pc, #160]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d006      	beq.n	8006112 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006104:	4b23      	ldr	r3, [pc, #140]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	4922      	ldr	r1, [pc, #136]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	4313      	orrs	r3, r2
 800610e:	60cb      	str	r3, [r1, #12]
 8006110:	e006      	b.n	8006120 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006112:	4b20      	ldr	r3, [pc, #128]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	43db      	mvns	r3, r3
 800611a:	491e      	ldr	r1, [pc, #120]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 800611c:	4013      	ands	r3, r2
 800611e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d006      	beq.n	800613a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800612c:	4b19      	ldr	r3, [pc, #100]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	4918      	ldr	r1, [pc, #96]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	4313      	orrs	r3, r2
 8006136:	604b      	str	r3, [r1, #4]
 8006138:	e006      	b.n	8006148 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800613a:	4b16      	ldr	r3, [pc, #88]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	43db      	mvns	r3, r3
 8006142:	4914      	ldr	r1, [pc, #80]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 8006144:	4013      	ands	r3, r2
 8006146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d021      	beq.n	8006198 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006154:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	490e      	ldr	r1, [pc, #56]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	4313      	orrs	r3, r2
 800615e:	600b      	str	r3, [r1, #0]
 8006160:	e021      	b.n	80061a6 <HAL_GPIO_Init+0x2e2>
 8006162:	bf00      	nop
 8006164:	10320000 	.word	0x10320000
 8006168:	10310000 	.word	0x10310000
 800616c:	10220000 	.word	0x10220000
 8006170:	10210000 	.word	0x10210000
 8006174:	10120000 	.word	0x10120000
 8006178:	10110000 	.word	0x10110000
 800617c:	40021000 	.word	0x40021000
 8006180:	40010000 	.word	0x40010000
 8006184:	40010800 	.word	0x40010800
 8006188:	40010c00 	.word	0x40010c00
 800618c:	40011000 	.word	0x40011000
 8006190:	40011400 	.word	0x40011400
 8006194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006198:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <HAL_GPIO_Init+0x304>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	43db      	mvns	r3, r3
 80061a0:	4909      	ldr	r1, [pc, #36]	; (80061c8 <HAL_GPIO_Init+0x304>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	3301      	adds	r3, #1
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	fa22 f303 	lsr.w	r3, r2, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f ae8e 	bne.w	8005ed8 <HAL_GPIO_Init+0x14>
  }
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	372c      	adds	r7, #44	; 0x2c
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr
 80061c8:	40010400 	.word	0x40010400

080061cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	887b      	ldrh	r3, [r7, #2]
 80061de:	4013      	ands	r3, r2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
 80061e8:	e001      	b.n	80061ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr

080061fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	807b      	strh	r3, [r7, #2]
 8006206:	4613      	mov	r3, r2
 8006208:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800620a:	787b      	ldrb	r3, [r7, #1]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006210:	887a      	ldrh	r2, [r7, #2]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006216:	e003      	b.n	8006220 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006218:	887b      	ldrh	r3, [r7, #2]
 800621a:	041a      	lsls	r2, r3, #16
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	611a      	str	r2, [r3, #16]
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr
	...

0800622c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006236:	4b08      	ldr	r3, [pc, #32]	; (8006258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d006      	beq.n	8006250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006242:	4a05      	ldr	r2, [pc, #20]	; (8006258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	4618      	mov	r0, r3
 800624c:	f7fc fe94 	bl	8002f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40010400 	.word	0x40010400

0800625c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e12b      	b.n	80064c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff f81e 	bl	80052c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062c0:	f001 fbca 	bl	8007a58 <HAL_RCC_GetPCLK1Freq>
 80062c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	4a81      	ldr	r2, [pc, #516]	; (80064d0 <HAL_I2C_Init+0x274>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d807      	bhi.n	80062e0 <HAL_I2C_Init+0x84>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a80      	ldr	r2, [pc, #512]	; (80064d4 <HAL_I2C_Init+0x278>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	bf94      	ite	ls
 80062d8:	2301      	movls	r3, #1
 80062da:	2300      	movhi	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e006      	b.n	80062ee <HAL_I2C_Init+0x92>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4a7d      	ldr	r2, [pc, #500]	; (80064d8 <HAL_I2C_Init+0x27c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	bf94      	ite	ls
 80062e8:	2301      	movls	r3, #1
 80062ea:	2300      	movhi	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e0e7      	b.n	80064c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a78      	ldr	r2, [pc, #480]	; (80064dc <HAL_I2C_Init+0x280>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	0c9b      	lsrs	r3, r3, #18
 8006300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a6a      	ldr	r2, [pc, #424]	; (80064d0 <HAL_I2C_Init+0x274>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d802      	bhi.n	8006330 <HAL_I2C_Init+0xd4>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	3301      	adds	r3, #1
 800632e:	e009      	b.n	8006344 <HAL_I2C_Init+0xe8>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	4a69      	ldr	r2, [pc, #420]	; (80064e0 <HAL_I2C_Init+0x284>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	099b      	lsrs	r3, r3, #6
 8006342:	3301      	adds	r3, #1
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	430b      	orrs	r3, r1
 800634a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006356:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	495c      	ldr	r1, [pc, #368]	; (80064d0 <HAL_I2C_Init+0x274>)
 8006360:	428b      	cmp	r3, r1
 8006362:	d819      	bhi.n	8006398 <HAL_I2C_Init+0x13c>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	1e59      	subs	r1, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006378:	400b      	ands	r3, r1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_I2C_Init+0x138>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1e59      	subs	r1, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	fbb1 f3f3 	udiv	r3, r1, r3
 800638c:	3301      	adds	r3, #1
 800638e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006392:	e051      	b.n	8006438 <HAL_I2C_Init+0x1dc>
 8006394:	2304      	movs	r3, #4
 8006396:	e04f      	b.n	8006438 <HAL_I2C_Init+0x1dc>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d111      	bne.n	80063c4 <HAL_I2C_Init+0x168>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	1e58      	subs	r0, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6859      	ldr	r1, [r3, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	440b      	add	r3, r1
 80063ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80063b2:	3301      	adds	r3, #1
 80063b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	e012      	b.n	80063ea <HAL_I2C_Init+0x18e>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	1e58      	subs	r0, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6859      	ldr	r1, [r3, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	0099      	lsls	r1, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80063da:	3301      	adds	r3, #1
 80063dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <HAL_I2C_Init+0x196>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e022      	b.n	8006438 <HAL_I2C_Init+0x1dc>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10e      	bne.n	8006418 <HAL_I2C_Init+0x1bc>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1e58      	subs	r0, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6859      	ldr	r1, [r3, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	440b      	add	r3, r1
 8006408:	fbb0 f3f3 	udiv	r3, r0, r3
 800640c:	3301      	adds	r3, #1
 800640e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006416:	e00f      	b.n	8006438 <HAL_I2C_Init+0x1dc>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1e58      	subs	r0, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6859      	ldr	r1, [r3, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	0099      	lsls	r1, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	fbb0 f3f3 	udiv	r3, r0, r3
 800642e:	3301      	adds	r3, #1
 8006430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	6809      	ldr	r1, [r1, #0]
 800643c:	4313      	orrs	r3, r2
 800643e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69da      	ldr	r2, [r3, #28]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6911      	ldr	r1, [r2, #16]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68d2      	ldr	r2, [r2, #12]
 8006472:	4311      	orrs	r1, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	430b      	orrs	r3, r1
 800647a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695a      	ldr	r2, [r3, #20]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	000186a0 	.word	0x000186a0
 80064d4:	001e847f 	.word	0x001e847f
 80064d8:	003d08ff 	.word	0x003d08ff
 80064dc:	431bde83 	.word	0x431bde83
 80064e0:	10624dd3 	.word	0x10624dd3

080064e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	461a      	mov	r2, r3
 80064f0:	460b      	mov	r3, r1
 80064f2:	817b      	strh	r3, [r7, #10]
 80064f4:	4613      	mov	r3, r2
 80064f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064f8:	f7ff f9a8 	bl	800584c <HAL_GetTick>
 80064fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b20      	cmp	r3, #32
 8006508:	f040 80e0 	bne.w	80066cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	2319      	movs	r3, #25
 8006512:	2201      	movs	r2, #1
 8006514:	4970      	ldr	r1, [pc, #448]	; (80066d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 fc9e 	bl	8006e58 <I2C_WaitOnFlagUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006522:	2302      	movs	r3, #2
 8006524:	e0d3      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_I2C_Master_Transmit+0x50>
 8006530:	2302      	movs	r3, #2
 8006532:	e0cc      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d007      	beq.n	800655a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0201 	orr.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2221      	movs	r2, #33	; 0x21
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2210      	movs	r2, #16
 8006576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	893a      	ldrh	r2, [r7, #8]
 800658a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4a50      	ldr	r2, [pc, #320]	; (80066dc <HAL_I2C_Master_Transmit+0x1f8>)
 800659a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800659c:	8979      	ldrh	r1, [r7, #10]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	6a3a      	ldr	r2, [r7, #32]
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 fb08 	bl	8006bb8 <I2C_MasterRequestWrite>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e08d      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80065c8:	e066      	b.n	8006698 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	6a39      	ldr	r1, [r7, #32]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fd5c 	bl	800708c <I2C_WaitOnTXEFlagUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00d      	beq.n	80065f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d107      	bne.n	80065f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e06b      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	781a      	ldrb	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d11b      	bne.n	800666c <HAL_I2C_Master_Transmit+0x188>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006638:	2b00      	cmp	r3, #0
 800663a:	d017      	beq.n	800666c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	781a      	ldrb	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	6a39      	ldr	r1, [r7, #32]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fd53 	bl	800711c <I2C_WaitOnBTFFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00d      	beq.n	8006698 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	2b04      	cmp	r3, #4
 8006682:	d107      	bne.n	8006694 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006692:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e01a      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	2b00      	cmp	r3, #0
 800669e:	d194      	bne.n	80065ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	e000      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80066cc:	2302      	movs	r3, #2
  }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	00100002 	.word	0x00100002
 80066dc:	ffff0000 	.word	0xffff0000

080066e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08c      	sub	sp, #48	; 0x30
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	461a      	mov	r2, r3
 80066ec:	460b      	mov	r3, r1
 80066ee:	817b      	strh	r3, [r7, #10]
 80066f0:	4613      	mov	r3, r2
 80066f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066f8:	f7ff f8a8 	bl	800584c <HAL_GetTick>
 80066fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b20      	cmp	r3, #32
 8006708:	f040 824b 	bne.w	8006ba2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	2319      	movs	r3, #25
 8006712:	2201      	movs	r2, #1
 8006714:	497f      	ldr	r1, [pc, #508]	; (8006914 <HAL_I2C_Master_Receive+0x234>)
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 fb9e 	bl	8006e58 <I2C_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006722:	2302      	movs	r3, #2
 8006724:	e23e      	b.n	8006ba4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_I2C_Master_Receive+0x54>
 8006730:	2302      	movs	r3, #2
 8006732:	e237      	b.n	8006ba4 <HAL_I2C_Master_Receive+0x4c4>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b01      	cmp	r3, #1
 8006748:	d007      	beq.n	800675a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0201 	orr.w	r2, r2, #1
 8006758:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006768:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2222      	movs	r2, #34	; 0x22
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2210      	movs	r2, #16
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	893a      	ldrh	r2, [r7, #8]
 800678a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a5f      	ldr	r2, [pc, #380]	; (8006918 <HAL_I2C_Master_Receive+0x238>)
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800679c:	8979      	ldrh	r1, [r7, #10]
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fa8a 	bl	8006cbc <I2C_MasterRequestRead>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e1f8      	b.n	8006ba4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d113      	bne.n	80067e2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	61fb      	str	r3, [r7, #28]
 80067ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	e1cc      	b.n	8006b7c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d11e      	bne.n	8006828 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80067fa:	b672      	cpsid	i
}
 80067fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067fe:	2300      	movs	r3, #0
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006822:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006824:	b662      	cpsie	i
}
 8006826:	e035      	b.n	8006894 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682c:	2b02      	cmp	r3, #2
 800682e:	d11e      	bne.n	800686e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800683e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006840:	b672      	cpsid	i
}
 8006842:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006868:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800686a:	b662      	cpsie	i
}
 800686c:	e012      	b.n	8006894 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800687c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006894:	e172      	b.n	8006b7c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689a:	2b03      	cmp	r3, #3
 800689c:	f200 811f 	bhi.w	8006ade <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d123      	bne.n	80068f0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fc7d 	bl	80071ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e173      	b.n	8006ba4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068ee:	e145      	b.n	8006b7c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d152      	bne.n	800699e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	2200      	movs	r2, #0
 8006900:	4906      	ldr	r1, [pc, #24]	; (800691c <HAL_I2C_Master_Receive+0x23c>)
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 faa8 	bl	8006e58 <I2C_WaitOnFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d008      	beq.n	8006920 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e148      	b.n	8006ba4 <HAL_I2C_Master_Receive+0x4c4>
 8006912:	bf00      	nop
 8006914:	00100002 	.word	0x00100002
 8006918:	ffff0000 	.word	0xffff0000
 800691c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006920:	b672      	cpsid	i
}
 8006922:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006966:	b662      	cpsie	i
}
 8006968:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800699c:	e0ee      	b.n	8006b7c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	2200      	movs	r2, #0
 80069a6:	4981      	ldr	r1, [pc, #516]	; (8006bac <HAL_I2C_Master_Receive+0x4cc>)
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fa55 	bl	8006e58 <I2C_WaitOnFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0f5      	b.n	8006ba4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80069c8:	b672      	cpsid	i
}
 80069ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80069fe:	4b6c      	ldr	r3, [pc, #432]	; (8006bb0 <HAL_I2C_Master_Receive+0x4d0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	08db      	lsrs	r3, r3, #3
 8006a04:	4a6b      	ldr	r2, [pc, #428]	; (8006bb4 <HAL_I2C_Master_Receive+0x4d4>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	0a1a      	lsrs	r2, r3, #8
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	00da      	lsls	r2, r3, #3
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d118      	bne.n	8006a56 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	f043 0220 	orr.w	r2, r3, #32
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006a46:	b662      	cpsie	i
}
 8006a48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e0a6      	b.n	8006ba4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d1d9      	bne.n	8006a18 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006aa6:	b662      	cpsie	i
}
 8006aa8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006adc:	e04e      	b.n	8006b7c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fb62 	bl	80071ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e058      	b.n	8006ba4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d124      	bne.n	8006b7c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d107      	bne.n	8006b4a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b48:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691a      	ldr	r2, [r3, #16]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f47f ae88 	bne.w	8006896 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e000      	b.n	8006ba4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8006ba2:	2302      	movs	r3, #2
  }
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3728      	adds	r7, #40	; 0x28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	00010004 	.word	0x00010004
 8006bb0:	200000e0 	.word	0x200000e0
 8006bb4:	14f8b589 	.word	0x14f8b589

08006bb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	607a      	str	r2, [r7, #4]
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d006      	beq.n	8006be2 <I2C_MasterRequestWrite+0x2a>
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d003      	beq.n	8006be2 <I2C_MasterRequestWrite+0x2a>
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006be0:	d108      	bne.n	8006bf4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e00b      	b.n	8006c0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf8:	2b12      	cmp	r3, #18
 8006bfa:	d107      	bne.n	8006c0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f91d 	bl	8006e58 <I2C_WaitOnFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00d      	beq.n	8006c40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c32:	d103      	bne.n	8006c3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e035      	b.n	8006cac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c48:	d108      	bne.n	8006c5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c4a:	897b      	ldrh	r3, [r7, #10]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c58:	611a      	str	r2, [r3, #16]
 8006c5a:	e01b      	b.n	8006c94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c5c:	897b      	ldrh	r3, [r7, #10]
 8006c5e:	11db      	asrs	r3, r3, #7
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	f003 0306 	and.w	r3, r3, #6
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f063 030f 	orn	r3, r3, #15
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	490e      	ldr	r1, [pc, #56]	; (8006cb4 <I2C_MasterRequestWrite+0xfc>)
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 f966 	bl	8006f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e010      	b.n	8006cac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c8a:	897b      	ldrh	r3, [r7, #10]
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4907      	ldr	r1, [pc, #28]	; (8006cb8 <I2C_MasterRequestWrite+0x100>)
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f956 	bl	8006f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	00010008 	.word	0x00010008
 8006cb8:	00010002 	.word	0x00010002

08006cbc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	607a      	str	r2, [r7, #4]
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ce0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d006      	beq.n	8006cf6 <I2C_MasterRequestRead+0x3a>
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d003      	beq.n	8006cf6 <I2C_MasterRequestRead+0x3a>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cf4:	d108      	bne.n	8006d08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e00b      	b.n	8006d20 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	2b11      	cmp	r3, #17
 8006d0e:	d107      	bne.n	8006d20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f893 	bl	8006e58 <I2C_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00d      	beq.n	8006d54 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d46:	d103      	bne.n	8006d50 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e079      	b.n	8006e48 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d5c:	d108      	bne.n	8006d70 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d5e:	897b      	ldrh	r3, [r7, #10]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	f043 0301 	orr.w	r3, r3, #1
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	611a      	str	r2, [r3, #16]
 8006d6e:	e05f      	b.n	8006e30 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d70:	897b      	ldrh	r3, [r7, #10]
 8006d72:	11db      	asrs	r3, r3, #7
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	f003 0306 	and.w	r3, r3, #6
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	f063 030f 	orn	r3, r3, #15
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4930      	ldr	r1, [pc, #192]	; (8006e50 <I2C_MasterRequestRead+0x194>)
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f8dc 	bl	8006f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e054      	b.n	8006e48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	4929      	ldr	r1, [pc, #164]	; (8006e54 <I2C_MasterRequestRead+0x198>)
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f8cc 	bl	8006f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e044      	b.n	8006e48 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f831 	bl	8006e58 <I2C_WaitOnFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00d      	beq.n	8006e18 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0a:	d103      	bne.n	8006e14 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e12:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e017      	b.n	8006e48 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006e18:	897b      	ldrh	r3, [r7, #10]
 8006e1a:	11db      	asrs	r3, r3, #7
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 0306 	and.w	r3, r3, #6
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	f063 030e 	orn	r3, r3, #14
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	4907      	ldr	r1, [pc, #28]	; (8006e54 <I2C_MasterRequestRead+0x198>)
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 f888 	bl	8006f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	00010008 	.word	0x00010008
 8006e54:	00010002 	.word	0x00010002

08006e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	4613      	mov	r3, r2
 8006e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e68:	e048      	b.n	8006efc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e70:	d044      	beq.n	8006efc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e72:	f7fe fceb 	bl	800584c <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d302      	bcc.n	8006e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d139      	bne.n	8006efc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	0c1b      	lsrs	r3, r3, #16
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d10d      	bne.n	8006eae <I2C_WaitOnFlagUntilTimeout+0x56>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	43da      	mvns	r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2301      	moveq	r3, #1
 8006ea6:	2300      	movne	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	e00c      	b.n	8006ec8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	43da      	mvns	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d116      	bne.n	8006efc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee8:	f043 0220 	orr.w	r2, r3, #32
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e023      	b.n	8006f44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	0c1b      	lsrs	r3, r3, #16
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d10d      	bne.n	8006f22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	43da      	mvns	r2, r3
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4013      	ands	r3, r2
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	e00c      	b.n	8006f3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	43da      	mvns	r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d093      	beq.n	8006e6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f5a:	e071      	b.n	8007040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f6a:	d123      	bne.n	8006fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	f043 0204 	orr.w	r2, r3, #4
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e067      	b.n	8007084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fba:	d041      	beq.n	8007040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fbc:	f7fe fc46 	bl	800584c <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d302      	bcc.n	8006fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d136      	bne.n	8007040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	0c1b      	lsrs	r3, r3, #16
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d10c      	bne.n	8006ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	43da      	mvns	r2, r3
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bf14      	ite	ne
 8006fee:	2301      	movne	r3, #1
 8006ff0:	2300      	moveq	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	e00b      	b.n	800700e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	43da      	mvns	r2, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4013      	ands	r3, r2
 8007002:	b29b      	uxth	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	bf14      	ite	ne
 8007008:	2301      	movne	r3, #1
 800700a:	2300      	moveq	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d016      	beq.n	8007040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	f043 0220 	orr.w	r2, r3, #32
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e021      	b.n	8007084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	0c1b      	lsrs	r3, r3, #16
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b01      	cmp	r3, #1
 8007048:	d10c      	bne.n	8007064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	43da      	mvns	r2, r3
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	4013      	ands	r3, r2
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	bf14      	ite	ne
 800705c:	2301      	movne	r3, #1
 800705e:	2300      	moveq	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	e00b      	b.n	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	43da      	mvns	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4013      	ands	r3, r2
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	bf14      	ite	ne
 8007076:	2301      	movne	r3, #1
 8007078:	2300      	moveq	r3, #0
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	f47f af6d 	bne.w	8006f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007098:	e034      	b.n	8007104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f8e3 	bl	8007266 <I2C_IsAcknowledgeFailed>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e034      	b.n	8007114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d028      	beq.n	8007104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b2:	f7fe fbcb 	bl	800584c <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d302      	bcc.n	80070c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d11d      	bne.n	8007104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d016      	beq.n	8007104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	f043 0220 	orr.w	r2, r3, #32
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e007      	b.n	8007114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	d1c3      	bne.n	800709a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007128:	e034      	b.n	8007194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f89b 	bl	8007266 <I2C_IsAcknowledgeFailed>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e034      	b.n	80071a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007140:	d028      	beq.n	8007194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007142:	f7fe fb83 	bl	800584c <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	429a      	cmp	r2, r3
 8007150:	d302      	bcc.n	8007158 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d11d      	bne.n	8007194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b04      	cmp	r3, #4
 8007164:	d016      	beq.n	8007194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	f043 0220 	orr.w	r2, r3, #32
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e007      	b.n	80071a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d1c3      	bne.n	800712a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071b8:	e049      	b.n	800724e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	2b10      	cmp	r3, #16
 80071c6:	d119      	bne.n	80071fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0210 	mvn.w	r2, #16
 80071d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e030      	b.n	800725e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fc:	f7fe fb26 	bl	800584c <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	429a      	cmp	r2, r3
 800720a:	d302      	bcc.n	8007212 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d11d      	bne.n	800724e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	d016      	beq.n	800724e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2220      	movs	r2, #32
 800722a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f043 0220 	orr.w	r2, r3, #32
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e007      	b.n	800725e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d1ae      	bne.n	80071ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727c:	d11b      	bne.n	80072b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007286:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	f043 0204 	orr.w	r2, r3, #4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e000      	b.n	80072b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr
	...

080072c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e272      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8087 	beq.w	80073f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072e4:	4b92      	ldr	r3, [pc, #584]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f003 030c 	and.w	r3, r3, #12
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d00c      	beq.n	800730a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80072f0:	4b8f      	ldr	r3, [pc, #572]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f003 030c 	and.w	r3, r3, #12
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d112      	bne.n	8007322 <HAL_RCC_OscConfig+0x5e>
 80072fc:	4b8c      	ldr	r3, [pc, #560]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007308:	d10b      	bne.n	8007322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800730a:	4b89      	ldr	r3, [pc, #548]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d06c      	beq.n	80073f0 <HAL_RCC_OscConfig+0x12c>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d168      	bne.n	80073f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e24c      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732a:	d106      	bne.n	800733a <HAL_RCC_OscConfig+0x76>
 800732c:	4b80      	ldr	r3, [pc, #512]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a7f      	ldr	r2, [pc, #508]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	e02e      	b.n	8007398 <HAL_RCC_OscConfig+0xd4>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10c      	bne.n	800735c <HAL_RCC_OscConfig+0x98>
 8007342:	4b7b      	ldr	r3, [pc, #492]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a7a      	ldr	r2, [pc, #488]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	4b78      	ldr	r3, [pc, #480]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a77      	ldr	r2, [pc, #476]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	e01d      	b.n	8007398 <HAL_RCC_OscConfig+0xd4>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007364:	d10c      	bne.n	8007380 <HAL_RCC_OscConfig+0xbc>
 8007366:	4b72      	ldr	r3, [pc, #456]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a71      	ldr	r2, [pc, #452]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 800736c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	4b6f      	ldr	r3, [pc, #444]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a6e      	ldr	r2, [pc, #440]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	e00b      	b.n	8007398 <HAL_RCC_OscConfig+0xd4>
 8007380:	4b6b      	ldr	r3, [pc, #428]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a6a      	ldr	r2, [pc, #424]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	4b68      	ldr	r3, [pc, #416]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a67      	ldr	r2, [pc, #412]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007396:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d013      	beq.n	80073c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a0:	f7fe fa54 	bl	800584c <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073a8:	f7fe fa50 	bl	800584c <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b64      	cmp	r3, #100	; 0x64
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e200      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ba:	4b5d      	ldr	r3, [pc, #372]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0f0      	beq.n	80073a8 <HAL_RCC_OscConfig+0xe4>
 80073c6:	e014      	b.n	80073f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c8:	f7fe fa40 	bl	800584c <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073d0:	f7fe fa3c 	bl	800584c <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b64      	cmp	r3, #100	; 0x64
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e1ec      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073e2:	4b53      	ldr	r3, [pc, #332]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1f0      	bne.n	80073d0 <HAL_RCC_OscConfig+0x10c>
 80073ee:	e000      	b.n	80073f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d063      	beq.n	80074c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073fe:	4b4c      	ldr	r3, [pc, #304]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f003 030c 	and.w	r3, r3, #12
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00b      	beq.n	8007422 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800740a:	4b49      	ldr	r3, [pc, #292]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f003 030c 	and.w	r3, r3, #12
 8007412:	2b08      	cmp	r3, #8
 8007414:	d11c      	bne.n	8007450 <HAL_RCC_OscConfig+0x18c>
 8007416:	4b46      	ldr	r3, [pc, #280]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d116      	bne.n	8007450 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007422:	4b43      	ldr	r3, [pc, #268]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <HAL_RCC_OscConfig+0x176>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d001      	beq.n	800743a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e1c0      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743a:	4b3d      	ldr	r3, [pc, #244]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	4939      	ldr	r1, [pc, #228]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 800744a:	4313      	orrs	r3, r2
 800744c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800744e:	e03a      	b.n	80074c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d020      	beq.n	800749a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007458:	4b36      	ldr	r3, [pc, #216]	; (8007534 <HAL_RCC_OscConfig+0x270>)
 800745a:	2201      	movs	r2, #1
 800745c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800745e:	f7fe f9f5 	bl	800584c <HAL_GetTick>
 8007462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007464:	e008      	b.n	8007478 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007466:	f7fe f9f1 	bl	800584c <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e1a1      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007478:	4b2d      	ldr	r3, [pc, #180]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007484:	4b2a      	ldr	r3, [pc, #168]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4927      	ldr	r1, [pc, #156]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 8007494:	4313      	orrs	r3, r2
 8007496:	600b      	str	r3, [r1, #0]
 8007498:	e015      	b.n	80074c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800749a:	4b26      	ldr	r3, [pc, #152]	; (8007534 <HAL_RCC_OscConfig+0x270>)
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a0:	f7fe f9d4 	bl	800584c <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074a8:	f7fe f9d0 	bl	800584c <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e180      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ba:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f0      	bne.n	80074a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d03a      	beq.n	8007548 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d019      	beq.n	800750e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074da:	4b17      	ldr	r3, [pc, #92]	; (8007538 <HAL_RCC_OscConfig+0x274>)
 80074dc:	2201      	movs	r2, #1
 80074de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074e0:	f7fe f9b4 	bl	800584c <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074e8:	f7fe f9b0 	bl	800584c <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e160      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074fa:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <HAL_RCC_OscConfig+0x26c>)
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0f0      	beq.n	80074e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007506:	2001      	movs	r0, #1
 8007508:	f000 faba 	bl	8007a80 <RCC_Delay>
 800750c:	e01c      	b.n	8007548 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800750e:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <HAL_RCC_OscConfig+0x274>)
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007514:	f7fe f99a 	bl	800584c <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800751a:	e00f      	b.n	800753c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800751c:	f7fe f996 	bl	800584c <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d908      	bls.n	800753c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e146      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
 800752e:	bf00      	nop
 8007530:	40021000 	.word	0x40021000
 8007534:	42420000 	.word	0x42420000
 8007538:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800753c:	4b92      	ldr	r3, [pc, #584]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e9      	bne.n	800751c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80a6 	beq.w	80076a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007556:	2300      	movs	r3, #0
 8007558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800755a:	4b8b      	ldr	r3, [pc, #556]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10d      	bne.n	8007582 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007566:	4b88      	ldr	r3, [pc, #544]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	4a87      	ldr	r2, [pc, #540]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 800756c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007570:	61d3      	str	r3, [r2, #28]
 8007572:	4b85      	ldr	r3, [pc, #532]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800757a:	60bb      	str	r3, [r7, #8]
 800757c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800757e:	2301      	movs	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007582:	4b82      	ldr	r3, [pc, #520]	; (800778c <HAL_RCC_OscConfig+0x4c8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758a:	2b00      	cmp	r3, #0
 800758c:	d118      	bne.n	80075c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800758e:	4b7f      	ldr	r3, [pc, #508]	; (800778c <HAL_RCC_OscConfig+0x4c8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a7e      	ldr	r2, [pc, #504]	; (800778c <HAL_RCC_OscConfig+0x4c8>)
 8007594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800759a:	f7fe f957 	bl	800584c <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a2:	f7fe f953 	bl	800584c <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b64      	cmp	r3, #100	; 0x64
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e103      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b4:	4b75      	ldr	r3, [pc, #468]	; (800778c <HAL_RCC_OscConfig+0x4c8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0f0      	beq.n	80075a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d106      	bne.n	80075d6 <HAL_RCC_OscConfig+0x312>
 80075c8:	4b6f      	ldr	r3, [pc, #444]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	4a6e      	ldr	r2, [pc, #440]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	6213      	str	r3, [r2, #32]
 80075d4:	e02d      	b.n	8007632 <HAL_RCC_OscConfig+0x36e>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10c      	bne.n	80075f8 <HAL_RCC_OscConfig+0x334>
 80075de:	4b6a      	ldr	r3, [pc, #424]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	4a69      	ldr	r2, [pc, #420]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 80075e4:	f023 0301 	bic.w	r3, r3, #1
 80075e8:	6213      	str	r3, [r2, #32]
 80075ea:	4b67      	ldr	r3, [pc, #412]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	4a66      	ldr	r2, [pc, #408]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 80075f0:	f023 0304 	bic.w	r3, r3, #4
 80075f4:	6213      	str	r3, [r2, #32]
 80075f6:	e01c      	b.n	8007632 <HAL_RCC_OscConfig+0x36e>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b05      	cmp	r3, #5
 80075fe:	d10c      	bne.n	800761a <HAL_RCC_OscConfig+0x356>
 8007600:	4b61      	ldr	r3, [pc, #388]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	4a60      	ldr	r2, [pc, #384]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007606:	f043 0304 	orr.w	r3, r3, #4
 800760a:	6213      	str	r3, [r2, #32]
 800760c:	4b5e      	ldr	r3, [pc, #376]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	4a5d      	ldr	r2, [pc, #372]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007612:	f043 0301 	orr.w	r3, r3, #1
 8007616:	6213      	str	r3, [r2, #32]
 8007618:	e00b      	b.n	8007632 <HAL_RCC_OscConfig+0x36e>
 800761a:	4b5b      	ldr	r3, [pc, #364]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	4a5a      	ldr	r2, [pc, #360]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	6213      	str	r3, [r2, #32]
 8007626:	4b58      	ldr	r3, [pc, #352]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	4a57      	ldr	r2, [pc, #348]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 800762c:	f023 0304 	bic.w	r3, r3, #4
 8007630:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d015      	beq.n	8007666 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800763a:	f7fe f907 	bl	800584c <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007640:	e00a      	b.n	8007658 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007642:	f7fe f903 	bl	800584c <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007650:	4293      	cmp	r3, r2
 8007652:	d901      	bls.n	8007658 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e0b1      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007658:	4b4b      	ldr	r3, [pc, #300]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0ee      	beq.n	8007642 <HAL_RCC_OscConfig+0x37e>
 8007664:	e014      	b.n	8007690 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007666:	f7fe f8f1 	bl	800584c <HAL_GetTick>
 800766a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800766c:	e00a      	b.n	8007684 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766e:	f7fe f8ed 	bl	800584c <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	f241 3288 	movw	r2, #5000	; 0x1388
 800767c:	4293      	cmp	r3, r2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e09b      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007684:	4b40      	ldr	r3, [pc, #256]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1ee      	bne.n	800766e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d105      	bne.n	80076a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007696:	4b3c      	ldr	r3, [pc, #240]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	4a3b      	ldr	r2, [pc, #236]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 800769c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8087 	beq.w	80077ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076ac:	4b36      	ldr	r3, [pc, #216]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f003 030c 	and.w	r3, r3, #12
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d061      	beq.n	800777c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d146      	bne.n	800774e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076c0:	4b33      	ldr	r3, [pc, #204]	; (8007790 <HAL_RCC_OscConfig+0x4cc>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c6:	f7fe f8c1 	bl	800584c <HAL_GetTick>
 80076ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076cc:	e008      	b.n	80076e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ce:	f7fe f8bd 	bl	800584c <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d901      	bls.n	80076e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e06d      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076e0:	4b29      	ldr	r3, [pc, #164]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1f0      	bne.n	80076ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f4:	d108      	bne.n	8007708 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80076f6:	4b24      	ldr	r3, [pc, #144]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	4921      	ldr	r1, [pc, #132]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007704:	4313      	orrs	r3, r2
 8007706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007708:	4b1f      	ldr	r3, [pc, #124]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a19      	ldr	r1, [r3, #32]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	430b      	orrs	r3, r1
 800771a:	491b      	ldr	r1, [pc, #108]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 800771c:	4313      	orrs	r3, r2
 800771e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007720:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <HAL_RCC_OscConfig+0x4cc>)
 8007722:	2201      	movs	r2, #1
 8007724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007726:	f7fe f891 	bl	800584c <HAL_GetTick>
 800772a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800772c:	e008      	b.n	8007740 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800772e:	f7fe f88d 	bl	800584c <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d901      	bls.n	8007740 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e03d      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007740:	4b11      	ldr	r3, [pc, #68]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0f0      	beq.n	800772e <HAL_RCC_OscConfig+0x46a>
 800774c:	e035      	b.n	80077ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800774e:	4b10      	ldr	r3, [pc, #64]	; (8007790 <HAL_RCC_OscConfig+0x4cc>)
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007754:	f7fe f87a 	bl	800584c <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800775a:	e008      	b.n	800776e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800775c:	f7fe f876 	bl	800584c <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d901      	bls.n	800776e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e026      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800776e:	4b06      	ldr	r3, [pc, #24]	; (8007788 <HAL_RCC_OscConfig+0x4c4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1f0      	bne.n	800775c <HAL_RCC_OscConfig+0x498>
 800777a:	e01e      	b.n	80077ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d107      	bne.n	8007794 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e019      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
 8007788:	40021000 	.word	0x40021000
 800778c:	40007000 	.word	0x40007000
 8007790:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <HAL_RCC_OscConfig+0x500>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d106      	bne.n	80077b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d001      	beq.n	80077ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40021000 	.word	0x40021000

080077c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e0d0      	b.n	800797e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077dc:	4b6a      	ldr	r3, [pc, #424]	; (8007988 <HAL_RCC_ClockConfig+0x1c0>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d910      	bls.n	800780c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ea:	4b67      	ldr	r3, [pc, #412]	; (8007988 <HAL_RCC_ClockConfig+0x1c0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f023 0207 	bic.w	r2, r3, #7
 80077f2:	4965      	ldr	r1, [pc, #404]	; (8007988 <HAL_RCC_ClockConfig+0x1c0>)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fa:	4b63      	ldr	r3, [pc, #396]	; (8007988 <HAL_RCC_ClockConfig+0x1c0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d001      	beq.n	800780c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e0b8      	b.n	800797e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d020      	beq.n	800785a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007824:	4b59      	ldr	r3, [pc, #356]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	4a58      	ldr	r2, [pc, #352]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 800782a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800782e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800783c:	4b53      	ldr	r3, [pc, #332]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4a52      	ldr	r2, [pc, #328]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007842:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007846:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007848:	4b50      	ldr	r3, [pc, #320]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	494d      	ldr	r1, [pc, #308]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007856:	4313      	orrs	r3, r2
 8007858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d040      	beq.n	80078e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d107      	bne.n	800787e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800786e:	4b47      	ldr	r3, [pc, #284]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d115      	bne.n	80078a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e07f      	b.n	800797e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d107      	bne.n	8007896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007886:	4b41      	ldr	r3, [pc, #260]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e073      	b.n	800797e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007896:	4b3d      	ldr	r3, [pc, #244]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e06b      	b.n	800797e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078a6:	4b39      	ldr	r3, [pc, #228]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f023 0203 	bic.w	r2, r3, #3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	4936      	ldr	r1, [pc, #216]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078b8:	f7fd ffc8 	bl	800584c <HAL_GetTick>
 80078bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078be:	e00a      	b.n	80078d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078c0:	f7fd ffc4 	bl	800584c <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e053      	b.n	800797e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d6:	4b2d      	ldr	r3, [pc, #180]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f003 020c 	and.w	r2, r3, #12
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d1eb      	bne.n	80078c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078e8:	4b27      	ldr	r3, [pc, #156]	; (8007988 <HAL_RCC_ClockConfig+0x1c0>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d210      	bcs.n	8007918 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078f6:	4b24      	ldr	r3, [pc, #144]	; (8007988 <HAL_RCC_ClockConfig+0x1c0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f023 0207 	bic.w	r2, r3, #7
 80078fe:	4922      	ldr	r1, [pc, #136]	; (8007988 <HAL_RCC_ClockConfig+0x1c0>)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	4313      	orrs	r3, r2
 8007904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007906:	4b20      	ldr	r3, [pc, #128]	; (8007988 <HAL_RCC_ClockConfig+0x1c0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d001      	beq.n	8007918 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e032      	b.n	800797e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d008      	beq.n	8007936 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007924:	4b19      	ldr	r3, [pc, #100]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	4916      	ldr	r1, [pc, #88]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007932:	4313      	orrs	r3, r2
 8007934:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b00      	cmp	r3, #0
 8007940:	d009      	beq.n	8007956 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007942:	4b12      	ldr	r3, [pc, #72]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	490e      	ldr	r1, [pc, #56]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 8007952:	4313      	orrs	r3, r2
 8007954:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007956:	f000 f821 	bl	800799c <HAL_RCC_GetSysClockFreq>
 800795a:	4602      	mov	r2, r0
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HAL_RCC_ClockConfig+0x1c4>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	091b      	lsrs	r3, r3, #4
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	490a      	ldr	r1, [pc, #40]	; (8007990 <HAL_RCC_ClockConfig+0x1c8>)
 8007968:	5ccb      	ldrb	r3, [r1, r3]
 800796a:	fa22 f303 	lsr.w	r3, r2, r3
 800796e:	4a09      	ldr	r2, [pc, #36]	; (8007994 <HAL_RCC_ClockConfig+0x1cc>)
 8007970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007972:	4b09      	ldr	r3, [pc, #36]	; (8007998 <HAL_RCC_ClockConfig+0x1d0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f7fd ff26 	bl	80057c8 <HAL_InitTick>

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	40022000 	.word	0x40022000
 800798c:	40021000 	.word	0x40021000
 8007990:	0800cd24 	.word	0x0800cd24
 8007994:	200000e0 	.word	0x200000e0
 8007998:	200000e4 	.word	0x200000e4

0800799c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	2300      	movs	r3, #0
 80079ac:	617b      	str	r3, [r7, #20]
 80079ae:	2300      	movs	r3, #0
 80079b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80079b6:	4b1e      	ldr	r3, [pc, #120]	; (8007a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f003 030c 	and.w	r3, r3, #12
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d002      	beq.n	80079cc <HAL_RCC_GetSysClockFreq+0x30>
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	d003      	beq.n	80079d2 <HAL_RCC_GetSysClockFreq+0x36>
 80079ca:	e027      	b.n	8007a1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80079cc:	4b19      	ldr	r3, [pc, #100]	; (8007a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80079ce:	613b      	str	r3, [r7, #16]
      break;
 80079d0:	e027      	b.n	8007a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	0c9b      	lsrs	r3, r3, #18
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <HAL_RCC_GetSysClockFreq+0x9c>)
 80079dc:	5cd3      	ldrb	r3, [r2, r3]
 80079de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d010      	beq.n	8007a0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079ea:	4b11      	ldr	r3, [pc, #68]	; (8007a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	0c5b      	lsrs	r3, r3, #17
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	4a11      	ldr	r2, [pc, #68]	; (8007a3c <HAL_RCC_GetSysClockFreq+0xa0>)
 80079f6:	5cd3      	ldrb	r3, [r2, r3]
 80079f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a0d      	ldr	r2, [pc, #52]	; (8007a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80079fe:	fb03 f202 	mul.w	r2, r3, r2
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]
 8007a0a:	e004      	b.n	8007a16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a0c      	ldr	r2, [pc, #48]	; (8007a40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a10:	fb02 f303 	mul.w	r3, r2, r3
 8007a14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	613b      	str	r3, [r7, #16]
      break;
 8007a1a:	e002      	b.n	8007a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a1c:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a1e:	613b      	str	r3, [r7, #16]
      break;
 8007a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a22:	693b      	ldr	r3, [r7, #16]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bc80      	pop	{r7}
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	40021000 	.word	0x40021000
 8007a34:	007a1200 	.word	0x007a1200
 8007a38:	0800cd3c 	.word	0x0800cd3c
 8007a3c:	0800cd4c 	.word	0x0800cd4c
 8007a40:	003d0900 	.word	0x003d0900

08007a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a48:	4b02      	ldr	r3, [pc, #8]	; (8007a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bc80      	pop	{r7}
 8007a52:	4770      	bx	lr
 8007a54:	200000e0 	.word	0x200000e0

08007a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a5c:	f7ff fff2 	bl	8007a44 <HAL_RCC_GetHCLKFreq>
 8007a60:	4602      	mov	r2, r0
 8007a62:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	4903      	ldr	r1, [pc, #12]	; (8007a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a6e:	5ccb      	ldrb	r3, [r1, r3]
 8007a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	40021000 	.word	0x40021000
 8007a7c:	0800cd34 	.word	0x0800cd34

08007a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007a88:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <RCC_Delay+0x34>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a0a      	ldr	r2, [pc, #40]	; (8007ab8 <RCC_Delay+0x38>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	0a5b      	lsrs	r3, r3, #9
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	fb02 f303 	mul.w	r3, r2, r3
 8007a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007a9c:	bf00      	nop
  }
  while (Delay --);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	1e5a      	subs	r2, r3, #1
 8007aa2:	60fa      	str	r2, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1f9      	bne.n	8007a9c <RCC_Delay+0x1c>
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr
 8007ab4:	200000e0 	.word	0x200000e0
 8007ab8:	10624dd3 	.word	0x10624dd3

08007abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e076      	b.n	8007bbc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d108      	bne.n	8007ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ade:	d009      	beq.n	8007af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	61da      	str	r2, [r3, #28]
 8007ae6:	e005      	b.n	8007af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fd fc18 	bl	8005344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b46:	431a      	orrs	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b78:	ea42 0103 	orr.w	r1, r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	0c1a      	lsrs	r2, r3, #16
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f002 0204 	and.w	r2, r2, #4
 8007b9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	69da      	ldr	r2, [r3, #28]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007baa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	603b      	str	r3, [r7, #0]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_SPI_Transmit+0x22>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e12d      	b.n	8007e42 <HAL_SPI_Transmit+0x27e>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bee:	f7fd fe2d 	bl	800584c <HAL_GetTick>
 8007bf2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d002      	beq.n	8007c0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c04:	2302      	movs	r3, #2
 8007c06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c08:	e116      	b.n	8007e38 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <HAL_SPI_Transmit+0x52>
 8007c10:	88fb      	ldrh	r3, [r7, #6]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d102      	bne.n	8007c1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c1a:	e10d      	b.n	8007e38 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2203      	movs	r2, #3
 8007c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	88fa      	ldrh	r2, [r7, #6]
 8007c34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	88fa      	ldrh	r2, [r7, #6]
 8007c3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c62:	d10f      	bne.n	8007c84 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8e:	2b40      	cmp	r3, #64	; 0x40
 8007c90:	d007      	beq.n	8007ca2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ca0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007caa:	d14f      	bne.n	8007d4c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <HAL_SPI_Transmit+0xf6>
 8007cb4:	8afb      	ldrh	r3, [r7, #22]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d142      	bne.n	8007d40 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	881a      	ldrh	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	1c9a      	adds	r2, r3, #2
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007cde:	e02f      	b.n	8007d40 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d112      	bne.n	8007d14 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf2:	881a      	ldrh	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfe:	1c9a      	adds	r2, r3, #2
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d12:	e015      	b.n	8007d40 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d14:	f7fd fd9a 	bl	800584c <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d803      	bhi.n	8007d2c <HAL_SPI_Transmit+0x168>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d102      	bne.n	8007d32 <HAL_SPI_Transmit+0x16e>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007d3e:	e07b      	b.n	8007e38 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1ca      	bne.n	8007ce0 <HAL_SPI_Transmit+0x11c>
 8007d4a:	e050      	b.n	8007dee <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <HAL_SPI_Transmit+0x196>
 8007d54:	8afb      	ldrh	r3, [r7, #22]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d144      	bne.n	8007de4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	330c      	adds	r3, #12
 8007d64:	7812      	ldrb	r2, [r2, #0]
 8007d66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007d80:	e030      	b.n	8007de4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d113      	bne.n	8007db8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	7812      	ldrb	r2, [r2, #0]
 8007d9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	86da      	strh	r2, [r3, #54]	; 0x36
 8007db6:	e015      	b.n	8007de4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007db8:	f7fd fd48 	bl	800584c <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d803      	bhi.n	8007dd0 <HAL_SPI_Transmit+0x20c>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d102      	bne.n	8007dd6 <HAL_SPI_Transmit+0x212>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007de2:	e029      	b.n	8007e38 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1c9      	bne.n	8007d82 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f8b2 	bl	8007f5c <SPI_EndRxTxTransaction>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2220      	movs	r2, #32
 8007e02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	613b      	str	r3, [r7, #16]
 8007e20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	77fb      	strb	r3, [r7, #31]
 8007e2e:	e003      	b.n	8007e38 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e40:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3720      	adds	r7, #32
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e5c:	f7fd fcf6 	bl	800584c <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	4413      	add	r3, r2
 8007e6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e6c:	f7fd fcee 	bl	800584c <HAL_GetTick>
 8007e70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e72:	4b39      	ldr	r3, [pc, #228]	; (8007f58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	015b      	lsls	r3, r3, #5
 8007e78:	0d1b      	lsrs	r3, r3, #20
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	fb02 f303 	mul.w	r3, r2, r3
 8007e80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e82:	e054      	b.n	8007f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8a:	d050      	beq.n	8007f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e8c:	f7fd fcde 	bl	800584c <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d902      	bls.n	8007ea2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d13d      	bne.n	8007f1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007eb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eba:	d111      	bne.n	8007ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec4:	d004      	beq.n	8007ed0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ece:	d107      	bne.n	8007ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ede:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee8:	d10f      	bne.n	8007f0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e017      	b.n	8007f4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	4013      	ands	r3, r2
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	bf0c      	ite	eq
 8007f3e:	2301      	moveq	r3, #1
 8007f40:	2300      	movne	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	461a      	mov	r2, r3
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d19b      	bne.n	8007e84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	200000e0 	.word	0x200000e0

08007f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af02      	add	r7, sp, #8
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2180      	movs	r1, #128	; 0x80
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7ff ff6a 	bl	8007e4c <SPI_WaitFlagStateUntilTimeout>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f82:	f043 0220 	orr.w	r2, r3, #32
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e000      	b.n	8007f90 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e041      	b.n	800802e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fd f9fe 	bl	80053c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	f000 fbbc 	bl	8008754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b01      	cmp	r3, #1
 800804a:	d001      	beq.n	8008050 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e032      	b.n	80080b6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a18      	ldr	r2, [pc, #96]	; (80080c0 <HAL_TIM_Base_Start+0x88>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00e      	beq.n	8008080 <HAL_TIM_Base_Start+0x48>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806a:	d009      	beq.n	8008080 <HAL_TIM_Base_Start+0x48>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a14      	ldr	r2, [pc, #80]	; (80080c4 <HAL_TIM_Base_Start+0x8c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <HAL_TIM_Base_Start+0x48>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a13      	ldr	r2, [pc, #76]	; (80080c8 <HAL_TIM_Base_Start+0x90>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d111      	bne.n	80080a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b06      	cmp	r3, #6
 8008090:	d010      	beq.n	80080b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f042 0201 	orr.w	r2, r2, #1
 80080a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080a2:	e007      	b.n	80080b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0201 	orr.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr
 80080c0:	40012c00 	.word	0x40012c00
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800

080080cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e093      	b.n	8008208 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7fd f97f 	bl	80053f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2202      	movs	r2, #2
 80080fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6812      	ldr	r2, [r2, #0]
 800810c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008110:	f023 0307 	bic.w	r3, r3, #7
 8008114:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3304      	adds	r3, #4
 800811e:	4619      	mov	r1, r3
 8008120:	4610      	mov	r0, r2
 8008122:	f000 fb17 	bl	8008754 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	4313      	orrs	r3, r2
 8008146:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800814e:	f023 0303 	bic.w	r3, r3, #3
 8008152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	021b      	lsls	r3, r3, #8
 800815e:	4313      	orrs	r3, r2
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	4313      	orrs	r3, r2
 8008164:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800816c:	f023 030c 	bic.w	r3, r3, #12
 8008170:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800817c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	4313      	orrs	r3, r2
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	011a      	lsls	r2, r3, #4
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	031b      	lsls	r3, r3, #12
 800819c:	4313      	orrs	r3, r2
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80081aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	4313      	orrs	r3, r2
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008220:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008228:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008230:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008238:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d110      	bne.n	8008262 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d102      	bne.n	800824c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008246:	7b7b      	ldrb	r3, [r7, #13]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d001      	beq.n	8008250 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e089      	b.n	8008364 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008260:	e031      	b.n	80082c6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b04      	cmp	r3, #4
 8008266:	d110      	bne.n	800828a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d102      	bne.n	8008274 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800826e:	7b3b      	ldrb	r3, [r7, #12]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d001      	beq.n	8008278 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e075      	b.n	8008364 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008288:	e01d      	b.n	80082c6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d108      	bne.n	80082a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d105      	bne.n	80082a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008296:	7b7b      	ldrb	r3, [r7, #13]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d102      	bne.n	80082a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800829c:	7b3b      	ldrb	r3, [r7, #12]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d001      	beq.n	80082a6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e05e      	b.n	8008364 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2202      	movs	r2, #2
 80082aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d010      	beq.n	80082f4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80082d2:	e01f      	b.n	8008314 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2201      	movs	r2, #1
 80082da:	2100      	movs	r1, #0
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fb31 	bl	8008944 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 0202 	orr.w	r2, r2, #2
 80082f0:	60da      	str	r2, [r3, #12]
      break;
 80082f2:	e02e      	b.n	8008352 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2201      	movs	r2, #1
 80082fa:	2104      	movs	r1, #4
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fb21 	bl	8008944 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0204 	orr.w	r2, r2, #4
 8008310:	60da      	str	r2, [r3, #12]
      break;
 8008312:	e01e      	b.n	8008352 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2201      	movs	r2, #1
 800831a:	2100      	movs	r1, #0
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fb11 	bl	8008944 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2201      	movs	r2, #1
 8008328:	2104      	movs	r1, #4
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fb0a 	bl	8008944 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0202 	orr.w	r2, r2, #2
 800833e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0204 	orr.w	r2, r2, #4
 800834e:	60da      	str	r2, [r3, #12]
      break;
 8008350:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f042 0201 	orr.w	r2, r2, #1
 8008360:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b02      	cmp	r3, #2
 8008380:	d122      	bne.n	80083c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f003 0302 	and.w	r3, r3, #2
 800838c:	2b02      	cmp	r3, #2
 800838e:	d11b      	bne.n	80083c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f06f 0202 	mvn.w	r2, #2
 8008398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f003 0303 	and.w	r3, r3, #3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7fa fdca 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 80083b4:	e005      	b.n	80083c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f9b0 	bl	800871c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f9b6 	bl	800872e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d122      	bne.n	800841c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d11b      	bne.n	800841c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f06f 0204 	mvn.w	r2, #4
 80083ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2202      	movs	r2, #2
 80083f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7fa fda0 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 8008408:	e005      	b.n	8008416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f986 	bl	800871c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f98c 	bl	800872e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f003 0308 	and.w	r3, r3, #8
 8008426:	2b08      	cmp	r3, #8
 8008428:	d122      	bne.n	8008470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b08      	cmp	r3, #8
 8008436:	d11b      	bne.n	8008470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f06f 0208 	mvn.w	r2, #8
 8008440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2204      	movs	r2, #4
 8008446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fa fd76 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 800845c:	e005      	b.n	800846a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f95c 	bl	800871c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f962 	bl	800872e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b10      	cmp	r3, #16
 800847c:	d122      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f003 0310 	and.w	r3, r3, #16
 8008488:	2b10      	cmp	r3, #16
 800848a:	d11b      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f06f 0210 	mvn.w	r2, #16
 8008494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2208      	movs	r2, #8
 800849a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7fa fd4c 	bl	8002f48 <HAL_TIM_IC_CaptureCallback>
 80084b0:	e005      	b.n	80084be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f932 	bl	800871c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f938 	bl	800872e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d10e      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d107      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0201 	mvn.w	r2, #1
 80084e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f90d 	bl	800870a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fa:	2b80      	cmp	r3, #128	; 0x80
 80084fc:	d10e      	bne.n	800851c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008508:	2b80      	cmp	r3, #128	; 0x80
 800850a:	d107      	bne.n	800851c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa9f 	bl	8008a5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008526:	2b40      	cmp	r3, #64	; 0x40
 8008528:	d10e      	bne.n	8008548 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008534:	2b40      	cmp	r3, #64	; 0x40
 8008536:	d107      	bne.n	8008548 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f8fc 	bl	8008740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b20      	cmp	r3, #32
 8008554:	d10e      	bne.n	8008574 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b20      	cmp	r3, #32
 8008562:	d107      	bne.n	8008574 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f06f 0220 	mvn.w	r2, #32
 800856c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa6a 	bl	8008a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008574:	bf00      	nop
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008590:	2b01      	cmp	r3, #1
 8008592:	d101      	bne.n	8008598 <HAL_TIM_ConfigClockSource+0x1c>
 8008594:	2302      	movs	r3, #2
 8008596:	e0b4      	b.n	8008702 <HAL_TIM_ConfigClockSource+0x186>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d0:	d03e      	beq.n	8008650 <HAL_TIM_ConfigClockSource+0xd4>
 80085d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d6:	f200 8087 	bhi.w	80086e8 <HAL_TIM_ConfigClockSource+0x16c>
 80085da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085de:	f000 8086 	beq.w	80086ee <HAL_TIM_ConfigClockSource+0x172>
 80085e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e6:	d87f      	bhi.n	80086e8 <HAL_TIM_ConfigClockSource+0x16c>
 80085e8:	2b70      	cmp	r3, #112	; 0x70
 80085ea:	d01a      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0xa6>
 80085ec:	2b70      	cmp	r3, #112	; 0x70
 80085ee:	d87b      	bhi.n	80086e8 <HAL_TIM_ConfigClockSource+0x16c>
 80085f0:	2b60      	cmp	r3, #96	; 0x60
 80085f2:	d050      	beq.n	8008696 <HAL_TIM_ConfigClockSource+0x11a>
 80085f4:	2b60      	cmp	r3, #96	; 0x60
 80085f6:	d877      	bhi.n	80086e8 <HAL_TIM_ConfigClockSource+0x16c>
 80085f8:	2b50      	cmp	r3, #80	; 0x50
 80085fa:	d03c      	beq.n	8008676 <HAL_TIM_ConfigClockSource+0xfa>
 80085fc:	2b50      	cmp	r3, #80	; 0x50
 80085fe:	d873      	bhi.n	80086e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008600:	2b40      	cmp	r3, #64	; 0x40
 8008602:	d058      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0x13a>
 8008604:	2b40      	cmp	r3, #64	; 0x40
 8008606:	d86f      	bhi.n	80086e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008608:	2b30      	cmp	r3, #48	; 0x30
 800860a:	d064      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0x15a>
 800860c:	2b30      	cmp	r3, #48	; 0x30
 800860e:	d86b      	bhi.n	80086e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008610:	2b20      	cmp	r3, #32
 8008612:	d060      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008614:	2b20      	cmp	r3, #32
 8008616:	d867      	bhi.n	80086e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008618:	2b00      	cmp	r3, #0
 800861a:	d05c      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0x15a>
 800861c:	2b10      	cmp	r3, #16
 800861e:	d05a      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008620:	e062      	b.n	80086e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008632:	f000 f968 	bl	8008906 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	609a      	str	r2, [r3, #8]
      break;
 800864e:	e04f      	b.n	80086f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008660:	f000 f951 	bl	8008906 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008672:	609a      	str	r2, [r3, #8]
      break;
 8008674:	e03c      	b.n	80086f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008682:	461a      	mov	r2, r3
 8008684:	f000 f8c8 	bl	8008818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2150      	movs	r1, #80	; 0x50
 800868e:	4618      	mov	r0, r3
 8008690:	f000 f91f 	bl	80088d2 <TIM_ITRx_SetConfig>
      break;
 8008694:	e02c      	b.n	80086f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086a2:	461a      	mov	r2, r3
 80086a4:	f000 f8e6 	bl	8008874 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2160      	movs	r1, #96	; 0x60
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 f90f 	bl	80088d2 <TIM_ITRx_SetConfig>
      break;
 80086b4:	e01c      	b.n	80086f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086c2:	461a      	mov	r2, r3
 80086c4:	f000 f8a8 	bl	8008818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2140      	movs	r1, #64	; 0x40
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f8ff 	bl	80088d2 <TIM_ITRx_SetConfig>
      break;
 80086d4:	e00c      	b.n	80086f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f000 f8f6 	bl	80088d2 <TIM_ITRx_SetConfig>
      break;
 80086e6:	e003      	b.n	80086f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	73fb      	strb	r3, [r7, #15]
      break;
 80086ec:	e000      	b.n	80086f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80086ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr

0800872e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr

08008740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	bc80      	pop	{r7}
 8008750:	4770      	bx	lr
	...

08008754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a29      	ldr	r2, [pc, #164]	; (800880c <TIM_Base_SetConfig+0xb8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00b      	beq.n	8008784 <TIM_Base_SetConfig+0x30>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008772:	d007      	beq.n	8008784 <TIM_Base_SetConfig+0x30>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a26      	ldr	r2, [pc, #152]	; (8008810 <TIM_Base_SetConfig+0xbc>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d003      	beq.n	8008784 <TIM_Base_SetConfig+0x30>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a25      	ldr	r2, [pc, #148]	; (8008814 <TIM_Base_SetConfig+0xc0>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d108      	bne.n	8008796 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a1c      	ldr	r2, [pc, #112]	; (800880c <TIM_Base_SetConfig+0xb8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00b      	beq.n	80087b6 <TIM_Base_SetConfig+0x62>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a4:	d007      	beq.n	80087b6 <TIM_Base_SetConfig+0x62>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a19      	ldr	r2, [pc, #100]	; (8008810 <TIM_Base_SetConfig+0xbc>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d003      	beq.n	80087b6 <TIM_Base_SetConfig+0x62>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a18      	ldr	r2, [pc, #96]	; (8008814 <TIM_Base_SetConfig+0xc0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d108      	bne.n	80087c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a07      	ldr	r2, [pc, #28]	; (800880c <TIM_Base_SetConfig+0xb8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d103      	bne.n	80087fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	691a      	ldr	r2, [r3, #16]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	615a      	str	r2, [r3, #20]
}
 8008802:	bf00      	nop
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr
 800880c:	40012c00 	.word	0x40012c00
 8008810:	40000400 	.word	0x40000400
 8008814:	40000800 	.word	0x40000800

08008818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	f023 0201 	bic.w	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f023 030a 	bic.w	r3, r3, #10
 8008854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4313      	orrs	r3, r2
 800885c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	621a      	str	r2, [r3, #32]
}
 800886a:	bf00      	nop
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	bc80      	pop	{r7}
 8008872:	4770      	bx	lr

08008874 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	f023 0210 	bic.w	r2, r3, #16
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800889e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	031b      	lsls	r3, r3, #12
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	011b      	lsls	r3, r3, #4
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	621a      	str	r2, [r3, #32]
}
 80088c8:	bf00      	nop
 80088ca:	371c      	adds	r7, #28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr

080088d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f043 0307 	orr.w	r3, r3, #7
 80088f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	609a      	str	r2, [r3, #8]
}
 80088fc:	bf00      	nop
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	bc80      	pop	{r7}
 8008904:	4770      	bx	lr

08008906 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008906:	b480      	push	{r7}
 8008908:	b087      	sub	sp, #28
 800890a:	af00      	add	r7, sp, #0
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
 8008912:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008920:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	021a      	lsls	r2, r3, #8
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	431a      	orrs	r2, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	4313      	orrs	r3, r2
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	4313      	orrs	r3, r2
 8008932:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	609a      	str	r2, [r3, #8]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f003 031f 	and.w	r3, r3, #31
 8008956:	2201      	movs	r2, #1
 8008958:	fa02 f303 	lsl.w	r3, r2, r3
 800895c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a1a      	ldr	r2, [r3, #32]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	43db      	mvns	r3, r3
 8008966:	401a      	ands	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a1a      	ldr	r2, [r3, #32]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f003 031f 	and.w	r3, r3, #31
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	fa01 f303 	lsl.w	r3, r1, r3
 800897c:	431a      	orrs	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	621a      	str	r2, [r3, #32]
}
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	bc80      	pop	{r7}
 800898a:	4770      	bx	lr

0800898c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e046      	b.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a16      	ldr	r2, [pc, #88]	; (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d00e      	beq.n	8008a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f0:	d009      	beq.n	8008a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a12      	ldr	r2, [pc, #72]	; (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d004      	beq.n	8008a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a10      	ldr	r2, [pc, #64]	; (8008a44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d10c      	bne.n	8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bc80      	pop	{r7}
 8008a3a:	4770      	bx	lr
 8008a3c:	40012c00 	.word	0x40012c00
 8008a40:	40000400 	.word	0x40000400
 8008a44:	40000800 	.word	0x40000800

08008a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bc80      	pop	{r7}
 8008a58:	4770      	bx	lr

08008a5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bc80      	pop	{r7}
 8008a6a:	4770      	bx	lr

08008a6c <__cvt>:
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a72:	461f      	mov	r7, r3
 8008a74:	bfbb      	ittet	lt
 8008a76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008a7a:	461f      	movlt	r7, r3
 8008a7c:	2300      	movge	r3, #0
 8008a7e:	232d      	movlt	r3, #45	; 0x2d
 8008a80:	b088      	sub	sp, #32
 8008a82:	4614      	mov	r4, r2
 8008a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008a88:	7013      	strb	r3, [r2, #0]
 8008a8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008a90:	f023 0820 	bic.w	r8, r3, #32
 8008a94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a98:	d005      	beq.n	8008aa6 <__cvt+0x3a>
 8008a9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a9e:	d100      	bne.n	8008aa2 <__cvt+0x36>
 8008aa0:	3501      	adds	r5, #1
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	e000      	b.n	8008aa8 <__cvt+0x3c>
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	aa07      	add	r2, sp, #28
 8008aaa:	9204      	str	r2, [sp, #16]
 8008aac:	aa06      	add	r2, sp, #24
 8008aae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008ab2:	e9cd 3500 	strd	r3, r5, [sp]
 8008ab6:	4622      	mov	r2, r4
 8008ab8:	463b      	mov	r3, r7
 8008aba:	f000 fe71 	bl	80097a0 <_dtoa_r>
 8008abe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	d102      	bne.n	8008acc <__cvt+0x60>
 8008ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ac8:	07db      	lsls	r3, r3, #31
 8008aca:	d522      	bpl.n	8008b12 <__cvt+0xa6>
 8008acc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ad0:	eb06 0905 	add.w	r9, r6, r5
 8008ad4:	d110      	bne.n	8008af8 <__cvt+0x8c>
 8008ad6:	7833      	ldrb	r3, [r6, #0]
 8008ad8:	2b30      	cmp	r3, #48	; 0x30
 8008ada:	d10a      	bne.n	8008af2 <__cvt+0x86>
 8008adc:	2200      	movs	r2, #0
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	f7f7 ff60 	bl	80009a8 <__aeabi_dcmpeq>
 8008ae8:	b918      	cbnz	r0, 8008af2 <__cvt+0x86>
 8008aea:	f1c5 0501 	rsb	r5, r5, #1
 8008aee:	f8ca 5000 	str.w	r5, [sl]
 8008af2:	f8da 3000 	ldr.w	r3, [sl]
 8008af6:	4499      	add	r9, r3
 8008af8:	2200      	movs	r2, #0
 8008afa:	2300      	movs	r3, #0
 8008afc:	4620      	mov	r0, r4
 8008afe:	4639      	mov	r1, r7
 8008b00:	f7f7 ff52 	bl	80009a8 <__aeabi_dcmpeq>
 8008b04:	b108      	cbz	r0, 8008b0a <__cvt+0x9e>
 8008b06:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b0a:	2230      	movs	r2, #48	; 0x30
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	454b      	cmp	r3, r9
 8008b10:	d307      	bcc.n	8008b22 <__cvt+0xb6>
 8008b12:	4630      	mov	r0, r6
 8008b14:	9b07      	ldr	r3, [sp, #28]
 8008b16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b18:	1b9b      	subs	r3, r3, r6
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	b008      	add	sp, #32
 8008b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b22:	1c59      	adds	r1, r3, #1
 8008b24:	9107      	str	r1, [sp, #28]
 8008b26:	701a      	strb	r2, [r3, #0]
 8008b28:	e7f0      	b.n	8008b0c <__cvt+0xa0>

08008b2a <__exponent>:
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b2e:	2900      	cmp	r1, #0
 8008b30:	f803 2b02 	strb.w	r2, [r3], #2
 8008b34:	bfb6      	itet	lt
 8008b36:	222d      	movlt	r2, #45	; 0x2d
 8008b38:	222b      	movge	r2, #43	; 0x2b
 8008b3a:	4249      	neglt	r1, r1
 8008b3c:	2909      	cmp	r1, #9
 8008b3e:	7042      	strb	r2, [r0, #1]
 8008b40:	dd2a      	ble.n	8008b98 <__exponent+0x6e>
 8008b42:	f10d 0207 	add.w	r2, sp, #7
 8008b46:	4617      	mov	r7, r2
 8008b48:	260a      	movs	r6, #10
 8008b4a:	fb91 f5f6 	sdiv	r5, r1, r6
 8008b4e:	4694      	mov	ip, r2
 8008b50:	fb06 1415 	mls	r4, r6, r5, r1
 8008b54:	3430      	adds	r4, #48	; 0x30
 8008b56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	2c63      	cmp	r4, #99	; 0x63
 8008b5e:	4629      	mov	r1, r5
 8008b60:	f102 32ff 	add.w	r2, r2, #4294967295
 8008b64:	dcf1      	bgt.n	8008b4a <__exponent+0x20>
 8008b66:	3130      	adds	r1, #48	; 0x30
 8008b68:	f1ac 0402 	sub.w	r4, ip, #2
 8008b6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008b70:	4622      	mov	r2, r4
 8008b72:	1c41      	adds	r1, r0, #1
 8008b74:	42ba      	cmp	r2, r7
 8008b76:	d30a      	bcc.n	8008b8e <__exponent+0x64>
 8008b78:	f10d 0209 	add.w	r2, sp, #9
 8008b7c:	eba2 020c 	sub.w	r2, r2, ip
 8008b80:	42bc      	cmp	r4, r7
 8008b82:	bf88      	it	hi
 8008b84:	2200      	movhi	r2, #0
 8008b86:	4413      	add	r3, r2
 8008b88:	1a18      	subs	r0, r3, r0
 8008b8a:	b003      	add	sp, #12
 8008b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008b92:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008b96:	e7ed      	b.n	8008b74 <__exponent+0x4a>
 8008b98:	2330      	movs	r3, #48	; 0x30
 8008b9a:	3130      	adds	r1, #48	; 0x30
 8008b9c:	7083      	strb	r3, [r0, #2]
 8008b9e:	70c1      	strb	r1, [r0, #3]
 8008ba0:	1d03      	adds	r3, r0, #4
 8008ba2:	e7f1      	b.n	8008b88 <__exponent+0x5e>

08008ba4 <_printf_float>:
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	b091      	sub	sp, #68	; 0x44
 8008baa:	460c      	mov	r4, r1
 8008bac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008bb0:	4616      	mov	r6, r2
 8008bb2:	461f      	mov	r7, r3
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	f000 fce5 	bl	8009584 <_localeconv_r>
 8008bba:	6803      	ldr	r3, [r0, #0]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	f7f7 fac6 	bl	8000150 <strlen>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	930e      	str	r3, [sp, #56]	; 0x38
 8008bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bcc:	900a      	str	r0, [sp, #40]	; 0x28
 8008bce:	3307      	adds	r3, #7
 8008bd0:	f023 0307 	bic.w	r3, r3, #7
 8008bd4:	f103 0208 	add.w	r2, r3, #8
 8008bd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8008be0:	f8c8 2000 	str.w	r2, [r8]
 8008be4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008be8:	4652      	mov	r2, sl
 8008bea:	4643      	mov	r3, r8
 8008bec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bf0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfa:	4650      	mov	r0, sl
 8008bfc:	4b9c      	ldr	r3, [pc, #624]	; (8008e70 <_printf_float+0x2cc>)
 8008bfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c00:	f7f7 ff04 	bl	8000a0c <__aeabi_dcmpun>
 8008c04:	bb70      	cbnz	r0, 8008c64 <_printf_float+0xc0>
 8008c06:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0a:	4650      	mov	r0, sl
 8008c0c:	4b98      	ldr	r3, [pc, #608]	; (8008e70 <_printf_float+0x2cc>)
 8008c0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c10:	f7f7 fede 	bl	80009d0 <__aeabi_dcmple>
 8008c14:	bb30      	cbnz	r0, 8008c64 <_printf_float+0xc0>
 8008c16:	2200      	movs	r2, #0
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	f7f7 fecd 	bl	80009bc <__aeabi_dcmplt>
 8008c22:	b110      	cbz	r0, 8008c2a <_printf_float+0x86>
 8008c24:	232d      	movs	r3, #45	; 0x2d
 8008c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c2a:	4a92      	ldr	r2, [pc, #584]	; (8008e74 <_printf_float+0x2d0>)
 8008c2c:	4b92      	ldr	r3, [pc, #584]	; (8008e78 <_printf_float+0x2d4>)
 8008c2e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008c32:	bf94      	ite	ls
 8008c34:	4690      	movls	r8, r2
 8008c36:	4698      	movhi	r8, r3
 8008c38:	2303      	movs	r3, #3
 8008c3a:	f04f 0a00 	mov.w	sl, #0
 8008c3e:	6123      	str	r3, [r4, #16]
 8008c40:	f02b 0304 	bic.w	r3, fp, #4
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	4633      	mov	r3, r6
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	9700      	str	r7, [sp, #0]
 8008c4e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008c50:	f000 f9d6 	bl	8009000 <_printf_common>
 8008c54:	3001      	adds	r0, #1
 8008c56:	f040 8090 	bne.w	8008d7a <_printf_float+0x1d6>
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5e:	b011      	add	sp, #68	; 0x44
 8008c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c64:	4652      	mov	r2, sl
 8008c66:	4643      	mov	r3, r8
 8008c68:	4650      	mov	r0, sl
 8008c6a:	4641      	mov	r1, r8
 8008c6c:	f7f7 fece 	bl	8000a0c <__aeabi_dcmpun>
 8008c70:	b148      	cbz	r0, 8008c86 <_printf_float+0xe2>
 8008c72:	f1b8 0f00 	cmp.w	r8, #0
 8008c76:	bfb8      	it	lt
 8008c78:	232d      	movlt	r3, #45	; 0x2d
 8008c7a:	4a80      	ldr	r2, [pc, #512]	; (8008e7c <_printf_float+0x2d8>)
 8008c7c:	bfb8      	it	lt
 8008c7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c82:	4b7f      	ldr	r3, [pc, #508]	; (8008e80 <_printf_float+0x2dc>)
 8008c84:	e7d3      	b.n	8008c2e <_printf_float+0x8a>
 8008c86:	6863      	ldr	r3, [r4, #4]
 8008c88:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	d142      	bne.n	8008d16 <_printf_float+0x172>
 8008c90:	2306      	movs	r3, #6
 8008c92:	6063      	str	r3, [r4, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	9206      	str	r2, [sp, #24]
 8008c98:	aa0e      	add	r2, sp, #56	; 0x38
 8008c9a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008c9e:	aa0d      	add	r2, sp, #52	; 0x34
 8008ca0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008ca4:	9203      	str	r2, [sp, #12]
 8008ca6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008caa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008cae:	6023      	str	r3, [r4, #0]
 8008cb0:	6863      	ldr	r3, [r4, #4]
 8008cb2:	4652      	mov	r2, sl
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	4643      	mov	r3, r8
 8008cba:	910b      	str	r1, [sp, #44]	; 0x2c
 8008cbc:	f7ff fed6 	bl	8008a6c <__cvt>
 8008cc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cc2:	4680      	mov	r8, r0
 8008cc4:	2947      	cmp	r1, #71	; 0x47
 8008cc6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008cc8:	d108      	bne.n	8008cdc <_printf_float+0x138>
 8008cca:	1cc8      	adds	r0, r1, #3
 8008ccc:	db02      	blt.n	8008cd4 <_printf_float+0x130>
 8008cce:	6863      	ldr	r3, [r4, #4]
 8008cd0:	4299      	cmp	r1, r3
 8008cd2:	dd40      	ble.n	8008d56 <_printf_float+0x1b2>
 8008cd4:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd8:	fa5f f989 	uxtb.w	r9, r9
 8008cdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ce0:	d81f      	bhi.n	8008d22 <_printf_float+0x17e>
 8008ce2:	464a      	mov	r2, r9
 8008ce4:	3901      	subs	r1, #1
 8008ce6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cea:	910d      	str	r1, [sp, #52]	; 0x34
 8008cec:	f7ff ff1d 	bl	8008b2a <__exponent>
 8008cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cf2:	4682      	mov	sl, r0
 8008cf4:	1813      	adds	r3, r2, r0
 8008cf6:	2a01      	cmp	r2, #1
 8008cf8:	6123      	str	r3, [r4, #16]
 8008cfa:	dc02      	bgt.n	8008d02 <_printf_float+0x15e>
 8008cfc:	6822      	ldr	r2, [r4, #0]
 8008cfe:	07d2      	lsls	r2, r2, #31
 8008d00:	d501      	bpl.n	8008d06 <_printf_float+0x162>
 8008d02:	3301      	adds	r3, #1
 8008d04:	6123      	str	r3, [r4, #16]
 8008d06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d09b      	beq.n	8008c46 <_printf_float+0xa2>
 8008d0e:	232d      	movs	r3, #45	; 0x2d
 8008d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d14:	e797      	b.n	8008c46 <_printf_float+0xa2>
 8008d16:	2947      	cmp	r1, #71	; 0x47
 8008d18:	d1bc      	bne.n	8008c94 <_printf_float+0xf0>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1ba      	bne.n	8008c94 <_printf_float+0xf0>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e7b7      	b.n	8008c92 <_printf_float+0xee>
 8008d22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008d26:	d118      	bne.n	8008d5a <_printf_float+0x1b6>
 8008d28:	2900      	cmp	r1, #0
 8008d2a:	6863      	ldr	r3, [r4, #4]
 8008d2c:	dd0b      	ble.n	8008d46 <_printf_float+0x1a2>
 8008d2e:	6121      	str	r1, [r4, #16]
 8008d30:	b913      	cbnz	r3, 8008d38 <_printf_float+0x194>
 8008d32:	6822      	ldr	r2, [r4, #0]
 8008d34:	07d0      	lsls	r0, r2, #31
 8008d36:	d502      	bpl.n	8008d3e <_printf_float+0x19a>
 8008d38:	3301      	adds	r3, #1
 8008d3a:	440b      	add	r3, r1
 8008d3c:	6123      	str	r3, [r4, #16]
 8008d3e:	f04f 0a00 	mov.w	sl, #0
 8008d42:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d44:	e7df      	b.n	8008d06 <_printf_float+0x162>
 8008d46:	b913      	cbnz	r3, 8008d4e <_printf_float+0x1aa>
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	07d2      	lsls	r2, r2, #31
 8008d4c:	d501      	bpl.n	8008d52 <_printf_float+0x1ae>
 8008d4e:	3302      	adds	r3, #2
 8008d50:	e7f4      	b.n	8008d3c <_printf_float+0x198>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e7f2      	b.n	8008d3c <_printf_float+0x198>
 8008d56:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d5c:	4299      	cmp	r1, r3
 8008d5e:	db05      	blt.n	8008d6c <_printf_float+0x1c8>
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	6121      	str	r1, [r4, #16]
 8008d64:	07d8      	lsls	r0, r3, #31
 8008d66:	d5ea      	bpl.n	8008d3e <_printf_float+0x19a>
 8008d68:	1c4b      	adds	r3, r1, #1
 8008d6a:	e7e7      	b.n	8008d3c <_printf_float+0x198>
 8008d6c:	2900      	cmp	r1, #0
 8008d6e:	bfcc      	ite	gt
 8008d70:	2201      	movgt	r2, #1
 8008d72:	f1c1 0202 	rsble	r2, r1, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	e7e0      	b.n	8008d3c <_printf_float+0x198>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	055a      	lsls	r2, r3, #21
 8008d7e:	d407      	bmi.n	8008d90 <_printf_float+0x1ec>
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	4642      	mov	r2, r8
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d12b      	bne.n	8008de6 <_printf_float+0x242>
 8008d8e:	e764      	b.n	8008c5a <_printf_float+0xb6>
 8008d90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008d94:	f240 80dd 	bls.w	8008f52 <_printf_float+0x3ae>
 8008d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f7f7 fe02 	bl	80009a8 <__aeabi_dcmpeq>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d033      	beq.n	8008e10 <_printf_float+0x26c>
 8008da8:	2301      	movs	r3, #1
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	4a35      	ldr	r2, [pc, #212]	; (8008e84 <_printf_float+0x2e0>)
 8008db0:	47b8      	blx	r7
 8008db2:	3001      	adds	r0, #1
 8008db4:	f43f af51 	beq.w	8008c5a <_printf_float+0xb6>
 8008db8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	db02      	blt.n	8008dc6 <_printf_float+0x222>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	07d8      	lsls	r0, r3, #31
 8008dc4:	d50f      	bpl.n	8008de6 <_printf_float+0x242>
 8008dc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	f43f af42 	beq.w	8008c5a <_printf_float+0xb6>
 8008dd6:	f04f 0800 	mov.w	r8, #0
 8008dda:	f104 091a 	add.w	r9, r4, #26
 8008dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008de0:	3b01      	subs	r3, #1
 8008de2:	4543      	cmp	r3, r8
 8008de4:	dc09      	bgt.n	8008dfa <_printf_float+0x256>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	079b      	lsls	r3, r3, #30
 8008dea:	f100 8104 	bmi.w	8008ff6 <_printf_float+0x452>
 8008dee:	68e0      	ldr	r0, [r4, #12]
 8008df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008df2:	4298      	cmp	r0, r3
 8008df4:	bfb8      	it	lt
 8008df6:	4618      	movlt	r0, r3
 8008df8:	e731      	b.n	8008c5e <_printf_float+0xba>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	464a      	mov	r2, r9
 8008dfe:	4631      	mov	r1, r6
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b8      	blx	r7
 8008e04:	3001      	adds	r0, #1
 8008e06:	f43f af28 	beq.w	8008c5a <_printf_float+0xb6>
 8008e0a:	f108 0801 	add.w	r8, r8, #1
 8008e0e:	e7e6      	b.n	8008dde <_printf_float+0x23a>
 8008e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dc38      	bgt.n	8008e88 <_printf_float+0x2e4>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	4a19      	ldr	r2, [pc, #100]	; (8008e84 <_printf_float+0x2e0>)
 8008e1e:	47b8      	blx	r7
 8008e20:	3001      	adds	r0, #1
 8008e22:	f43f af1a 	beq.w	8008c5a <_printf_float+0xb6>
 8008e26:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	d102      	bne.n	8008e34 <_printf_float+0x290>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	07d9      	lsls	r1, r3, #31
 8008e32:	d5d8      	bpl.n	8008de6 <_printf_float+0x242>
 8008e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	47b8      	blx	r7
 8008e3e:	3001      	adds	r0, #1
 8008e40:	f43f af0b 	beq.w	8008c5a <_printf_float+0xb6>
 8008e44:	f04f 0900 	mov.w	r9, #0
 8008e48:	f104 0a1a 	add.w	sl, r4, #26
 8008e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e4e:	425b      	negs	r3, r3
 8008e50:	454b      	cmp	r3, r9
 8008e52:	dc01      	bgt.n	8008e58 <_printf_float+0x2b4>
 8008e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e56:	e794      	b.n	8008d82 <_printf_float+0x1de>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	4631      	mov	r1, r6
 8008e5e:	4628      	mov	r0, r5
 8008e60:	47b8      	blx	r7
 8008e62:	3001      	adds	r0, #1
 8008e64:	f43f aef9 	beq.w	8008c5a <_printf_float+0xb6>
 8008e68:	f109 0901 	add.w	r9, r9, #1
 8008e6c:	e7ee      	b.n	8008e4c <_printf_float+0x2a8>
 8008e6e:	bf00      	nop
 8008e70:	7fefffff 	.word	0x7fefffff
 8008e74:	0800cd4e 	.word	0x0800cd4e
 8008e78:	0800cd52 	.word	0x0800cd52
 8008e7c:	0800cd56 	.word	0x0800cd56
 8008e80:	0800cd5a 	.word	0x0800cd5a
 8008e84:	0800cd5e 	.word	0x0800cd5e
 8008e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	bfa8      	it	ge
 8008e90:	461a      	movge	r2, r3
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	4691      	mov	r9, r2
 8008e96:	dc37      	bgt.n	8008f08 <_printf_float+0x364>
 8008e98:	f04f 0b00 	mov.w	fp, #0
 8008e9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ea0:	f104 021a 	add.w	r2, r4, #26
 8008ea4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008ea8:	ebaa 0309 	sub.w	r3, sl, r9
 8008eac:	455b      	cmp	r3, fp
 8008eae:	dc33      	bgt.n	8008f18 <_printf_float+0x374>
 8008eb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	db3b      	blt.n	8008f30 <_printf_float+0x38c>
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	07da      	lsls	r2, r3, #31
 8008ebc:	d438      	bmi.n	8008f30 <_printf_float+0x38c>
 8008ebe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008ec2:	eba2 0903 	sub.w	r9, r2, r3
 8008ec6:	eba2 020a 	sub.w	r2, r2, sl
 8008eca:	4591      	cmp	r9, r2
 8008ecc:	bfa8      	it	ge
 8008ece:	4691      	movge	r9, r2
 8008ed0:	f1b9 0f00 	cmp.w	r9, #0
 8008ed4:	dc34      	bgt.n	8008f40 <_printf_float+0x39c>
 8008ed6:	f04f 0800 	mov.w	r8, #0
 8008eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ede:	f104 0a1a 	add.w	sl, r4, #26
 8008ee2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ee6:	1a9b      	subs	r3, r3, r2
 8008ee8:	eba3 0309 	sub.w	r3, r3, r9
 8008eec:	4543      	cmp	r3, r8
 8008eee:	f77f af7a 	ble.w	8008de6 <_printf_float+0x242>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4652      	mov	r2, sl
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4628      	mov	r0, r5
 8008efa:	47b8      	blx	r7
 8008efc:	3001      	adds	r0, #1
 8008efe:	f43f aeac 	beq.w	8008c5a <_printf_float+0xb6>
 8008f02:	f108 0801 	add.w	r8, r8, #1
 8008f06:	e7ec      	b.n	8008ee2 <_printf_float+0x33e>
 8008f08:	4613      	mov	r3, r2
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	4628      	mov	r0, r5
 8008f10:	47b8      	blx	r7
 8008f12:	3001      	adds	r0, #1
 8008f14:	d1c0      	bne.n	8008e98 <_printf_float+0x2f4>
 8008f16:	e6a0      	b.n	8008c5a <_printf_float+0xb6>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f20:	47b8      	blx	r7
 8008f22:	3001      	adds	r0, #1
 8008f24:	f43f ae99 	beq.w	8008c5a <_printf_float+0xb6>
 8008f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f2a:	f10b 0b01 	add.w	fp, fp, #1
 8008f2e:	e7b9      	b.n	8008ea4 <_printf_float+0x300>
 8008f30:	4631      	mov	r1, r6
 8008f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b8      	blx	r7
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d1bf      	bne.n	8008ebe <_printf_float+0x31a>
 8008f3e:	e68c      	b.n	8008c5a <_printf_float+0xb6>
 8008f40:	464b      	mov	r3, r9
 8008f42:	4631      	mov	r1, r6
 8008f44:	4628      	mov	r0, r5
 8008f46:	eb08 020a 	add.w	r2, r8, sl
 8008f4a:	47b8      	blx	r7
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d1c2      	bne.n	8008ed6 <_printf_float+0x332>
 8008f50:	e683      	b.n	8008c5a <_printf_float+0xb6>
 8008f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f54:	2a01      	cmp	r2, #1
 8008f56:	dc01      	bgt.n	8008f5c <_printf_float+0x3b8>
 8008f58:	07db      	lsls	r3, r3, #31
 8008f5a:	d539      	bpl.n	8008fd0 <_printf_float+0x42c>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	4642      	mov	r2, r8
 8008f60:	4631      	mov	r1, r6
 8008f62:	4628      	mov	r0, r5
 8008f64:	47b8      	blx	r7
 8008f66:	3001      	adds	r0, #1
 8008f68:	f43f ae77 	beq.w	8008c5a <_printf_float+0xb6>
 8008f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f70:	4631      	mov	r1, r6
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b8      	blx	r7
 8008f76:	3001      	adds	r0, #1
 8008f78:	f43f ae6f 	beq.w	8008c5a <_printf_float+0xb6>
 8008f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f80:	2200      	movs	r2, #0
 8008f82:	2300      	movs	r3, #0
 8008f84:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008f88:	f7f7 fd0e 	bl	80009a8 <__aeabi_dcmpeq>
 8008f8c:	b9d8      	cbnz	r0, 8008fc6 <_printf_float+0x422>
 8008f8e:	f109 33ff 	add.w	r3, r9, #4294967295
 8008f92:	f108 0201 	add.w	r2, r8, #1
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d10e      	bne.n	8008fbe <_printf_float+0x41a>
 8008fa0:	e65b      	b.n	8008c5a <_printf_float+0xb6>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	464a      	mov	r2, r9
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	4628      	mov	r0, r5
 8008faa:	47b8      	blx	r7
 8008fac:	3001      	adds	r0, #1
 8008fae:	f43f ae54 	beq.w	8008c5a <_printf_float+0xb6>
 8008fb2:	f108 0801 	add.w	r8, r8, #1
 8008fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	4543      	cmp	r3, r8
 8008fbc:	dcf1      	bgt.n	8008fa2 <_printf_float+0x3fe>
 8008fbe:	4653      	mov	r3, sl
 8008fc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fc4:	e6de      	b.n	8008d84 <_printf_float+0x1e0>
 8008fc6:	f04f 0800 	mov.w	r8, #0
 8008fca:	f104 091a 	add.w	r9, r4, #26
 8008fce:	e7f2      	b.n	8008fb6 <_printf_float+0x412>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	4642      	mov	r2, r8
 8008fd4:	e7df      	b.n	8008f96 <_printf_float+0x3f2>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	464a      	mov	r2, r9
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b8      	blx	r7
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	f43f ae3a 	beq.w	8008c5a <_printf_float+0xb6>
 8008fe6:	f108 0801 	add.w	r8, r8, #1
 8008fea:	68e3      	ldr	r3, [r4, #12]
 8008fec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008fee:	1a5b      	subs	r3, r3, r1
 8008ff0:	4543      	cmp	r3, r8
 8008ff2:	dcf0      	bgt.n	8008fd6 <_printf_float+0x432>
 8008ff4:	e6fb      	b.n	8008dee <_printf_float+0x24a>
 8008ff6:	f04f 0800 	mov.w	r8, #0
 8008ffa:	f104 0919 	add.w	r9, r4, #25
 8008ffe:	e7f4      	b.n	8008fea <_printf_float+0x446>

08009000 <_printf_common>:
 8009000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	4616      	mov	r6, r2
 8009006:	4699      	mov	r9, r3
 8009008:	688a      	ldr	r2, [r1, #8]
 800900a:	690b      	ldr	r3, [r1, #16]
 800900c:	4607      	mov	r7, r0
 800900e:	4293      	cmp	r3, r2
 8009010:	bfb8      	it	lt
 8009012:	4613      	movlt	r3, r2
 8009014:	6033      	str	r3, [r6, #0]
 8009016:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800901a:	460c      	mov	r4, r1
 800901c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009020:	b10a      	cbz	r2, 8009026 <_printf_common+0x26>
 8009022:	3301      	adds	r3, #1
 8009024:	6033      	str	r3, [r6, #0]
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	0699      	lsls	r1, r3, #26
 800902a:	bf42      	ittt	mi
 800902c:	6833      	ldrmi	r3, [r6, #0]
 800902e:	3302      	addmi	r3, #2
 8009030:	6033      	strmi	r3, [r6, #0]
 8009032:	6825      	ldr	r5, [r4, #0]
 8009034:	f015 0506 	ands.w	r5, r5, #6
 8009038:	d106      	bne.n	8009048 <_printf_common+0x48>
 800903a:	f104 0a19 	add.w	sl, r4, #25
 800903e:	68e3      	ldr	r3, [r4, #12]
 8009040:	6832      	ldr	r2, [r6, #0]
 8009042:	1a9b      	subs	r3, r3, r2
 8009044:	42ab      	cmp	r3, r5
 8009046:	dc2b      	bgt.n	80090a0 <_printf_common+0xa0>
 8009048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800904c:	1e13      	subs	r3, r2, #0
 800904e:	6822      	ldr	r2, [r4, #0]
 8009050:	bf18      	it	ne
 8009052:	2301      	movne	r3, #1
 8009054:	0692      	lsls	r2, r2, #26
 8009056:	d430      	bmi.n	80090ba <_printf_common+0xba>
 8009058:	4649      	mov	r1, r9
 800905a:	4638      	mov	r0, r7
 800905c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009060:	47c0      	blx	r8
 8009062:	3001      	adds	r0, #1
 8009064:	d023      	beq.n	80090ae <_printf_common+0xae>
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	6922      	ldr	r2, [r4, #16]
 800906a:	f003 0306 	and.w	r3, r3, #6
 800906e:	2b04      	cmp	r3, #4
 8009070:	bf14      	ite	ne
 8009072:	2500      	movne	r5, #0
 8009074:	6833      	ldreq	r3, [r6, #0]
 8009076:	f04f 0600 	mov.w	r6, #0
 800907a:	bf08      	it	eq
 800907c:	68e5      	ldreq	r5, [r4, #12]
 800907e:	f104 041a 	add.w	r4, r4, #26
 8009082:	bf08      	it	eq
 8009084:	1aed      	subeq	r5, r5, r3
 8009086:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800908a:	bf08      	it	eq
 800908c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009090:	4293      	cmp	r3, r2
 8009092:	bfc4      	itt	gt
 8009094:	1a9b      	subgt	r3, r3, r2
 8009096:	18ed      	addgt	r5, r5, r3
 8009098:	42b5      	cmp	r5, r6
 800909a:	d11a      	bne.n	80090d2 <_printf_common+0xd2>
 800909c:	2000      	movs	r0, #0
 800909e:	e008      	b.n	80090b2 <_printf_common+0xb2>
 80090a0:	2301      	movs	r3, #1
 80090a2:	4652      	mov	r2, sl
 80090a4:	4649      	mov	r1, r9
 80090a6:	4638      	mov	r0, r7
 80090a8:	47c0      	blx	r8
 80090aa:	3001      	adds	r0, #1
 80090ac:	d103      	bne.n	80090b6 <_printf_common+0xb6>
 80090ae:	f04f 30ff 	mov.w	r0, #4294967295
 80090b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b6:	3501      	adds	r5, #1
 80090b8:	e7c1      	b.n	800903e <_printf_common+0x3e>
 80090ba:	2030      	movs	r0, #48	; 0x30
 80090bc:	18e1      	adds	r1, r4, r3
 80090be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090c8:	4422      	add	r2, r4
 80090ca:	3302      	adds	r3, #2
 80090cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090d0:	e7c2      	b.n	8009058 <_printf_common+0x58>
 80090d2:	2301      	movs	r3, #1
 80090d4:	4622      	mov	r2, r4
 80090d6:	4649      	mov	r1, r9
 80090d8:	4638      	mov	r0, r7
 80090da:	47c0      	blx	r8
 80090dc:	3001      	adds	r0, #1
 80090de:	d0e6      	beq.n	80090ae <_printf_common+0xae>
 80090e0:	3601      	adds	r6, #1
 80090e2:	e7d9      	b.n	8009098 <_printf_common+0x98>

080090e4 <_printf_i>:
 80090e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090e8:	7e0f      	ldrb	r7, [r1, #24]
 80090ea:	4691      	mov	r9, r2
 80090ec:	2f78      	cmp	r7, #120	; 0x78
 80090ee:	4680      	mov	r8, r0
 80090f0:	460c      	mov	r4, r1
 80090f2:	469a      	mov	sl, r3
 80090f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090fa:	d807      	bhi.n	800910c <_printf_i+0x28>
 80090fc:	2f62      	cmp	r7, #98	; 0x62
 80090fe:	d80a      	bhi.n	8009116 <_printf_i+0x32>
 8009100:	2f00      	cmp	r7, #0
 8009102:	f000 80d5 	beq.w	80092b0 <_printf_i+0x1cc>
 8009106:	2f58      	cmp	r7, #88	; 0x58
 8009108:	f000 80c1 	beq.w	800928e <_printf_i+0x1aa>
 800910c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009114:	e03a      	b.n	800918c <_printf_i+0xa8>
 8009116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800911a:	2b15      	cmp	r3, #21
 800911c:	d8f6      	bhi.n	800910c <_printf_i+0x28>
 800911e:	a101      	add	r1, pc, #4	; (adr r1, 8009124 <_printf_i+0x40>)
 8009120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009124:	0800917d 	.word	0x0800917d
 8009128:	08009191 	.word	0x08009191
 800912c:	0800910d 	.word	0x0800910d
 8009130:	0800910d 	.word	0x0800910d
 8009134:	0800910d 	.word	0x0800910d
 8009138:	0800910d 	.word	0x0800910d
 800913c:	08009191 	.word	0x08009191
 8009140:	0800910d 	.word	0x0800910d
 8009144:	0800910d 	.word	0x0800910d
 8009148:	0800910d 	.word	0x0800910d
 800914c:	0800910d 	.word	0x0800910d
 8009150:	08009297 	.word	0x08009297
 8009154:	080091bd 	.word	0x080091bd
 8009158:	08009251 	.word	0x08009251
 800915c:	0800910d 	.word	0x0800910d
 8009160:	0800910d 	.word	0x0800910d
 8009164:	080092b9 	.word	0x080092b9
 8009168:	0800910d 	.word	0x0800910d
 800916c:	080091bd 	.word	0x080091bd
 8009170:	0800910d 	.word	0x0800910d
 8009174:	0800910d 	.word	0x0800910d
 8009178:	08009259 	.word	0x08009259
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	1d1a      	adds	r2, r3, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	602a      	str	r2, [r5, #0]
 8009184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800918c:	2301      	movs	r3, #1
 800918e:	e0a0      	b.n	80092d2 <_printf_i+0x1ee>
 8009190:	6820      	ldr	r0, [r4, #0]
 8009192:	682b      	ldr	r3, [r5, #0]
 8009194:	0607      	lsls	r7, r0, #24
 8009196:	f103 0104 	add.w	r1, r3, #4
 800919a:	6029      	str	r1, [r5, #0]
 800919c:	d501      	bpl.n	80091a2 <_printf_i+0xbe>
 800919e:	681e      	ldr	r6, [r3, #0]
 80091a0:	e003      	b.n	80091aa <_printf_i+0xc6>
 80091a2:	0646      	lsls	r6, r0, #25
 80091a4:	d5fb      	bpl.n	800919e <_printf_i+0xba>
 80091a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	da03      	bge.n	80091b6 <_printf_i+0xd2>
 80091ae:	232d      	movs	r3, #45	; 0x2d
 80091b0:	4276      	negs	r6, r6
 80091b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091b6:	230a      	movs	r3, #10
 80091b8:	4859      	ldr	r0, [pc, #356]	; (8009320 <_printf_i+0x23c>)
 80091ba:	e012      	b.n	80091e2 <_printf_i+0xfe>
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	6820      	ldr	r0, [r4, #0]
 80091c0:	1d19      	adds	r1, r3, #4
 80091c2:	6029      	str	r1, [r5, #0]
 80091c4:	0605      	lsls	r5, r0, #24
 80091c6:	d501      	bpl.n	80091cc <_printf_i+0xe8>
 80091c8:	681e      	ldr	r6, [r3, #0]
 80091ca:	e002      	b.n	80091d2 <_printf_i+0xee>
 80091cc:	0641      	lsls	r1, r0, #25
 80091ce:	d5fb      	bpl.n	80091c8 <_printf_i+0xe4>
 80091d0:	881e      	ldrh	r6, [r3, #0]
 80091d2:	2f6f      	cmp	r7, #111	; 0x6f
 80091d4:	bf0c      	ite	eq
 80091d6:	2308      	moveq	r3, #8
 80091d8:	230a      	movne	r3, #10
 80091da:	4851      	ldr	r0, [pc, #324]	; (8009320 <_printf_i+0x23c>)
 80091dc:	2100      	movs	r1, #0
 80091de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091e2:	6865      	ldr	r5, [r4, #4]
 80091e4:	2d00      	cmp	r5, #0
 80091e6:	bfa8      	it	ge
 80091e8:	6821      	ldrge	r1, [r4, #0]
 80091ea:	60a5      	str	r5, [r4, #8]
 80091ec:	bfa4      	itt	ge
 80091ee:	f021 0104 	bicge.w	r1, r1, #4
 80091f2:	6021      	strge	r1, [r4, #0]
 80091f4:	b90e      	cbnz	r6, 80091fa <_printf_i+0x116>
 80091f6:	2d00      	cmp	r5, #0
 80091f8:	d04b      	beq.n	8009292 <_printf_i+0x1ae>
 80091fa:	4615      	mov	r5, r2
 80091fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8009200:	fb03 6711 	mls	r7, r3, r1, r6
 8009204:	5dc7      	ldrb	r7, [r0, r7]
 8009206:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800920a:	4637      	mov	r7, r6
 800920c:	42bb      	cmp	r3, r7
 800920e:	460e      	mov	r6, r1
 8009210:	d9f4      	bls.n	80091fc <_printf_i+0x118>
 8009212:	2b08      	cmp	r3, #8
 8009214:	d10b      	bne.n	800922e <_printf_i+0x14a>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	07de      	lsls	r6, r3, #31
 800921a:	d508      	bpl.n	800922e <_printf_i+0x14a>
 800921c:	6923      	ldr	r3, [r4, #16]
 800921e:	6861      	ldr	r1, [r4, #4]
 8009220:	4299      	cmp	r1, r3
 8009222:	bfde      	ittt	le
 8009224:	2330      	movle	r3, #48	; 0x30
 8009226:	f805 3c01 	strble.w	r3, [r5, #-1]
 800922a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800922e:	1b52      	subs	r2, r2, r5
 8009230:	6122      	str	r2, [r4, #16]
 8009232:	464b      	mov	r3, r9
 8009234:	4621      	mov	r1, r4
 8009236:	4640      	mov	r0, r8
 8009238:	f8cd a000 	str.w	sl, [sp]
 800923c:	aa03      	add	r2, sp, #12
 800923e:	f7ff fedf 	bl	8009000 <_printf_common>
 8009242:	3001      	adds	r0, #1
 8009244:	d14a      	bne.n	80092dc <_printf_i+0x1f8>
 8009246:	f04f 30ff 	mov.w	r0, #4294967295
 800924a:	b004      	add	sp, #16
 800924c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	f043 0320 	orr.w	r3, r3, #32
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	2778      	movs	r7, #120	; 0x78
 800925a:	4832      	ldr	r0, [pc, #200]	; (8009324 <_printf_i+0x240>)
 800925c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	6829      	ldr	r1, [r5, #0]
 8009264:	061f      	lsls	r7, r3, #24
 8009266:	f851 6b04 	ldr.w	r6, [r1], #4
 800926a:	d402      	bmi.n	8009272 <_printf_i+0x18e>
 800926c:	065f      	lsls	r7, r3, #25
 800926e:	bf48      	it	mi
 8009270:	b2b6      	uxthmi	r6, r6
 8009272:	07df      	lsls	r7, r3, #31
 8009274:	bf48      	it	mi
 8009276:	f043 0320 	orrmi.w	r3, r3, #32
 800927a:	6029      	str	r1, [r5, #0]
 800927c:	bf48      	it	mi
 800927e:	6023      	strmi	r3, [r4, #0]
 8009280:	b91e      	cbnz	r6, 800928a <_printf_i+0x1a6>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	f023 0320 	bic.w	r3, r3, #32
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	2310      	movs	r3, #16
 800928c:	e7a6      	b.n	80091dc <_printf_i+0xf8>
 800928e:	4824      	ldr	r0, [pc, #144]	; (8009320 <_printf_i+0x23c>)
 8009290:	e7e4      	b.n	800925c <_printf_i+0x178>
 8009292:	4615      	mov	r5, r2
 8009294:	e7bd      	b.n	8009212 <_printf_i+0x12e>
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	6826      	ldr	r6, [r4, #0]
 800929a:	1d18      	adds	r0, r3, #4
 800929c:	6961      	ldr	r1, [r4, #20]
 800929e:	6028      	str	r0, [r5, #0]
 80092a0:	0635      	lsls	r5, r6, #24
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	d501      	bpl.n	80092aa <_printf_i+0x1c6>
 80092a6:	6019      	str	r1, [r3, #0]
 80092a8:	e002      	b.n	80092b0 <_printf_i+0x1cc>
 80092aa:	0670      	lsls	r0, r6, #25
 80092ac:	d5fb      	bpl.n	80092a6 <_printf_i+0x1c2>
 80092ae:	8019      	strh	r1, [r3, #0]
 80092b0:	2300      	movs	r3, #0
 80092b2:	4615      	mov	r5, r2
 80092b4:	6123      	str	r3, [r4, #16]
 80092b6:	e7bc      	b.n	8009232 <_printf_i+0x14e>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	2100      	movs	r1, #0
 80092bc:	1d1a      	adds	r2, r3, #4
 80092be:	602a      	str	r2, [r5, #0]
 80092c0:	681d      	ldr	r5, [r3, #0]
 80092c2:	6862      	ldr	r2, [r4, #4]
 80092c4:	4628      	mov	r0, r5
 80092c6:	f000 f9d4 	bl	8009672 <memchr>
 80092ca:	b108      	cbz	r0, 80092d0 <_printf_i+0x1ec>
 80092cc:	1b40      	subs	r0, r0, r5
 80092ce:	6060      	str	r0, [r4, #4]
 80092d0:	6863      	ldr	r3, [r4, #4]
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	2300      	movs	r3, #0
 80092d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092da:	e7aa      	b.n	8009232 <_printf_i+0x14e>
 80092dc:	462a      	mov	r2, r5
 80092de:	4649      	mov	r1, r9
 80092e0:	4640      	mov	r0, r8
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	47d0      	blx	sl
 80092e6:	3001      	adds	r0, #1
 80092e8:	d0ad      	beq.n	8009246 <_printf_i+0x162>
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	079b      	lsls	r3, r3, #30
 80092ee:	d413      	bmi.n	8009318 <_printf_i+0x234>
 80092f0:	68e0      	ldr	r0, [r4, #12]
 80092f2:	9b03      	ldr	r3, [sp, #12]
 80092f4:	4298      	cmp	r0, r3
 80092f6:	bfb8      	it	lt
 80092f8:	4618      	movlt	r0, r3
 80092fa:	e7a6      	b.n	800924a <_printf_i+0x166>
 80092fc:	2301      	movs	r3, #1
 80092fe:	4632      	mov	r2, r6
 8009300:	4649      	mov	r1, r9
 8009302:	4640      	mov	r0, r8
 8009304:	47d0      	blx	sl
 8009306:	3001      	adds	r0, #1
 8009308:	d09d      	beq.n	8009246 <_printf_i+0x162>
 800930a:	3501      	adds	r5, #1
 800930c:	68e3      	ldr	r3, [r4, #12]
 800930e:	9903      	ldr	r1, [sp, #12]
 8009310:	1a5b      	subs	r3, r3, r1
 8009312:	42ab      	cmp	r3, r5
 8009314:	dcf2      	bgt.n	80092fc <_printf_i+0x218>
 8009316:	e7eb      	b.n	80092f0 <_printf_i+0x20c>
 8009318:	2500      	movs	r5, #0
 800931a:	f104 0619 	add.w	r6, r4, #25
 800931e:	e7f5      	b.n	800930c <_printf_i+0x228>
 8009320:	0800cd60 	.word	0x0800cd60
 8009324:	0800cd71 	.word	0x0800cd71

08009328 <std>:
 8009328:	2300      	movs	r3, #0
 800932a:	b510      	push	{r4, lr}
 800932c:	4604      	mov	r4, r0
 800932e:	e9c0 3300 	strd	r3, r3, [r0]
 8009332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009336:	6083      	str	r3, [r0, #8]
 8009338:	8181      	strh	r1, [r0, #12]
 800933a:	6643      	str	r3, [r0, #100]	; 0x64
 800933c:	81c2      	strh	r2, [r0, #14]
 800933e:	6183      	str	r3, [r0, #24]
 8009340:	4619      	mov	r1, r3
 8009342:	2208      	movs	r2, #8
 8009344:	305c      	adds	r0, #92	; 0x5c
 8009346:	f000 f914 	bl	8009572 <memset>
 800934a:	4b0d      	ldr	r3, [pc, #52]	; (8009380 <std+0x58>)
 800934c:	6224      	str	r4, [r4, #32]
 800934e:	6263      	str	r3, [r4, #36]	; 0x24
 8009350:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <std+0x5c>)
 8009352:	62a3      	str	r3, [r4, #40]	; 0x28
 8009354:	4b0c      	ldr	r3, [pc, #48]	; (8009388 <std+0x60>)
 8009356:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009358:	4b0c      	ldr	r3, [pc, #48]	; (800938c <std+0x64>)
 800935a:	6323      	str	r3, [r4, #48]	; 0x30
 800935c:	4b0c      	ldr	r3, [pc, #48]	; (8009390 <std+0x68>)
 800935e:	429c      	cmp	r4, r3
 8009360:	d006      	beq.n	8009370 <std+0x48>
 8009362:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009366:	4294      	cmp	r4, r2
 8009368:	d002      	beq.n	8009370 <std+0x48>
 800936a:	33d0      	adds	r3, #208	; 0xd0
 800936c:	429c      	cmp	r4, r3
 800936e:	d105      	bne.n	800937c <std+0x54>
 8009370:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009378:	f000 b978 	b.w	800966c <__retarget_lock_init_recursive>
 800937c:	bd10      	pop	{r4, pc}
 800937e:	bf00      	nop
 8009380:	080094ed 	.word	0x080094ed
 8009384:	0800950f 	.word	0x0800950f
 8009388:	08009547 	.word	0x08009547
 800938c:	0800956b 	.word	0x0800956b
 8009390:	20000568 	.word	0x20000568

08009394 <stdio_exit_handler>:
 8009394:	4a02      	ldr	r2, [pc, #8]	; (80093a0 <stdio_exit_handler+0xc>)
 8009396:	4903      	ldr	r1, [pc, #12]	; (80093a4 <stdio_exit_handler+0x10>)
 8009398:	4803      	ldr	r0, [pc, #12]	; (80093a8 <stdio_exit_handler+0x14>)
 800939a:	f000 b869 	b.w	8009470 <_fwalk_sglue>
 800939e:	bf00      	nop
 80093a0:	200000ec 	.word	0x200000ec
 80093a4:	0800b005 	.word	0x0800b005
 80093a8:	200000f8 	.word	0x200000f8

080093ac <cleanup_stdio>:
 80093ac:	6841      	ldr	r1, [r0, #4]
 80093ae:	4b0c      	ldr	r3, [pc, #48]	; (80093e0 <cleanup_stdio+0x34>)
 80093b0:	b510      	push	{r4, lr}
 80093b2:	4299      	cmp	r1, r3
 80093b4:	4604      	mov	r4, r0
 80093b6:	d001      	beq.n	80093bc <cleanup_stdio+0x10>
 80093b8:	f001 fe24 	bl	800b004 <_fflush_r>
 80093bc:	68a1      	ldr	r1, [r4, #8]
 80093be:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <cleanup_stdio+0x38>)
 80093c0:	4299      	cmp	r1, r3
 80093c2:	d002      	beq.n	80093ca <cleanup_stdio+0x1e>
 80093c4:	4620      	mov	r0, r4
 80093c6:	f001 fe1d 	bl	800b004 <_fflush_r>
 80093ca:	68e1      	ldr	r1, [r4, #12]
 80093cc:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <cleanup_stdio+0x3c>)
 80093ce:	4299      	cmp	r1, r3
 80093d0:	d004      	beq.n	80093dc <cleanup_stdio+0x30>
 80093d2:	4620      	mov	r0, r4
 80093d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093d8:	f001 be14 	b.w	800b004 <_fflush_r>
 80093dc:	bd10      	pop	{r4, pc}
 80093de:	bf00      	nop
 80093e0:	20000568 	.word	0x20000568
 80093e4:	200005d0 	.word	0x200005d0
 80093e8:	20000638 	.word	0x20000638

080093ec <global_stdio_init.part.0>:
 80093ec:	b510      	push	{r4, lr}
 80093ee:	4b0b      	ldr	r3, [pc, #44]	; (800941c <global_stdio_init.part.0+0x30>)
 80093f0:	4c0b      	ldr	r4, [pc, #44]	; (8009420 <global_stdio_init.part.0+0x34>)
 80093f2:	4a0c      	ldr	r2, [pc, #48]	; (8009424 <global_stdio_init.part.0+0x38>)
 80093f4:	4620      	mov	r0, r4
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	2104      	movs	r1, #4
 80093fa:	2200      	movs	r2, #0
 80093fc:	f7ff ff94 	bl	8009328 <std>
 8009400:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009404:	2201      	movs	r2, #1
 8009406:	2109      	movs	r1, #9
 8009408:	f7ff ff8e 	bl	8009328 <std>
 800940c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009410:	2202      	movs	r2, #2
 8009412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009416:	2112      	movs	r1, #18
 8009418:	f7ff bf86 	b.w	8009328 <std>
 800941c:	200006a0 	.word	0x200006a0
 8009420:	20000568 	.word	0x20000568
 8009424:	08009395 	.word	0x08009395

08009428 <__sfp_lock_acquire>:
 8009428:	4801      	ldr	r0, [pc, #4]	; (8009430 <__sfp_lock_acquire+0x8>)
 800942a:	f000 b920 	b.w	800966e <__retarget_lock_acquire_recursive>
 800942e:	bf00      	nop
 8009430:	200006a9 	.word	0x200006a9

08009434 <__sfp_lock_release>:
 8009434:	4801      	ldr	r0, [pc, #4]	; (800943c <__sfp_lock_release+0x8>)
 8009436:	f000 b91b 	b.w	8009670 <__retarget_lock_release_recursive>
 800943a:	bf00      	nop
 800943c:	200006a9 	.word	0x200006a9

08009440 <__sinit>:
 8009440:	b510      	push	{r4, lr}
 8009442:	4604      	mov	r4, r0
 8009444:	f7ff fff0 	bl	8009428 <__sfp_lock_acquire>
 8009448:	6a23      	ldr	r3, [r4, #32]
 800944a:	b11b      	cbz	r3, 8009454 <__sinit+0x14>
 800944c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009450:	f7ff bff0 	b.w	8009434 <__sfp_lock_release>
 8009454:	4b04      	ldr	r3, [pc, #16]	; (8009468 <__sinit+0x28>)
 8009456:	6223      	str	r3, [r4, #32]
 8009458:	4b04      	ldr	r3, [pc, #16]	; (800946c <__sinit+0x2c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1f5      	bne.n	800944c <__sinit+0xc>
 8009460:	f7ff ffc4 	bl	80093ec <global_stdio_init.part.0>
 8009464:	e7f2      	b.n	800944c <__sinit+0xc>
 8009466:	bf00      	nop
 8009468:	080093ad 	.word	0x080093ad
 800946c:	200006a0 	.word	0x200006a0

08009470 <_fwalk_sglue>:
 8009470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009474:	4607      	mov	r7, r0
 8009476:	4688      	mov	r8, r1
 8009478:	4614      	mov	r4, r2
 800947a:	2600      	movs	r6, #0
 800947c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009480:	f1b9 0901 	subs.w	r9, r9, #1
 8009484:	d505      	bpl.n	8009492 <_fwalk_sglue+0x22>
 8009486:	6824      	ldr	r4, [r4, #0]
 8009488:	2c00      	cmp	r4, #0
 800948a:	d1f7      	bne.n	800947c <_fwalk_sglue+0xc>
 800948c:	4630      	mov	r0, r6
 800948e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009492:	89ab      	ldrh	r3, [r5, #12]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d907      	bls.n	80094a8 <_fwalk_sglue+0x38>
 8009498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800949c:	3301      	adds	r3, #1
 800949e:	d003      	beq.n	80094a8 <_fwalk_sglue+0x38>
 80094a0:	4629      	mov	r1, r5
 80094a2:	4638      	mov	r0, r7
 80094a4:	47c0      	blx	r8
 80094a6:	4306      	orrs	r6, r0
 80094a8:	3568      	adds	r5, #104	; 0x68
 80094aa:	e7e9      	b.n	8009480 <_fwalk_sglue+0x10>

080094ac <siprintf>:
 80094ac:	b40e      	push	{r1, r2, r3}
 80094ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094b2:	b500      	push	{lr}
 80094b4:	b09c      	sub	sp, #112	; 0x70
 80094b6:	ab1d      	add	r3, sp, #116	; 0x74
 80094b8:	9002      	str	r0, [sp, #8]
 80094ba:	9006      	str	r0, [sp, #24]
 80094bc:	9107      	str	r1, [sp, #28]
 80094be:	9104      	str	r1, [sp, #16]
 80094c0:	4808      	ldr	r0, [pc, #32]	; (80094e4 <siprintf+0x38>)
 80094c2:	4909      	ldr	r1, [pc, #36]	; (80094e8 <siprintf+0x3c>)
 80094c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c8:	9105      	str	r1, [sp, #20]
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	a902      	add	r1, sp, #8
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	f001 fc18 	bl	800ad04 <_svfiprintf_r>
 80094d4:	2200      	movs	r2, #0
 80094d6:	9b02      	ldr	r3, [sp, #8]
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	b01c      	add	sp, #112	; 0x70
 80094dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e0:	b003      	add	sp, #12
 80094e2:	4770      	bx	lr
 80094e4:	20000144 	.word	0x20000144
 80094e8:	ffff0208 	.word	0xffff0208

080094ec <__sread>:
 80094ec:	b510      	push	{r4, lr}
 80094ee:	460c      	mov	r4, r1
 80094f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f4:	f000 f86c 	bl	80095d0 <_read_r>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	bfab      	itete	ge
 80094fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009500:	181b      	addge	r3, r3, r0
 8009502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009506:	bfac      	ite	ge
 8009508:	6563      	strge	r3, [r4, #84]	; 0x54
 800950a:	81a3      	strhlt	r3, [r4, #12]
 800950c:	bd10      	pop	{r4, pc}

0800950e <__swrite>:
 800950e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009512:	461f      	mov	r7, r3
 8009514:	898b      	ldrh	r3, [r1, #12]
 8009516:	4605      	mov	r5, r0
 8009518:	05db      	lsls	r3, r3, #23
 800951a:	460c      	mov	r4, r1
 800951c:	4616      	mov	r6, r2
 800951e:	d505      	bpl.n	800952c <__swrite+0x1e>
 8009520:	2302      	movs	r3, #2
 8009522:	2200      	movs	r2, #0
 8009524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009528:	f000 f840 	bl	80095ac <_lseek_r>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	4632      	mov	r2, r6
 8009530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	4628      	mov	r0, r5
 8009538:	463b      	mov	r3, r7
 800953a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800953e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009542:	f000 b857 	b.w	80095f4 <_write_r>

08009546 <__sseek>:
 8009546:	b510      	push	{r4, lr}
 8009548:	460c      	mov	r4, r1
 800954a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954e:	f000 f82d 	bl	80095ac <_lseek_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	bf15      	itete	ne
 8009558:	6560      	strne	r0, [r4, #84]	; 0x54
 800955a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800955e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009562:	81a3      	strheq	r3, [r4, #12]
 8009564:	bf18      	it	ne
 8009566:	81a3      	strhne	r3, [r4, #12]
 8009568:	bd10      	pop	{r4, pc}

0800956a <__sclose>:
 800956a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956e:	f000 b80d 	b.w	800958c <_close_r>

08009572 <memset>:
 8009572:	4603      	mov	r3, r0
 8009574:	4402      	add	r2, r0
 8009576:	4293      	cmp	r3, r2
 8009578:	d100      	bne.n	800957c <memset+0xa>
 800957a:	4770      	bx	lr
 800957c:	f803 1b01 	strb.w	r1, [r3], #1
 8009580:	e7f9      	b.n	8009576 <memset+0x4>
	...

08009584 <_localeconv_r>:
 8009584:	4800      	ldr	r0, [pc, #0]	; (8009588 <_localeconv_r+0x4>)
 8009586:	4770      	bx	lr
 8009588:	20000238 	.word	0x20000238

0800958c <_close_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	2300      	movs	r3, #0
 8009590:	4d05      	ldr	r5, [pc, #20]	; (80095a8 <_close_r+0x1c>)
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	602b      	str	r3, [r5, #0]
 8009598:	f7fc f86e 	bl	8005678 <_close>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_close_r+0x1a>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_close_r+0x1a>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	200006a4 	.word	0x200006a4

080095ac <_lseek_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	2200      	movs	r2, #0
 80095b6:	4d05      	ldr	r5, [pc, #20]	; (80095cc <_lseek_r+0x20>)
 80095b8:	602a      	str	r2, [r5, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f7fc f880 	bl	80056c0 <_lseek>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_lseek_r+0x1e>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_lseek_r+0x1e>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	200006a4 	.word	0x200006a4

080095d0 <_read_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	4611      	mov	r1, r2
 80095d8:	2200      	movs	r2, #0
 80095da:	4d05      	ldr	r5, [pc, #20]	; (80095f0 <_read_r+0x20>)
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	f7fc f811 	bl	8005606 <_read>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_read_r+0x1e>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_read_r+0x1e>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	200006a4 	.word	0x200006a4

080095f4 <_write_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	4611      	mov	r1, r2
 80095fc:	2200      	movs	r2, #0
 80095fe:	4d05      	ldr	r5, [pc, #20]	; (8009614 <_write_r+0x20>)
 8009600:	602a      	str	r2, [r5, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	f7fc f81c 	bl	8005640 <_write>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d102      	bne.n	8009612 <_write_r+0x1e>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	b103      	cbz	r3, 8009612 <_write_r+0x1e>
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	200006a4 	.word	0x200006a4

08009618 <__errno>:
 8009618:	4b01      	ldr	r3, [pc, #4]	; (8009620 <__errno+0x8>)
 800961a:	6818      	ldr	r0, [r3, #0]
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	20000144 	.word	0x20000144

08009624 <__libc_init_array>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	2600      	movs	r6, #0
 8009628:	4d0c      	ldr	r5, [pc, #48]	; (800965c <__libc_init_array+0x38>)
 800962a:	4c0d      	ldr	r4, [pc, #52]	; (8009660 <__libc_init_array+0x3c>)
 800962c:	1b64      	subs	r4, r4, r5
 800962e:	10a4      	asrs	r4, r4, #2
 8009630:	42a6      	cmp	r6, r4
 8009632:	d109      	bne.n	8009648 <__libc_init_array+0x24>
 8009634:	f003 f878 	bl	800c728 <_init>
 8009638:	2600      	movs	r6, #0
 800963a:	4d0a      	ldr	r5, [pc, #40]	; (8009664 <__libc_init_array+0x40>)
 800963c:	4c0a      	ldr	r4, [pc, #40]	; (8009668 <__libc_init_array+0x44>)
 800963e:	1b64      	subs	r4, r4, r5
 8009640:	10a4      	asrs	r4, r4, #2
 8009642:	42a6      	cmp	r6, r4
 8009644:	d105      	bne.n	8009652 <__libc_init_array+0x2e>
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	f855 3b04 	ldr.w	r3, [r5], #4
 800964c:	4798      	blx	r3
 800964e:	3601      	adds	r6, #1
 8009650:	e7ee      	b.n	8009630 <__libc_init_array+0xc>
 8009652:	f855 3b04 	ldr.w	r3, [r5], #4
 8009656:	4798      	blx	r3
 8009658:	3601      	adds	r6, #1
 800965a:	e7f2      	b.n	8009642 <__libc_init_array+0x1e>
 800965c:	0800d298 	.word	0x0800d298
 8009660:	0800d298 	.word	0x0800d298
 8009664:	0800d298 	.word	0x0800d298
 8009668:	0800d29c 	.word	0x0800d29c

0800966c <__retarget_lock_init_recursive>:
 800966c:	4770      	bx	lr

0800966e <__retarget_lock_acquire_recursive>:
 800966e:	4770      	bx	lr

08009670 <__retarget_lock_release_recursive>:
 8009670:	4770      	bx	lr

08009672 <memchr>:
 8009672:	4603      	mov	r3, r0
 8009674:	b510      	push	{r4, lr}
 8009676:	b2c9      	uxtb	r1, r1
 8009678:	4402      	add	r2, r0
 800967a:	4293      	cmp	r3, r2
 800967c:	4618      	mov	r0, r3
 800967e:	d101      	bne.n	8009684 <memchr+0x12>
 8009680:	2000      	movs	r0, #0
 8009682:	e003      	b.n	800968c <memchr+0x1a>
 8009684:	7804      	ldrb	r4, [r0, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	428c      	cmp	r4, r1
 800968a:	d1f6      	bne.n	800967a <memchr+0x8>
 800968c:	bd10      	pop	{r4, pc}

0800968e <quorem>:
 800968e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009692:	6903      	ldr	r3, [r0, #16]
 8009694:	690c      	ldr	r4, [r1, #16]
 8009696:	4607      	mov	r7, r0
 8009698:	42a3      	cmp	r3, r4
 800969a:	db7f      	blt.n	800979c <quorem+0x10e>
 800969c:	3c01      	subs	r4, #1
 800969e:	f100 0514 	add.w	r5, r0, #20
 80096a2:	f101 0814 	add.w	r8, r1, #20
 80096a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096b4:	3301      	adds	r3, #1
 80096b6:	429a      	cmp	r2, r3
 80096b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80096bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096c4:	d331      	bcc.n	800972a <quorem+0x9c>
 80096c6:	f04f 0e00 	mov.w	lr, #0
 80096ca:	4640      	mov	r0, r8
 80096cc:	46ac      	mov	ip, r5
 80096ce:	46f2      	mov	sl, lr
 80096d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80096d4:	b293      	uxth	r3, r2
 80096d6:	fb06 e303 	mla	r3, r6, r3, lr
 80096da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096de:	0c1a      	lsrs	r2, r3, #16
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	fb06 220e 	mla	r2, r6, lr, r2
 80096e6:	ebaa 0303 	sub.w	r3, sl, r3
 80096ea:	f8dc a000 	ldr.w	sl, [ip]
 80096ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096f2:	fa1f fa8a 	uxth.w	sl, sl
 80096f6:	4453      	add	r3, sl
 80096f8:	f8dc a000 	ldr.w	sl, [ip]
 80096fc:	b292      	uxth	r2, r2
 80096fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009702:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009706:	b29b      	uxth	r3, r3
 8009708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800970c:	4581      	cmp	r9, r0
 800970e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009712:	f84c 3b04 	str.w	r3, [ip], #4
 8009716:	d2db      	bcs.n	80096d0 <quorem+0x42>
 8009718:	f855 300b 	ldr.w	r3, [r5, fp]
 800971c:	b92b      	cbnz	r3, 800972a <quorem+0x9c>
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	3b04      	subs	r3, #4
 8009722:	429d      	cmp	r5, r3
 8009724:	461a      	mov	r2, r3
 8009726:	d32d      	bcc.n	8009784 <quorem+0xf6>
 8009728:	613c      	str	r4, [r7, #16]
 800972a:	4638      	mov	r0, r7
 800972c:	f001 f992 	bl	800aa54 <__mcmp>
 8009730:	2800      	cmp	r0, #0
 8009732:	db23      	blt.n	800977c <quorem+0xee>
 8009734:	4629      	mov	r1, r5
 8009736:	2000      	movs	r0, #0
 8009738:	3601      	adds	r6, #1
 800973a:	f858 2b04 	ldr.w	r2, [r8], #4
 800973e:	f8d1 c000 	ldr.w	ip, [r1]
 8009742:	b293      	uxth	r3, r2
 8009744:	1ac3      	subs	r3, r0, r3
 8009746:	0c12      	lsrs	r2, r2, #16
 8009748:	fa1f f08c 	uxth.w	r0, ip
 800974c:	4403      	add	r3, r0
 800974e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009752:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009756:	b29b      	uxth	r3, r3
 8009758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800975c:	45c1      	cmp	r9, r8
 800975e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009762:	f841 3b04 	str.w	r3, [r1], #4
 8009766:	d2e8      	bcs.n	800973a <quorem+0xac>
 8009768:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800976c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009770:	b922      	cbnz	r2, 800977c <quorem+0xee>
 8009772:	3b04      	subs	r3, #4
 8009774:	429d      	cmp	r5, r3
 8009776:	461a      	mov	r2, r3
 8009778:	d30a      	bcc.n	8009790 <quorem+0x102>
 800977a:	613c      	str	r4, [r7, #16]
 800977c:	4630      	mov	r0, r6
 800977e:	b003      	add	sp, #12
 8009780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009784:	6812      	ldr	r2, [r2, #0]
 8009786:	3b04      	subs	r3, #4
 8009788:	2a00      	cmp	r2, #0
 800978a:	d1cd      	bne.n	8009728 <quorem+0x9a>
 800978c:	3c01      	subs	r4, #1
 800978e:	e7c8      	b.n	8009722 <quorem+0x94>
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	3b04      	subs	r3, #4
 8009794:	2a00      	cmp	r2, #0
 8009796:	d1f0      	bne.n	800977a <quorem+0xec>
 8009798:	3c01      	subs	r4, #1
 800979a:	e7eb      	b.n	8009774 <quorem+0xe6>
 800979c:	2000      	movs	r0, #0
 800979e:	e7ee      	b.n	800977e <quorem+0xf0>

080097a0 <_dtoa_r>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	4616      	mov	r6, r2
 80097a6:	461f      	mov	r7, r3
 80097a8:	69c4      	ldr	r4, [r0, #28]
 80097aa:	b099      	sub	sp, #100	; 0x64
 80097ac:	4605      	mov	r5, r0
 80097ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80097b6:	b974      	cbnz	r4, 80097d6 <_dtoa_r+0x36>
 80097b8:	2010      	movs	r0, #16
 80097ba:	f000 fe1d 	bl	800a3f8 <malloc>
 80097be:	4602      	mov	r2, r0
 80097c0:	61e8      	str	r0, [r5, #28]
 80097c2:	b920      	cbnz	r0, 80097ce <_dtoa_r+0x2e>
 80097c4:	21ef      	movs	r1, #239	; 0xef
 80097c6:	4bac      	ldr	r3, [pc, #688]	; (8009a78 <_dtoa_r+0x2d8>)
 80097c8:	48ac      	ldr	r0, [pc, #688]	; (8009a7c <_dtoa_r+0x2dc>)
 80097ca:	f001 fc7b 	bl	800b0c4 <__assert_func>
 80097ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097d2:	6004      	str	r4, [r0, #0]
 80097d4:	60c4      	str	r4, [r0, #12]
 80097d6:	69eb      	ldr	r3, [r5, #28]
 80097d8:	6819      	ldr	r1, [r3, #0]
 80097da:	b151      	cbz	r1, 80097f2 <_dtoa_r+0x52>
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	2301      	movs	r3, #1
 80097e0:	4093      	lsls	r3, r2
 80097e2:	604a      	str	r2, [r1, #4]
 80097e4:	608b      	str	r3, [r1, #8]
 80097e6:	4628      	mov	r0, r5
 80097e8:	f000 fefa 	bl	800a5e0 <_Bfree>
 80097ec:	2200      	movs	r2, #0
 80097ee:	69eb      	ldr	r3, [r5, #28]
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	1e3b      	subs	r3, r7, #0
 80097f4:	bfaf      	iteee	ge
 80097f6:	2300      	movge	r3, #0
 80097f8:	2201      	movlt	r2, #1
 80097fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097fe:	9305      	strlt	r3, [sp, #20]
 8009800:	bfa8      	it	ge
 8009802:	f8c8 3000 	strge.w	r3, [r8]
 8009806:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800980a:	4b9d      	ldr	r3, [pc, #628]	; (8009a80 <_dtoa_r+0x2e0>)
 800980c:	bfb8      	it	lt
 800980e:	f8c8 2000 	strlt.w	r2, [r8]
 8009812:	ea33 0309 	bics.w	r3, r3, r9
 8009816:	d119      	bne.n	800984c <_dtoa_r+0xac>
 8009818:	f242 730f 	movw	r3, #9999	; 0x270f
 800981c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009824:	4333      	orrs	r3, r6
 8009826:	f000 8589 	beq.w	800a33c <_dtoa_r+0xb9c>
 800982a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800982c:	b953      	cbnz	r3, 8009844 <_dtoa_r+0xa4>
 800982e:	4b95      	ldr	r3, [pc, #596]	; (8009a84 <_dtoa_r+0x2e4>)
 8009830:	e023      	b.n	800987a <_dtoa_r+0xda>
 8009832:	4b95      	ldr	r3, [pc, #596]	; (8009a88 <_dtoa_r+0x2e8>)
 8009834:	9303      	str	r3, [sp, #12]
 8009836:	3308      	adds	r3, #8
 8009838:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	9803      	ldr	r0, [sp, #12]
 800983e:	b019      	add	sp, #100	; 0x64
 8009840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009844:	4b8f      	ldr	r3, [pc, #572]	; (8009a84 <_dtoa_r+0x2e4>)
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	3303      	adds	r3, #3
 800984a:	e7f5      	b.n	8009838 <_dtoa_r+0x98>
 800984c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009850:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009858:	2200      	movs	r2, #0
 800985a:	2300      	movs	r3, #0
 800985c:	f7f7 f8a4 	bl	80009a8 <__aeabi_dcmpeq>
 8009860:	4680      	mov	r8, r0
 8009862:	b160      	cbz	r0, 800987e <_dtoa_r+0xde>
 8009864:	2301      	movs	r3, #1
 8009866:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 8562 	beq.w	800a336 <_dtoa_r+0xb96>
 8009872:	4b86      	ldr	r3, [pc, #536]	; (8009a8c <_dtoa_r+0x2ec>)
 8009874:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	3b01      	subs	r3, #1
 800987a:	9303      	str	r3, [sp, #12]
 800987c:	e7de      	b.n	800983c <_dtoa_r+0x9c>
 800987e:	ab16      	add	r3, sp, #88	; 0x58
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	ab17      	add	r3, sp, #92	; 0x5c
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	4628      	mov	r0, r5
 8009888:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800988c:	f001 f98a 	bl	800aba4 <__d2b>
 8009890:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009894:	4682      	mov	sl, r0
 8009896:	2c00      	cmp	r4, #0
 8009898:	d07e      	beq.n	8009998 <_dtoa_r+0x1f8>
 800989a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800989e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80098a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098a8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80098ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80098b0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80098b4:	4619      	mov	r1, r3
 80098b6:	2200      	movs	r2, #0
 80098b8:	4b75      	ldr	r3, [pc, #468]	; (8009a90 <_dtoa_r+0x2f0>)
 80098ba:	f7f6 fc55 	bl	8000168 <__aeabi_dsub>
 80098be:	a368      	add	r3, pc, #416	; (adr r3, 8009a60 <_dtoa_r+0x2c0>)
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	f7f6 fe08 	bl	80004d8 <__aeabi_dmul>
 80098c8:	a367      	add	r3, pc, #412	; (adr r3, 8009a68 <_dtoa_r+0x2c8>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f7f6 fc4d 	bl	800016c <__adddf3>
 80098d2:	4606      	mov	r6, r0
 80098d4:	4620      	mov	r0, r4
 80098d6:	460f      	mov	r7, r1
 80098d8:	f7f6 fd94 	bl	8000404 <__aeabi_i2d>
 80098dc:	a364      	add	r3, pc, #400	; (adr r3, 8009a70 <_dtoa_r+0x2d0>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f6 fdf9 	bl	80004d8 <__aeabi_dmul>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f6 fc3d 	bl	800016c <__adddf3>
 80098f2:	4606      	mov	r6, r0
 80098f4:	460f      	mov	r7, r1
 80098f6:	f7f7 f89f 	bl	8000a38 <__aeabi_d2iz>
 80098fa:	2200      	movs	r2, #0
 80098fc:	4683      	mov	fp, r0
 80098fe:	2300      	movs	r3, #0
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	f7f7 f85a 	bl	80009bc <__aeabi_dcmplt>
 8009908:	b148      	cbz	r0, 800991e <_dtoa_r+0x17e>
 800990a:	4658      	mov	r0, fp
 800990c:	f7f6 fd7a 	bl	8000404 <__aeabi_i2d>
 8009910:	4632      	mov	r2, r6
 8009912:	463b      	mov	r3, r7
 8009914:	f7f7 f848 	bl	80009a8 <__aeabi_dcmpeq>
 8009918:	b908      	cbnz	r0, 800991e <_dtoa_r+0x17e>
 800991a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800991e:	f1bb 0f16 	cmp.w	fp, #22
 8009922:	d857      	bhi.n	80099d4 <_dtoa_r+0x234>
 8009924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009928:	4b5a      	ldr	r3, [pc, #360]	; (8009a94 <_dtoa_r+0x2f4>)
 800992a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f7f7 f843 	bl	80009bc <__aeabi_dcmplt>
 8009936:	2800      	cmp	r0, #0
 8009938:	d04e      	beq.n	80099d8 <_dtoa_r+0x238>
 800993a:	2300      	movs	r3, #0
 800993c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009940:	930f      	str	r3, [sp, #60]	; 0x3c
 8009942:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009944:	1b1b      	subs	r3, r3, r4
 8009946:	1e5a      	subs	r2, r3, #1
 8009948:	bf46      	itte	mi
 800994a:	f1c3 0901 	rsbmi	r9, r3, #1
 800994e:	2300      	movmi	r3, #0
 8009950:	f04f 0900 	movpl.w	r9, #0
 8009954:	9209      	str	r2, [sp, #36]	; 0x24
 8009956:	bf48      	it	mi
 8009958:	9309      	strmi	r3, [sp, #36]	; 0x24
 800995a:	f1bb 0f00 	cmp.w	fp, #0
 800995e:	db3d      	blt.n	80099dc <_dtoa_r+0x23c>
 8009960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009962:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009966:	445b      	add	r3, fp
 8009968:	9309      	str	r3, [sp, #36]	; 0x24
 800996a:	2300      	movs	r3, #0
 800996c:	930a      	str	r3, [sp, #40]	; 0x28
 800996e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009970:	2b09      	cmp	r3, #9
 8009972:	d867      	bhi.n	8009a44 <_dtoa_r+0x2a4>
 8009974:	2b05      	cmp	r3, #5
 8009976:	bfc4      	itt	gt
 8009978:	3b04      	subgt	r3, #4
 800997a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800997c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800997e:	bfc8      	it	gt
 8009980:	2400      	movgt	r4, #0
 8009982:	f1a3 0302 	sub.w	r3, r3, #2
 8009986:	bfd8      	it	le
 8009988:	2401      	movle	r4, #1
 800998a:	2b03      	cmp	r3, #3
 800998c:	f200 8086 	bhi.w	8009a9c <_dtoa_r+0x2fc>
 8009990:	e8df f003 	tbb	[pc, r3]
 8009994:	5637392c 	.word	0x5637392c
 8009998:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800999c:	441c      	add	r4, r3
 800999e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	bfc1      	itttt	gt
 80099a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099aa:	fa09 f903 	lslgt.w	r9, r9, r3
 80099ae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80099b2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80099b6:	bfd6      	itet	le
 80099b8:	f1c3 0320 	rsble	r3, r3, #32
 80099bc:	ea49 0003 	orrgt.w	r0, r9, r3
 80099c0:	fa06 f003 	lslle.w	r0, r6, r3
 80099c4:	f7f6 fd0e 	bl	80003e4 <__aeabi_ui2d>
 80099c8:	2201      	movs	r2, #1
 80099ca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80099ce:	3c01      	subs	r4, #1
 80099d0:	9213      	str	r2, [sp, #76]	; 0x4c
 80099d2:	e76f      	b.n	80098b4 <_dtoa_r+0x114>
 80099d4:	2301      	movs	r3, #1
 80099d6:	e7b3      	b.n	8009940 <_dtoa_r+0x1a0>
 80099d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80099da:	e7b2      	b.n	8009942 <_dtoa_r+0x1a2>
 80099dc:	f1cb 0300 	rsb	r3, fp, #0
 80099e0:	930a      	str	r3, [sp, #40]	; 0x28
 80099e2:	2300      	movs	r3, #0
 80099e4:	eba9 090b 	sub.w	r9, r9, fp
 80099e8:	930e      	str	r3, [sp, #56]	; 0x38
 80099ea:	e7c0      	b.n	800996e <_dtoa_r+0x1ce>
 80099ec:	2300      	movs	r3, #0
 80099ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80099f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	dc55      	bgt.n	8009aa2 <_dtoa_r+0x302>
 80099f6:	2301      	movs	r3, #1
 80099f8:	461a      	mov	r2, r3
 80099fa:	9306      	str	r3, [sp, #24]
 80099fc:	9308      	str	r3, [sp, #32]
 80099fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a00:	e00b      	b.n	8009a1a <_dtoa_r+0x27a>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e7f3      	b.n	80099ee <_dtoa_r+0x24e>
 8009a06:	2300      	movs	r3, #0
 8009a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a0c:	445b      	add	r3, fp
 8009a0e:	9306      	str	r3, [sp, #24]
 8009a10:	3301      	adds	r3, #1
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	9308      	str	r3, [sp, #32]
 8009a16:	bfb8      	it	lt
 8009a18:	2301      	movlt	r3, #1
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	2204      	movs	r2, #4
 8009a1e:	69e8      	ldr	r0, [r5, #28]
 8009a20:	f102 0614 	add.w	r6, r2, #20
 8009a24:	429e      	cmp	r6, r3
 8009a26:	d940      	bls.n	8009aaa <_dtoa_r+0x30a>
 8009a28:	6041      	str	r1, [r0, #4]
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f000 fd98 	bl	800a560 <_Balloc>
 8009a30:	9003      	str	r0, [sp, #12]
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d13c      	bne.n	8009ab0 <_dtoa_r+0x310>
 8009a36:	4602      	mov	r2, r0
 8009a38:	f240 11af 	movw	r1, #431	; 0x1af
 8009a3c:	4b16      	ldr	r3, [pc, #88]	; (8009a98 <_dtoa_r+0x2f8>)
 8009a3e:	e6c3      	b.n	80097c8 <_dtoa_r+0x28>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e7e1      	b.n	8009a08 <_dtoa_r+0x268>
 8009a44:	2401      	movs	r4, #1
 8009a46:	2300      	movs	r3, #0
 8009a48:	940b      	str	r4, [sp, #44]	; 0x2c
 8009a4a:	9322      	str	r3, [sp, #136]	; 0x88
 8009a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a50:	2200      	movs	r2, #0
 8009a52:	9306      	str	r3, [sp, #24]
 8009a54:	9308      	str	r3, [sp, #32]
 8009a56:	2312      	movs	r3, #18
 8009a58:	e7d1      	b.n	80099fe <_dtoa_r+0x25e>
 8009a5a:	bf00      	nop
 8009a5c:	f3af 8000 	nop.w
 8009a60:	636f4361 	.word	0x636f4361
 8009a64:	3fd287a7 	.word	0x3fd287a7
 8009a68:	8b60c8b3 	.word	0x8b60c8b3
 8009a6c:	3fc68a28 	.word	0x3fc68a28
 8009a70:	509f79fb 	.word	0x509f79fb
 8009a74:	3fd34413 	.word	0x3fd34413
 8009a78:	0800cd8f 	.word	0x0800cd8f
 8009a7c:	0800cda6 	.word	0x0800cda6
 8009a80:	7ff00000 	.word	0x7ff00000
 8009a84:	0800cd8b 	.word	0x0800cd8b
 8009a88:	0800cd82 	.word	0x0800cd82
 8009a8c:	0800cd5f 	.word	0x0800cd5f
 8009a90:	3ff80000 	.word	0x3ff80000
 8009a94:	0800ce90 	.word	0x0800ce90
 8009a98:	0800cdfe 	.word	0x0800cdfe
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aa0:	e7d4      	b.n	8009a4c <_dtoa_r+0x2ac>
 8009aa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009aa4:	9306      	str	r3, [sp, #24]
 8009aa6:	9308      	str	r3, [sp, #32]
 8009aa8:	e7b7      	b.n	8009a1a <_dtoa_r+0x27a>
 8009aaa:	3101      	adds	r1, #1
 8009aac:	0052      	lsls	r2, r2, #1
 8009aae:	e7b7      	b.n	8009a20 <_dtoa_r+0x280>
 8009ab0:	69eb      	ldr	r3, [r5, #28]
 8009ab2:	9a03      	ldr	r2, [sp, #12]
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	9b08      	ldr	r3, [sp, #32]
 8009ab8:	2b0e      	cmp	r3, #14
 8009aba:	f200 80a8 	bhi.w	8009c0e <_dtoa_r+0x46e>
 8009abe:	2c00      	cmp	r4, #0
 8009ac0:	f000 80a5 	beq.w	8009c0e <_dtoa_r+0x46e>
 8009ac4:	f1bb 0f00 	cmp.w	fp, #0
 8009ac8:	dd34      	ble.n	8009b34 <_dtoa_r+0x394>
 8009aca:	4b9a      	ldr	r3, [pc, #616]	; (8009d34 <_dtoa_r+0x594>)
 8009acc:	f00b 020f 	and.w	r2, fp, #15
 8009ad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ad4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009ad8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009adc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009ae0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009ae4:	d016      	beq.n	8009b14 <_dtoa_r+0x374>
 8009ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009aea:	4b93      	ldr	r3, [pc, #588]	; (8009d38 <_dtoa_r+0x598>)
 8009aec:	2703      	movs	r7, #3
 8009aee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009af2:	f7f6 fe1b 	bl	800072c <__aeabi_ddiv>
 8009af6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009afa:	f004 040f 	and.w	r4, r4, #15
 8009afe:	4e8e      	ldr	r6, [pc, #568]	; (8009d38 <_dtoa_r+0x598>)
 8009b00:	b954      	cbnz	r4, 8009b18 <_dtoa_r+0x378>
 8009b02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b0a:	f7f6 fe0f 	bl	800072c <__aeabi_ddiv>
 8009b0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b12:	e029      	b.n	8009b68 <_dtoa_r+0x3c8>
 8009b14:	2702      	movs	r7, #2
 8009b16:	e7f2      	b.n	8009afe <_dtoa_r+0x35e>
 8009b18:	07e1      	lsls	r1, r4, #31
 8009b1a:	d508      	bpl.n	8009b2e <_dtoa_r+0x38e>
 8009b1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b24:	f7f6 fcd8 	bl	80004d8 <__aeabi_dmul>
 8009b28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b2c:	3701      	adds	r7, #1
 8009b2e:	1064      	asrs	r4, r4, #1
 8009b30:	3608      	adds	r6, #8
 8009b32:	e7e5      	b.n	8009b00 <_dtoa_r+0x360>
 8009b34:	f000 80a5 	beq.w	8009c82 <_dtoa_r+0x4e2>
 8009b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b3c:	f1cb 0400 	rsb	r4, fp, #0
 8009b40:	4b7c      	ldr	r3, [pc, #496]	; (8009d34 <_dtoa_r+0x594>)
 8009b42:	f004 020f 	and.w	r2, r4, #15
 8009b46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	f7f6 fcc3 	bl	80004d8 <__aeabi_dmul>
 8009b52:	2702      	movs	r7, #2
 8009b54:	2300      	movs	r3, #0
 8009b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b5a:	4e77      	ldr	r6, [pc, #476]	; (8009d38 <_dtoa_r+0x598>)
 8009b5c:	1124      	asrs	r4, r4, #4
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	f040 8084 	bne.w	8009c6c <_dtoa_r+0x4cc>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1d2      	bne.n	8009b0e <_dtoa_r+0x36e>
 8009b68:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b6c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 8087 	beq.w	8009c86 <_dtoa_r+0x4e6>
 8009b78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	4b6f      	ldr	r3, [pc, #444]	; (8009d3c <_dtoa_r+0x59c>)
 8009b80:	f7f6 ff1c 	bl	80009bc <__aeabi_dcmplt>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d07e      	beq.n	8009c86 <_dtoa_r+0x4e6>
 8009b88:	9b08      	ldr	r3, [sp, #32]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d07b      	beq.n	8009c86 <_dtoa_r+0x4e6>
 8009b8e:	9b06      	ldr	r3, [sp, #24]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	dd38      	ble.n	8009c06 <_dtoa_r+0x466>
 8009b94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b98:	2200      	movs	r2, #0
 8009b9a:	4b69      	ldr	r3, [pc, #420]	; (8009d40 <_dtoa_r+0x5a0>)
 8009b9c:	f7f6 fc9c 	bl	80004d8 <__aeabi_dmul>
 8009ba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ba4:	9c06      	ldr	r4, [sp, #24]
 8009ba6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009baa:	3701      	adds	r7, #1
 8009bac:	4638      	mov	r0, r7
 8009bae:	f7f6 fc29 	bl	8000404 <__aeabi_i2d>
 8009bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bb6:	f7f6 fc8f 	bl	80004d8 <__aeabi_dmul>
 8009bba:	2200      	movs	r2, #0
 8009bbc:	4b61      	ldr	r3, [pc, #388]	; (8009d44 <_dtoa_r+0x5a4>)
 8009bbe:	f7f6 fad5 	bl	800016c <__adddf3>
 8009bc2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009bc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009bca:	9611      	str	r6, [sp, #68]	; 0x44
 8009bcc:	2c00      	cmp	r4, #0
 8009bce:	d15d      	bne.n	8009c8c <_dtoa_r+0x4ec>
 8009bd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4b5c      	ldr	r3, [pc, #368]	; (8009d48 <_dtoa_r+0x5a8>)
 8009bd8:	f7f6 fac6 	bl	8000168 <__aeabi_dsub>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009be4:	4633      	mov	r3, r6
 8009be6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009be8:	f7f6 ff06 	bl	80009f8 <__aeabi_dcmpgt>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	f040 8295 	bne.w	800a11c <_dtoa_r+0x97c>
 8009bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bf8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009bfc:	f7f6 fede 	bl	80009bc <__aeabi_dcmplt>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	f040 8289 	bne.w	800a118 <_dtoa_r+0x978>
 8009c06:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f2c0 8151 	blt.w	8009eb8 <_dtoa_r+0x718>
 8009c16:	f1bb 0f0e 	cmp.w	fp, #14
 8009c1a:	f300 814d 	bgt.w	8009eb8 <_dtoa_r+0x718>
 8009c1e:	4b45      	ldr	r3, [pc, #276]	; (8009d34 <_dtoa_r+0x594>)
 8009c20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c28:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009c2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f280 80da 	bge.w	8009de8 <_dtoa_r+0x648>
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f300 80d6 	bgt.w	8009de8 <_dtoa_r+0x648>
 8009c3c:	f040 826b 	bne.w	800a116 <_dtoa_r+0x976>
 8009c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c44:	2200      	movs	r2, #0
 8009c46:	4b40      	ldr	r3, [pc, #256]	; (8009d48 <_dtoa_r+0x5a8>)
 8009c48:	f7f6 fc46 	bl	80004d8 <__aeabi_dmul>
 8009c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c50:	f7f6 fec8 	bl	80009e4 <__aeabi_dcmpge>
 8009c54:	9c08      	ldr	r4, [sp, #32]
 8009c56:	4626      	mov	r6, r4
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	f040 8241 	bne.w	800a0e0 <_dtoa_r+0x940>
 8009c5e:	2331      	movs	r3, #49	; 0x31
 8009c60:	9f03      	ldr	r7, [sp, #12]
 8009c62:	f10b 0b01 	add.w	fp, fp, #1
 8009c66:	f807 3b01 	strb.w	r3, [r7], #1
 8009c6a:	e23d      	b.n	800a0e8 <_dtoa_r+0x948>
 8009c6c:	07e2      	lsls	r2, r4, #31
 8009c6e:	d505      	bpl.n	8009c7c <_dtoa_r+0x4dc>
 8009c70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c74:	f7f6 fc30 	bl	80004d8 <__aeabi_dmul>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	3701      	adds	r7, #1
 8009c7c:	1064      	asrs	r4, r4, #1
 8009c7e:	3608      	adds	r6, #8
 8009c80:	e76d      	b.n	8009b5e <_dtoa_r+0x3be>
 8009c82:	2702      	movs	r7, #2
 8009c84:	e770      	b.n	8009b68 <_dtoa_r+0x3c8>
 8009c86:	46d8      	mov	r8, fp
 8009c88:	9c08      	ldr	r4, [sp, #32]
 8009c8a:	e78f      	b.n	8009bac <_dtoa_r+0x40c>
 8009c8c:	9903      	ldr	r1, [sp, #12]
 8009c8e:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <_dtoa_r+0x594>)
 8009c90:	4421      	add	r1, r4
 8009c92:	9112      	str	r1, [sp, #72]	; 0x48
 8009c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c9a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009c9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	d054      	beq.n	8009d50 <_dtoa_r+0x5b0>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	4928      	ldr	r1, [pc, #160]	; (8009d4c <_dtoa_r+0x5ac>)
 8009caa:	f7f6 fd3f 	bl	800072c <__aeabi_ddiv>
 8009cae:	463b      	mov	r3, r7
 8009cb0:	4632      	mov	r2, r6
 8009cb2:	f7f6 fa59 	bl	8000168 <__aeabi_dsub>
 8009cb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009cba:	9f03      	ldr	r7, [sp, #12]
 8009cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cc0:	f7f6 feba 	bl	8000a38 <__aeabi_d2iz>
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	f7f6 fb9d 	bl	8000404 <__aeabi_i2d>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cd2:	f7f6 fa49 	bl	8000168 <__aeabi_dsub>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	3430      	adds	r4, #48	; 0x30
 8009cdc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ce0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ce4:	f807 4b01 	strb.w	r4, [r7], #1
 8009ce8:	f7f6 fe68 	bl	80009bc <__aeabi_dcmplt>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d173      	bne.n	8009dd8 <_dtoa_r+0x638>
 8009cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	4911      	ldr	r1, [pc, #68]	; (8009d3c <_dtoa_r+0x59c>)
 8009cf8:	f7f6 fa36 	bl	8000168 <__aeabi_dsub>
 8009cfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d00:	f7f6 fe5c 	bl	80009bc <__aeabi_dcmplt>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f040 80b6 	bne.w	8009e76 <_dtoa_r+0x6d6>
 8009d0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d0c:	429f      	cmp	r7, r3
 8009d0e:	f43f af7a 	beq.w	8009c06 <_dtoa_r+0x466>
 8009d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d16:	2200      	movs	r2, #0
 8009d18:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <_dtoa_r+0x5a0>)
 8009d1a:	f7f6 fbdd 	bl	80004d8 <__aeabi_dmul>
 8009d1e:	2200      	movs	r2, #0
 8009d20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d28:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <_dtoa_r+0x5a0>)
 8009d2a:	f7f6 fbd5 	bl	80004d8 <__aeabi_dmul>
 8009d2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d32:	e7c3      	b.n	8009cbc <_dtoa_r+0x51c>
 8009d34:	0800ce90 	.word	0x0800ce90
 8009d38:	0800ce68 	.word	0x0800ce68
 8009d3c:	3ff00000 	.word	0x3ff00000
 8009d40:	40240000 	.word	0x40240000
 8009d44:	401c0000 	.word	0x401c0000
 8009d48:	40140000 	.word	0x40140000
 8009d4c:	3fe00000 	.word	0x3fe00000
 8009d50:	4630      	mov	r0, r6
 8009d52:	4639      	mov	r1, r7
 8009d54:	f7f6 fbc0 	bl	80004d8 <__aeabi_dmul>
 8009d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d5e:	9c03      	ldr	r4, [sp, #12]
 8009d60:	9314      	str	r3, [sp, #80]	; 0x50
 8009d62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d66:	f7f6 fe67 	bl	8000a38 <__aeabi_d2iz>
 8009d6a:	9015      	str	r0, [sp, #84]	; 0x54
 8009d6c:	f7f6 fb4a 	bl	8000404 <__aeabi_i2d>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d78:	f7f6 f9f6 	bl	8000168 <__aeabi_dsub>
 8009d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d7e:	4606      	mov	r6, r0
 8009d80:	3330      	adds	r3, #48	; 0x30
 8009d82:	f804 3b01 	strb.w	r3, [r4], #1
 8009d86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d88:	460f      	mov	r7, r1
 8009d8a:	429c      	cmp	r4, r3
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	d124      	bne.n	8009ddc <_dtoa_r+0x63c>
 8009d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d96:	4baf      	ldr	r3, [pc, #700]	; (800a054 <_dtoa_r+0x8b4>)
 8009d98:	f7f6 f9e8 	bl	800016c <__adddf3>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4630      	mov	r0, r6
 8009da2:	4639      	mov	r1, r7
 8009da4:	f7f6 fe28 	bl	80009f8 <__aeabi_dcmpgt>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d163      	bne.n	8009e74 <_dtoa_r+0x6d4>
 8009dac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009db0:	2000      	movs	r0, #0
 8009db2:	49a8      	ldr	r1, [pc, #672]	; (800a054 <_dtoa_r+0x8b4>)
 8009db4:	f7f6 f9d8 	bl	8000168 <__aeabi_dsub>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	f7f6 fdfc 	bl	80009bc <__aeabi_dcmplt>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	f43f af1e 	beq.w	8009c06 <_dtoa_r+0x466>
 8009dca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009dcc:	1e7b      	subs	r3, r7, #1
 8009dce:	9314      	str	r3, [sp, #80]	; 0x50
 8009dd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009dd4:	2b30      	cmp	r3, #48	; 0x30
 8009dd6:	d0f8      	beq.n	8009dca <_dtoa_r+0x62a>
 8009dd8:	46c3      	mov	fp, r8
 8009dda:	e03b      	b.n	8009e54 <_dtoa_r+0x6b4>
 8009ddc:	4b9e      	ldr	r3, [pc, #632]	; (800a058 <_dtoa_r+0x8b8>)
 8009dde:	f7f6 fb7b 	bl	80004d8 <__aeabi_dmul>
 8009de2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009de6:	e7bc      	b.n	8009d62 <_dtoa_r+0x5c2>
 8009de8:	9f03      	ldr	r7, [sp, #12]
 8009dea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009dee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009df2:	4640      	mov	r0, r8
 8009df4:	4649      	mov	r1, r9
 8009df6:	f7f6 fc99 	bl	800072c <__aeabi_ddiv>
 8009dfa:	f7f6 fe1d 	bl	8000a38 <__aeabi_d2iz>
 8009dfe:	4604      	mov	r4, r0
 8009e00:	f7f6 fb00 	bl	8000404 <__aeabi_i2d>
 8009e04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e08:	f7f6 fb66 	bl	80004d8 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4640      	mov	r0, r8
 8009e12:	4649      	mov	r1, r9
 8009e14:	f7f6 f9a8 	bl	8000168 <__aeabi_dsub>
 8009e18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009e1c:	f807 6b01 	strb.w	r6, [r7], #1
 8009e20:	9e03      	ldr	r6, [sp, #12]
 8009e22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009e26:	1bbe      	subs	r6, r7, r6
 8009e28:	45b4      	cmp	ip, r6
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	d136      	bne.n	8009e9e <_dtoa_r+0x6fe>
 8009e30:	f7f6 f99c 	bl	800016c <__adddf3>
 8009e34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e38:	4680      	mov	r8, r0
 8009e3a:	4689      	mov	r9, r1
 8009e3c:	f7f6 fddc 	bl	80009f8 <__aeabi_dcmpgt>
 8009e40:	bb58      	cbnz	r0, 8009e9a <_dtoa_r+0x6fa>
 8009e42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e46:	4640      	mov	r0, r8
 8009e48:	4649      	mov	r1, r9
 8009e4a:	f7f6 fdad 	bl	80009a8 <__aeabi_dcmpeq>
 8009e4e:	b108      	cbz	r0, 8009e54 <_dtoa_r+0x6b4>
 8009e50:	07e3      	lsls	r3, r4, #31
 8009e52:	d422      	bmi.n	8009e9a <_dtoa_r+0x6fa>
 8009e54:	4651      	mov	r1, sl
 8009e56:	4628      	mov	r0, r5
 8009e58:	f000 fbc2 	bl	800a5e0 <_Bfree>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009e60:	703b      	strb	r3, [r7, #0]
 8009e62:	f10b 0301 	add.w	r3, fp, #1
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f43f ace6 	beq.w	800983c <_dtoa_r+0x9c>
 8009e70:	601f      	str	r7, [r3, #0]
 8009e72:	e4e3      	b.n	800983c <_dtoa_r+0x9c>
 8009e74:	4627      	mov	r7, r4
 8009e76:	463b      	mov	r3, r7
 8009e78:	461f      	mov	r7, r3
 8009e7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e7e:	2a39      	cmp	r2, #57	; 0x39
 8009e80:	d107      	bne.n	8009e92 <_dtoa_r+0x6f2>
 8009e82:	9a03      	ldr	r2, [sp, #12]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d1f7      	bne.n	8009e78 <_dtoa_r+0x6d8>
 8009e88:	2230      	movs	r2, #48	; 0x30
 8009e8a:	9903      	ldr	r1, [sp, #12]
 8009e8c:	f108 0801 	add.w	r8, r8, #1
 8009e90:	700a      	strb	r2, [r1, #0]
 8009e92:	781a      	ldrb	r2, [r3, #0]
 8009e94:	3201      	adds	r2, #1
 8009e96:	701a      	strb	r2, [r3, #0]
 8009e98:	e79e      	b.n	8009dd8 <_dtoa_r+0x638>
 8009e9a:	46d8      	mov	r8, fp
 8009e9c:	e7eb      	b.n	8009e76 <_dtoa_r+0x6d6>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	4b6d      	ldr	r3, [pc, #436]	; (800a058 <_dtoa_r+0x8b8>)
 8009ea2:	f7f6 fb19 	bl	80004d8 <__aeabi_dmul>
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4680      	mov	r8, r0
 8009eac:	4689      	mov	r9, r1
 8009eae:	f7f6 fd7b 	bl	80009a8 <__aeabi_dcmpeq>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d09b      	beq.n	8009dee <_dtoa_r+0x64e>
 8009eb6:	e7cd      	b.n	8009e54 <_dtoa_r+0x6b4>
 8009eb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009eba:	2a00      	cmp	r2, #0
 8009ebc:	f000 80c4 	beq.w	800a048 <_dtoa_r+0x8a8>
 8009ec0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009ec2:	2a01      	cmp	r2, #1
 8009ec4:	f300 80a8 	bgt.w	800a018 <_dtoa_r+0x878>
 8009ec8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009eca:	2a00      	cmp	r2, #0
 8009ecc:	f000 80a0 	beq.w	800a010 <_dtoa_r+0x870>
 8009ed0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ed4:	464f      	mov	r7, r9
 8009ed6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eda:	2101      	movs	r1, #1
 8009edc:	441a      	add	r2, r3
 8009ede:	4628      	mov	r0, r5
 8009ee0:	4499      	add	r9, r3
 8009ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ee4:	f000 fc32 	bl	800a74c <__i2b>
 8009ee8:	4606      	mov	r6, r0
 8009eea:	b15f      	cbz	r7, 8009f04 <_dtoa_r+0x764>
 8009eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	dd08      	ble.n	8009f04 <_dtoa_r+0x764>
 8009ef2:	42bb      	cmp	r3, r7
 8009ef4:	bfa8      	it	ge
 8009ef6:	463b      	movge	r3, r7
 8009ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009efa:	eba9 0903 	sub.w	r9, r9, r3
 8009efe:	1aff      	subs	r7, r7, r3
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	9309      	str	r3, [sp, #36]	; 0x24
 8009f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f06:	b1f3      	cbz	r3, 8009f46 <_dtoa_r+0x7a6>
 8009f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f000 80a0 	beq.w	800a050 <_dtoa_r+0x8b0>
 8009f10:	2c00      	cmp	r4, #0
 8009f12:	dd10      	ble.n	8009f36 <_dtoa_r+0x796>
 8009f14:	4631      	mov	r1, r6
 8009f16:	4622      	mov	r2, r4
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f000 fcd5 	bl	800a8c8 <__pow5mult>
 8009f1e:	4652      	mov	r2, sl
 8009f20:	4601      	mov	r1, r0
 8009f22:	4606      	mov	r6, r0
 8009f24:	4628      	mov	r0, r5
 8009f26:	f000 fc27 	bl	800a778 <__multiply>
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	4651      	mov	r1, sl
 8009f2e:	4628      	mov	r0, r5
 8009f30:	f000 fb56 	bl	800a5e0 <_Bfree>
 8009f34:	46c2      	mov	sl, r8
 8009f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f38:	1b1a      	subs	r2, r3, r4
 8009f3a:	d004      	beq.n	8009f46 <_dtoa_r+0x7a6>
 8009f3c:	4651      	mov	r1, sl
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f000 fcc2 	bl	800a8c8 <__pow5mult>
 8009f44:	4682      	mov	sl, r0
 8009f46:	2101      	movs	r1, #1
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f000 fbff 	bl	800a74c <__i2b>
 8009f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f50:	4604      	mov	r4, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f340 8082 	ble.w	800a05c <_dtoa_r+0x8bc>
 8009f58:	461a      	mov	r2, r3
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f000 fcb3 	bl	800a8c8 <__pow5mult>
 8009f62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f64:	4604      	mov	r4, r0
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	dd7b      	ble.n	800a062 <_dtoa_r+0x8c2>
 8009f6a:	f04f 0800 	mov.w	r8, #0
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f74:	6918      	ldr	r0, [r3, #16]
 8009f76:	f000 fb9b 	bl	800a6b0 <__hi0bits>
 8009f7a:	f1c0 0020 	rsb	r0, r0, #32
 8009f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f80:	4418      	add	r0, r3
 8009f82:	f010 001f 	ands.w	r0, r0, #31
 8009f86:	f000 8092 	beq.w	800a0ae <_dtoa_r+0x90e>
 8009f8a:	f1c0 0320 	rsb	r3, r0, #32
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	f340 8085 	ble.w	800a09e <_dtoa_r+0x8fe>
 8009f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f96:	f1c0 001c 	rsb	r0, r0, #28
 8009f9a:	4403      	add	r3, r0
 8009f9c:	4481      	add	r9, r0
 8009f9e:	4407      	add	r7, r0
 8009fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa2:	f1b9 0f00 	cmp.w	r9, #0
 8009fa6:	dd05      	ble.n	8009fb4 <_dtoa_r+0x814>
 8009fa8:	4651      	mov	r1, sl
 8009faa:	464a      	mov	r2, r9
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 fce5 	bl	800a97c <__lshift>
 8009fb2:	4682      	mov	sl, r0
 8009fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dd05      	ble.n	8009fc6 <_dtoa_r+0x826>
 8009fba:	4621      	mov	r1, r4
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 fcdc 	bl	800a97c <__lshift>
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d072      	beq.n	800a0b2 <_dtoa_r+0x912>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4650      	mov	r0, sl
 8009fd0:	f000 fd40 	bl	800aa54 <__mcmp>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	da6c      	bge.n	800a0b2 <_dtoa_r+0x912>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	4651      	mov	r1, sl
 8009fdc:	220a      	movs	r2, #10
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f000 fb20 	bl	800a624 <__multadd>
 8009fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe6:	4682      	mov	sl, r0
 8009fe8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 81ac 	beq.w	800a34a <_dtoa_r+0xbaa>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	220a      	movs	r2, #10
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 fb13 	bl	800a624 <__multadd>
 8009ffe:	9b06      	ldr	r3, [sp, #24]
 800a000:	4606      	mov	r6, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	f300 8093 	bgt.w	800a12e <_dtoa_r+0x98e>
 800a008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	dc59      	bgt.n	800a0c2 <_dtoa_r+0x922>
 800a00e:	e08e      	b.n	800a12e <_dtoa_r+0x98e>
 800a010:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a012:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a016:	e75d      	b.n	8009ed4 <_dtoa_r+0x734>
 800a018:	9b08      	ldr	r3, [sp, #32]
 800a01a:	1e5c      	subs	r4, r3, #1
 800a01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01e:	42a3      	cmp	r3, r4
 800a020:	bfbf      	itttt	lt
 800a022:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a024:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a026:	1ae3      	sublt	r3, r4, r3
 800a028:	18d2      	addlt	r2, r2, r3
 800a02a:	bfa8      	it	ge
 800a02c:	1b1c      	subge	r4, r3, r4
 800a02e:	9b08      	ldr	r3, [sp, #32]
 800a030:	bfbe      	ittt	lt
 800a032:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a034:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a036:	2400      	movlt	r4, #0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bfb5      	itete	lt
 800a03c:	eba9 0703 	sublt.w	r7, r9, r3
 800a040:	464f      	movge	r7, r9
 800a042:	2300      	movlt	r3, #0
 800a044:	9b08      	ldrge	r3, [sp, #32]
 800a046:	e747      	b.n	8009ed8 <_dtoa_r+0x738>
 800a048:	464f      	mov	r7, r9
 800a04a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a04c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a04e:	e74c      	b.n	8009eea <_dtoa_r+0x74a>
 800a050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a052:	e773      	b.n	8009f3c <_dtoa_r+0x79c>
 800a054:	3fe00000 	.word	0x3fe00000
 800a058:	40240000 	.word	0x40240000
 800a05c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a05e:	2b01      	cmp	r3, #1
 800a060:	dc18      	bgt.n	800a094 <_dtoa_r+0x8f4>
 800a062:	9b04      	ldr	r3, [sp, #16]
 800a064:	b9b3      	cbnz	r3, 800a094 <_dtoa_r+0x8f4>
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a06c:	b993      	cbnz	r3, 800a094 <_dtoa_r+0x8f4>
 800a06e:	9b05      	ldr	r3, [sp, #20]
 800a070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a074:	0d1b      	lsrs	r3, r3, #20
 800a076:	051b      	lsls	r3, r3, #20
 800a078:	b17b      	cbz	r3, 800a09a <_dtoa_r+0x8fa>
 800a07a:	f04f 0801 	mov.w	r8, #1
 800a07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a080:	f109 0901 	add.w	r9, r9, #1
 800a084:	3301      	adds	r3, #1
 800a086:	9309      	str	r3, [sp, #36]	; 0x24
 800a088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f47f af6f 	bne.w	8009f6e <_dtoa_r+0x7ce>
 800a090:	2001      	movs	r0, #1
 800a092:	e774      	b.n	8009f7e <_dtoa_r+0x7de>
 800a094:	f04f 0800 	mov.w	r8, #0
 800a098:	e7f6      	b.n	800a088 <_dtoa_r+0x8e8>
 800a09a:	4698      	mov	r8, r3
 800a09c:	e7f4      	b.n	800a088 <_dtoa_r+0x8e8>
 800a09e:	d080      	beq.n	8009fa2 <_dtoa_r+0x802>
 800a0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a2:	331c      	adds	r3, #28
 800a0a4:	441a      	add	r2, r3
 800a0a6:	4499      	add	r9, r3
 800a0a8:	441f      	add	r7, r3
 800a0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ac:	e779      	b.n	8009fa2 <_dtoa_r+0x802>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	e7f6      	b.n	800a0a0 <_dtoa_r+0x900>
 800a0b2:	9b08      	ldr	r3, [sp, #32]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dc34      	bgt.n	800a122 <_dtoa_r+0x982>
 800a0b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	dd31      	ble.n	800a122 <_dtoa_r+0x982>
 800a0be:	9b08      	ldr	r3, [sp, #32]
 800a0c0:	9306      	str	r3, [sp, #24]
 800a0c2:	9b06      	ldr	r3, [sp, #24]
 800a0c4:	b963      	cbnz	r3, 800a0e0 <_dtoa_r+0x940>
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	2205      	movs	r2, #5
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f000 faaa 	bl	800a624 <__multadd>
 800a0d0:	4601      	mov	r1, r0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4650      	mov	r0, sl
 800a0d6:	f000 fcbd 	bl	800aa54 <__mcmp>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	f73f adbf 	bgt.w	8009c5e <_dtoa_r+0x4be>
 800a0e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0e2:	9f03      	ldr	r7, [sp, #12]
 800a0e4:	ea6f 0b03 	mvn.w	fp, r3
 800a0e8:	f04f 0800 	mov.w	r8, #0
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f000 fa76 	bl	800a5e0 <_Bfree>
 800a0f4:	2e00      	cmp	r6, #0
 800a0f6:	f43f aead 	beq.w	8009e54 <_dtoa_r+0x6b4>
 800a0fa:	f1b8 0f00 	cmp.w	r8, #0
 800a0fe:	d005      	beq.n	800a10c <_dtoa_r+0x96c>
 800a100:	45b0      	cmp	r8, r6
 800a102:	d003      	beq.n	800a10c <_dtoa_r+0x96c>
 800a104:	4641      	mov	r1, r8
 800a106:	4628      	mov	r0, r5
 800a108:	f000 fa6a 	bl	800a5e0 <_Bfree>
 800a10c:	4631      	mov	r1, r6
 800a10e:	4628      	mov	r0, r5
 800a110:	f000 fa66 	bl	800a5e0 <_Bfree>
 800a114:	e69e      	b.n	8009e54 <_dtoa_r+0x6b4>
 800a116:	2400      	movs	r4, #0
 800a118:	4626      	mov	r6, r4
 800a11a:	e7e1      	b.n	800a0e0 <_dtoa_r+0x940>
 800a11c:	46c3      	mov	fp, r8
 800a11e:	4626      	mov	r6, r4
 800a120:	e59d      	b.n	8009c5e <_dtoa_r+0x4be>
 800a122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 80c8 	beq.w	800a2ba <_dtoa_r+0xb1a>
 800a12a:	9b08      	ldr	r3, [sp, #32]
 800a12c:	9306      	str	r3, [sp, #24]
 800a12e:	2f00      	cmp	r7, #0
 800a130:	dd05      	ble.n	800a13e <_dtoa_r+0x99e>
 800a132:	4631      	mov	r1, r6
 800a134:	463a      	mov	r2, r7
 800a136:	4628      	mov	r0, r5
 800a138:	f000 fc20 	bl	800a97c <__lshift>
 800a13c:	4606      	mov	r6, r0
 800a13e:	f1b8 0f00 	cmp.w	r8, #0
 800a142:	d05b      	beq.n	800a1fc <_dtoa_r+0xa5c>
 800a144:	4628      	mov	r0, r5
 800a146:	6871      	ldr	r1, [r6, #4]
 800a148:	f000 fa0a 	bl	800a560 <_Balloc>
 800a14c:	4607      	mov	r7, r0
 800a14e:	b928      	cbnz	r0, 800a15c <_dtoa_r+0x9bc>
 800a150:	4602      	mov	r2, r0
 800a152:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a156:	4b81      	ldr	r3, [pc, #516]	; (800a35c <_dtoa_r+0xbbc>)
 800a158:	f7ff bb36 	b.w	80097c8 <_dtoa_r+0x28>
 800a15c:	6932      	ldr	r2, [r6, #16]
 800a15e:	f106 010c 	add.w	r1, r6, #12
 800a162:	3202      	adds	r2, #2
 800a164:	0092      	lsls	r2, r2, #2
 800a166:	300c      	adds	r0, #12
 800a168:	f000 ff9e 	bl	800b0a8 <memcpy>
 800a16c:	2201      	movs	r2, #1
 800a16e:	4639      	mov	r1, r7
 800a170:	4628      	mov	r0, r5
 800a172:	f000 fc03 	bl	800a97c <__lshift>
 800a176:	46b0      	mov	r8, r6
 800a178:	4606      	mov	r6, r0
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	9a03      	ldr	r2, [sp, #12]
 800a17e:	3301      	adds	r3, #1
 800a180:	9308      	str	r3, [sp, #32]
 800a182:	9b06      	ldr	r3, [sp, #24]
 800a184:	4413      	add	r3, r2
 800a186:	930b      	str	r3, [sp, #44]	; 0x2c
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	930a      	str	r3, [sp, #40]	; 0x28
 800a190:	9b08      	ldr	r3, [sp, #32]
 800a192:	4621      	mov	r1, r4
 800a194:	3b01      	subs	r3, #1
 800a196:	4650      	mov	r0, sl
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	f7ff fa78 	bl	800968e <quorem>
 800a19e:	4641      	mov	r1, r8
 800a1a0:	9006      	str	r0, [sp, #24]
 800a1a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	f000 fc54 	bl	800aa54 <__mcmp>
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	9009      	str	r0, [sp, #36]	; 0x24
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f000 fc6a 	bl	800aa8c <__mdiff>
 800a1b8:	68c2      	ldr	r2, [r0, #12]
 800a1ba:	4607      	mov	r7, r0
 800a1bc:	bb02      	cbnz	r2, 800a200 <_dtoa_r+0xa60>
 800a1be:	4601      	mov	r1, r0
 800a1c0:	4650      	mov	r0, sl
 800a1c2:	f000 fc47 	bl	800aa54 <__mcmp>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	920c      	str	r2, [sp, #48]	; 0x30
 800a1ce:	f000 fa07 	bl	800a5e0 <_Bfree>
 800a1d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1d6:	9f08      	ldr	r7, [sp, #32]
 800a1d8:	ea43 0102 	orr.w	r1, r3, r2
 800a1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1de:	4319      	orrs	r1, r3
 800a1e0:	d110      	bne.n	800a204 <_dtoa_r+0xa64>
 800a1e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a1e6:	d029      	beq.n	800a23c <_dtoa_r+0xa9c>
 800a1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	dd02      	ble.n	800a1f4 <_dtoa_r+0xa54>
 800a1ee:	9b06      	ldr	r3, [sp, #24]
 800a1f0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a1f4:	9b04      	ldr	r3, [sp, #16]
 800a1f6:	f883 9000 	strb.w	r9, [r3]
 800a1fa:	e777      	b.n	800a0ec <_dtoa_r+0x94c>
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	e7ba      	b.n	800a176 <_dtoa_r+0x9d6>
 800a200:	2201      	movs	r2, #1
 800a202:	e7e1      	b.n	800a1c8 <_dtoa_r+0xa28>
 800a204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a206:	2b00      	cmp	r3, #0
 800a208:	db04      	blt.n	800a214 <_dtoa_r+0xa74>
 800a20a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a20c:	430b      	orrs	r3, r1
 800a20e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a210:	430b      	orrs	r3, r1
 800a212:	d120      	bne.n	800a256 <_dtoa_r+0xab6>
 800a214:	2a00      	cmp	r2, #0
 800a216:	dded      	ble.n	800a1f4 <_dtoa_r+0xa54>
 800a218:	4651      	mov	r1, sl
 800a21a:	2201      	movs	r2, #1
 800a21c:	4628      	mov	r0, r5
 800a21e:	f000 fbad 	bl	800a97c <__lshift>
 800a222:	4621      	mov	r1, r4
 800a224:	4682      	mov	sl, r0
 800a226:	f000 fc15 	bl	800aa54 <__mcmp>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	dc03      	bgt.n	800a236 <_dtoa_r+0xa96>
 800a22e:	d1e1      	bne.n	800a1f4 <_dtoa_r+0xa54>
 800a230:	f019 0f01 	tst.w	r9, #1
 800a234:	d0de      	beq.n	800a1f4 <_dtoa_r+0xa54>
 800a236:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a23a:	d1d8      	bne.n	800a1ee <_dtoa_r+0xa4e>
 800a23c:	2339      	movs	r3, #57	; 0x39
 800a23e:	9a04      	ldr	r2, [sp, #16]
 800a240:	7013      	strb	r3, [r2, #0]
 800a242:	463b      	mov	r3, r7
 800a244:	461f      	mov	r7, r3
 800a246:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	2a39      	cmp	r2, #57	; 0x39
 800a24e:	d06b      	beq.n	800a328 <_dtoa_r+0xb88>
 800a250:	3201      	adds	r2, #1
 800a252:	701a      	strb	r2, [r3, #0]
 800a254:	e74a      	b.n	800a0ec <_dtoa_r+0x94c>
 800a256:	2a00      	cmp	r2, #0
 800a258:	dd07      	ble.n	800a26a <_dtoa_r+0xaca>
 800a25a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a25e:	d0ed      	beq.n	800a23c <_dtoa_r+0xa9c>
 800a260:	9a04      	ldr	r2, [sp, #16]
 800a262:	f109 0301 	add.w	r3, r9, #1
 800a266:	7013      	strb	r3, [r2, #0]
 800a268:	e740      	b.n	800a0ec <_dtoa_r+0x94c>
 800a26a:	9b08      	ldr	r3, [sp, #32]
 800a26c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a26e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a272:	4293      	cmp	r3, r2
 800a274:	d042      	beq.n	800a2fc <_dtoa_r+0xb5c>
 800a276:	4651      	mov	r1, sl
 800a278:	2300      	movs	r3, #0
 800a27a:	220a      	movs	r2, #10
 800a27c:	4628      	mov	r0, r5
 800a27e:	f000 f9d1 	bl	800a624 <__multadd>
 800a282:	45b0      	cmp	r8, r6
 800a284:	4682      	mov	sl, r0
 800a286:	f04f 0300 	mov.w	r3, #0
 800a28a:	f04f 020a 	mov.w	r2, #10
 800a28e:	4641      	mov	r1, r8
 800a290:	4628      	mov	r0, r5
 800a292:	d107      	bne.n	800a2a4 <_dtoa_r+0xb04>
 800a294:	f000 f9c6 	bl	800a624 <__multadd>
 800a298:	4680      	mov	r8, r0
 800a29a:	4606      	mov	r6, r0
 800a29c:	9b08      	ldr	r3, [sp, #32]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	9308      	str	r3, [sp, #32]
 800a2a2:	e775      	b.n	800a190 <_dtoa_r+0x9f0>
 800a2a4:	f000 f9be 	bl	800a624 <__multadd>
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4680      	mov	r8, r0
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	220a      	movs	r2, #10
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	f000 f9b7 	bl	800a624 <__multadd>
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	e7f0      	b.n	800a29c <_dtoa_r+0xafc>
 800a2ba:	9b08      	ldr	r3, [sp, #32]
 800a2bc:	9306      	str	r3, [sp, #24]
 800a2be:	9f03      	ldr	r7, [sp, #12]
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4650      	mov	r0, sl
 800a2c4:	f7ff f9e3 	bl	800968e <quorem>
 800a2c8:	9b03      	ldr	r3, [sp, #12]
 800a2ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a2ce:	f807 9b01 	strb.w	r9, [r7], #1
 800a2d2:	1afa      	subs	r2, r7, r3
 800a2d4:	9b06      	ldr	r3, [sp, #24]
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	dd07      	ble.n	800a2ea <_dtoa_r+0xb4a>
 800a2da:	4651      	mov	r1, sl
 800a2dc:	2300      	movs	r3, #0
 800a2de:	220a      	movs	r2, #10
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f000 f99f 	bl	800a624 <__multadd>
 800a2e6:	4682      	mov	sl, r0
 800a2e8:	e7ea      	b.n	800a2c0 <_dtoa_r+0xb20>
 800a2ea:	9b06      	ldr	r3, [sp, #24]
 800a2ec:	f04f 0800 	mov.w	r8, #0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	bfcc      	ite	gt
 800a2f4:	461f      	movgt	r7, r3
 800a2f6:	2701      	movle	r7, #1
 800a2f8:	9b03      	ldr	r3, [sp, #12]
 800a2fa:	441f      	add	r7, r3
 800a2fc:	4651      	mov	r1, sl
 800a2fe:	2201      	movs	r2, #1
 800a300:	4628      	mov	r0, r5
 800a302:	f000 fb3b 	bl	800a97c <__lshift>
 800a306:	4621      	mov	r1, r4
 800a308:	4682      	mov	sl, r0
 800a30a:	f000 fba3 	bl	800aa54 <__mcmp>
 800a30e:	2800      	cmp	r0, #0
 800a310:	dc97      	bgt.n	800a242 <_dtoa_r+0xaa2>
 800a312:	d102      	bne.n	800a31a <_dtoa_r+0xb7a>
 800a314:	f019 0f01 	tst.w	r9, #1
 800a318:	d193      	bne.n	800a242 <_dtoa_r+0xaa2>
 800a31a:	463b      	mov	r3, r7
 800a31c:	461f      	mov	r7, r3
 800a31e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a322:	2a30      	cmp	r2, #48	; 0x30
 800a324:	d0fa      	beq.n	800a31c <_dtoa_r+0xb7c>
 800a326:	e6e1      	b.n	800a0ec <_dtoa_r+0x94c>
 800a328:	9a03      	ldr	r2, [sp, #12]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d18a      	bne.n	800a244 <_dtoa_r+0xaa4>
 800a32e:	2331      	movs	r3, #49	; 0x31
 800a330:	f10b 0b01 	add.w	fp, fp, #1
 800a334:	e797      	b.n	800a266 <_dtoa_r+0xac6>
 800a336:	4b0a      	ldr	r3, [pc, #40]	; (800a360 <_dtoa_r+0xbc0>)
 800a338:	f7ff ba9f 	b.w	800987a <_dtoa_r+0xda>
 800a33c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f47f aa77 	bne.w	8009832 <_dtoa_r+0x92>
 800a344:	4b07      	ldr	r3, [pc, #28]	; (800a364 <_dtoa_r+0xbc4>)
 800a346:	f7ff ba98 	b.w	800987a <_dtoa_r+0xda>
 800a34a:	9b06      	ldr	r3, [sp, #24]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	dcb6      	bgt.n	800a2be <_dtoa_r+0xb1e>
 800a350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a352:	2b02      	cmp	r3, #2
 800a354:	f73f aeb5 	bgt.w	800a0c2 <_dtoa_r+0x922>
 800a358:	e7b1      	b.n	800a2be <_dtoa_r+0xb1e>
 800a35a:	bf00      	nop
 800a35c:	0800cdfe 	.word	0x0800cdfe
 800a360:	0800cd5e 	.word	0x0800cd5e
 800a364:	0800cd82 	.word	0x0800cd82

0800a368 <_free_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4605      	mov	r5, r0
 800a36c:	2900      	cmp	r1, #0
 800a36e:	d040      	beq.n	800a3f2 <_free_r+0x8a>
 800a370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a374:	1f0c      	subs	r4, r1, #4
 800a376:	2b00      	cmp	r3, #0
 800a378:	bfb8      	it	lt
 800a37a:	18e4      	addlt	r4, r4, r3
 800a37c:	f000 f8e4 	bl	800a548 <__malloc_lock>
 800a380:	4a1c      	ldr	r2, [pc, #112]	; (800a3f4 <_free_r+0x8c>)
 800a382:	6813      	ldr	r3, [r2, #0]
 800a384:	b933      	cbnz	r3, 800a394 <_free_r+0x2c>
 800a386:	6063      	str	r3, [r4, #4]
 800a388:	6014      	str	r4, [r2, #0]
 800a38a:	4628      	mov	r0, r5
 800a38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a390:	f000 b8e0 	b.w	800a554 <__malloc_unlock>
 800a394:	42a3      	cmp	r3, r4
 800a396:	d908      	bls.n	800a3aa <_free_r+0x42>
 800a398:	6820      	ldr	r0, [r4, #0]
 800a39a:	1821      	adds	r1, r4, r0
 800a39c:	428b      	cmp	r3, r1
 800a39e:	bf01      	itttt	eq
 800a3a0:	6819      	ldreq	r1, [r3, #0]
 800a3a2:	685b      	ldreq	r3, [r3, #4]
 800a3a4:	1809      	addeq	r1, r1, r0
 800a3a6:	6021      	streq	r1, [r4, #0]
 800a3a8:	e7ed      	b.n	800a386 <_free_r+0x1e>
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	b10b      	cbz	r3, 800a3b4 <_free_r+0x4c>
 800a3b0:	42a3      	cmp	r3, r4
 800a3b2:	d9fa      	bls.n	800a3aa <_free_r+0x42>
 800a3b4:	6811      	ldr	r1, [r2, #0]
 800a3b6:	1850      	adds	r0, r2, r1
 800a3b8:	42a0      	cmp	r0, r4
 800a3ba:	d10b      	bne.n	800a3d4 <_free_r+0x6c>
 800a3bc:	6820      	ldr	r0, [r4, #0]
 800a3be:	4401      	add	r1, r0
 800a3c0:	1850      	adds	r0, r2, r1
 800a3c2:	4283      	cmp	r3, r0
 800a3c4:	6011      	str	r1, [r2, #0]
 800a3c6:	d1e0      	bne.n	800a38a <_free_r+0x22>
 800a3c8:	6818      	ldr	r0, [r3, #0]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	4408      	add	r0, r1
 800a3ce:	6010      	str	r0, [r2, #0]
 800a3d0:	6053      	str	r3, [r2, #4]
 800a3d2:	e7da      	b.n	800a38a <_free_r+0x22>
 800a3d4:	d902      	bls.n	800a3dc <_free_r+0x74>
 800a3d6:	230c      	movs	r3, #12
 800a3d8:	602b      	str	r3, [r5, #0]
 800a3da:	e7d6      	b.n	800a38a <_free_r+0x22>
 800a3dc:	6820      	ldr	r0, [r4, #0]
 800a3de:	1821      	adds	r1, r4, r0
 800a3e0:	428b      	cmp	r3, r1
 800a3e2:	bf01      	itttt	eq
 800a3e4:	6819      	ldreq	r1, [r3, #0]
 800a3e6:	685b      	ldreq	r3, [r3, #4]
 800a3e8:	1809      	addeq	r1, r1, r0
 800a3ea:	6021      	streq	r1, [r4, #0]
 800a3ec:	6063      	str	r3, [r4, #4]
 800a3ee:	6054      	str	r4, [r2, #4]
 800a3f0:	e7cb      	b.n	800a38a <_free_r+0x22>
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	200006ac 	.word	0x200006ac

0800a3f8 <malloc>:
 800a3f8:	4b02      	ldr	r3, [pc, #8]	; (800a404 <malloc+0xc>)
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	6818      	ldr	r0, [r3, #0]
 800a3fe:	f000 b823 	b.w	800a448 <_malloc_r>
 800a402:	bf00      	nop
 800a404:	20000144 	.word	0x20000144

0800a408 <sbrk_aligned>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	4e0e      	ldr	r6, [pc, #56]	; (800a444 <sbrk_aligned+0x3c>)
 800a40c:	460c      	mov	r4, r1
 800a40e:	6831      	ldr	r1, [r6, #0]
 800a410:	4605      	mov	r5, r0
 800a412:	b911      	cbnz	r1, 800a41a <sbrk_aligned+0x12>
 800a414:	f000 fe38 	bl	800b088 <_sbrk_r>
 800a418:	6030      	str	r0, [r6, #0]
 800a41a:	4621      	mov	r1, r4
 800a41c:	4628      	mov	r0, r5
 800a41e:	f000 fe33 	bl	800b088 <_sbrk_r>
 800a422:	1c43      	adds	r3, r0, #1
 800a424:	d00a      	beq.n	800a43c <sbrk_aligned+0x34>
 800a426:	1cc4      	adds	r4, r0, #3
 800a428:	f024 0403 	bic.w	r4, r4, #3
 800a42c:	42a0      	cmp	r0, r4
 800a42e:	d007      	beq.n	800a440 <sbrk_aligned+0x38>
 800a430:	1a21      	subs	r1, r4, r0
 800a432:	4628      	mov	r0, r5
 800a434:	f000 fe28 	bl	800b088 <_sbrk_r>
 800a438:	3001      	adds	r0, #1
 800a43a:	d101      	bne.n	800a440 <sbrk_aligned+0x38>
 800a43c:	f04f 34ff 	mov.w	r4, #4294967295
 800a440:	4620      	mov	r0, r4
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	200006b0 	.word	0x200006b0

0800a448 <_malloc_r>:
 800a448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a44c:	1ccd      	adds	r5, r1, #3
 800a44e:	f025 0503 	bic.w	r5, r5, #3
 800a452:	3508      	adds	r5, #8
 800a454:	2d0c      	cmp	r5, #12
 800a456:	bf38      	it	cc
 800a458:	250c      	movcc	r5, #12
 800a45a:	2d00      	cmp	r5, #0
 800a45c:	4607      	mov	r7, r0
 800a45e:	db01      	blt.n	800a464 <_malloc_r+0x1c>
 800a460:	42a9      	cmp	r1, r5
 800a462:	d905      	bls.n	800a470 <_malloc_r+0x28>
 800a464:	230c      	movs	r3, #12
 800a466:	2600      	movs	r6, #0
 800a468:	603b      	str	r3, [r7, #0]
 800a46a:	4630      	mov	r0, r6
 800a46c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a470:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a544 <_malloc_r+0xfc>
 800a474:	f000 f868 	bl	800a548 <__malloc_lock>
 800a478:	f8d8 3000 	ldr.w	r3, [r8]
 800a47c:	461c      	mov	r4, r3
 800a47e:	bb5c      	cbnz	r4, 800a4d8 <_malloc_r+0x90>
 800a480:	4629      	mov	r1, r5
 800a482:	4638      	mov	r0, r7
 800a484:	f7ff ffc0 	bl	800a408 <sbrk_aligned>
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	4604      	mov	r4, r0
 800a48c:	d155      	bne.n	800a53a <_malloc_r+0xf2>
 800a48e:	f8d8 4000 	ldr.w	r4, [r8]
 800a492:	4626      	mov	r6, r4
 800a494:	2e00      	cmp	r6, #0
 800a496:	d145      	bne.n	800a524 <_malloc_r+0xdc>
 800a498:	2c00      	cmp	r4, #0
 800a49a:	d048      	beq.n	800a52e <_malloc_r+0xe6>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	eb04 0903 	add.w	r9, r4, r3
 800a4a6:	f000 fdef 	bl	800b088 <_sbrk_r>
 800a4aa:	4581      	cmp	r9, r0
 800a4ac:	d13f      	bne.n	800a52e <_malloc_r+0xe6>
 800a4ae:	6821      	ldr	r1, [r4, #0]
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	1a6d      	subs	r5, r5, r1
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	f7ff ffa7 	bl	800a408 <sbrk_aligned>
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	d037      	beq.n	800a52e <_malloc_r+0xe6>
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	442b      	add	r3, r5
 800a4c2:	6023      	str	r3, [r4, #0]
 800a4c4:	f8d8 3000 	ldr.w	r3, [r8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d038      	beq.n	800a53e <_malloc_r+0xf6>
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	42a2      	cmp	r2, r4
 800a4d0:	d12b      	bne.n	800a52a <_malloc_r+0xe2>
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	605a      	str	r2, [r3, #4]
 800a4d6:	e00f      	b.n	800a4f8 <_malloc_r+0xb0>
 800a4d8:	6822      	ldr	r2, [r4, #0]
 800a4da:	1b52      	subs	r2, r2, r5
 800a4dc:	d41f      	bmi.n	800a51e <_malloc_r+0xd6>
 800a4de:	2a0b      	cmp	r2, #11
 800a4e0:	d917      	bls.n	800a512 <_malloc_r+0xca>
 800a4e2:	1961      	adds	r1, r4, r5
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	6025      	str	r5, [r4, #0]
 800a4e8:	bf18      	it	ne
 800a4ea:	6059      	strne	r1, [r3, #4]
 800a4ec:	6863      	ldr	r3, [r4, #4]
 800a4ee:	bf08      	it	eq
 800a4f0:	f8c8 1000 	streq.w	r1, [r8]
 800a4f4:	5162      	str	r2, [r4, r5]
 800a4f6:	604b      	str	r3, [r1, #4]
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f104 060b 	add.w	r6, r4, #11
 800a4fe:	f000 f829 	bl	800a554 <__malloc_unlock>
 800a502:	f026 0607 	bic.w	r6, r6, #7
 800a506:	1d23      	adds	r3, r4, #4
 800a508:	1af2      	subs	r2, r6, r3
 800a50a:	d0ae      	beq.n	800a46a <_malloc_r+0x22>
 800a50c:	1b9b      	subs	r3, r3, r6
 800a50e:	50a3      	str	r3, [r4, r2]
 800a510:	e7ab      	b.n	800a46a <_malloc_r+0x22>
 800a512:	42a3      	cmp	r3, r4
 800a514:	6862      	ldr	r2, [r4, #4]
 800a516:	d1dd      	bne.n	800a4d4 <_malloc_r+0x8c>
 800a518:	f8c8 2000 	str.w	r2, [r8]
 800a51c:	e7ec      	b.n	800a4f8 <_malloc_r+0xb0>
 800a51e:	4623      	mov	r3, r4
 800a520:	6864      	ldr	r4, [r4, #4]
 800a522:	e7ac      	b.n	800a47e <_malloc_r+0x36>
 800a524:	4634      	mov	r4, r6
 800a526:	6876      	ldr	r6, [r6, #4]
 800a528:	e7b4      	b.n	800a494 <_malloc_r+0x4c>
 800a52a:	4613      	mov	r3, r2
 800a52c:	e7cc      	b.n	800a4c8 <_malloc_r+0x80>
 800a52e:	230c      	movs	r3, #12
 800a530:	4638      	mov	r0, r7
 800a532:	603b      	str	r3, [r7, #0]
 800a534:	f000 f80e 	bl	800a554 <__malloc_unlock>
 800a538:	e797      	b.n	800a46a <_malloc_r+0x22>
 800a53a:	6025      	str	r5, [r4, #0]
 800a53c:	e7dc      	b.n	800a4f8 <_malloc_r+0xb0>
 800a53e:	605b      	str	r3, [r3, #4]
 800a540:	deff      	udf	#255	; 0xff
 800a542:	bf00      	nop
 800a544:	200006ac 	.word	0x200006ac

0800a548 <__malloc_lock>:
 800a548:	4801      	ldr	r0, [pc, #4]	; (800a550 <__malloc_lock+0x8>)
 800a54a:	f7ff b890 	b.w	800966e <__retarget_lock_acquire_recursive>
 800a54e:	bf00      	nop
 800a550:	200006a8 	.word	0x200006a8

0800a554 <__malloc_unlock>:
 800a554:	4801      	ldr	r0, [pc, #4]	; (800a55c <__malloc_unlock+0x8>)
 800a556:	f7ff b88b 	b.w	8009670 <__retarget_lock_release_recursive>
 800a55a:	bf00      	nop
 800a55c:	200006a8 	.word	0x200006a8

0800a560 <_Balloc>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	69c6      	ldr	r6, [r0, #28]
 800a564:	4604      	mov	r4, r0
 800a566:	460d      	mov	r5, r1
 800a568:	b976      	cbnz	r6, 800a588 <_Balloc+0x28>
 800a56a:	2010      	movs	r0, #16
 800a56c:	f7ff ff44 	bl	800a3f8 <malloc>
 800a570:	4602      	mov	r2, r0
 800a572:	61e0      	str	r0, [r4, #28]
 800a574:	b920      	cbnz	r0, 800a580 <_Balloc+0x20>
 800a576:	216b      	movs	r1, #107	; 0x6b
 800a578:	4b17      	ldr	r3, [pc, #92]	; (800a5d8 <_Balloc+0x78>)
 800a57a:	4818      	ldr	r0, [pc, #96]	; (800a5dc <_Balloc+0x7c>)
 800a57c:	f000 fda2 	bl	800b0c4 <__assert_func>
 800a580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a584:	6006      	str	r6, [r0, #0]
 800a586:	60c6      	str	r6, [r0, #12]
 800a588:	69e6      	ldr	r6, [r4, #28]
 800a58a:	68f3      	ldr	r3, [r6, #12]
 800a58c:	b183      	cbz	r3, 800a5b0 <_Balloc+0x50>
 800a58e:	69e3      	ldr	r3, [r4, #28]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a596:	b9b8      	cbnz	r0, 800a5c8 <_Balloc+0x68>
 800a598:	2101      	movs	r1, #1
 800a59a:	fa01 f605 	lsl.w	r6, r1, r5
 800a59e:	1d72      	adds	r2, r6, #5
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	0092      	lsls	r2, r2, #2
 800a5a4:	f000 fdac 	bl	800b100 <_calloc_r>
 800a5a8:	b160      	cbz	r0, 800a5c4 <_Balloc+0x64>
 800a5aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5ae:	e00e      	b.n	800a5ce <_Balloc+0x6e>
 800a5b0:	2221      	movs	r2, #33	; 0x21
 800a5b2:	2104      	movs	r1, #4
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 fda3 	bl	800b100 <_calloc_r>
 800a5ba:	69e3      	ldr	r3, [r4, #28]
 800a5bc:	60f0      	str	r0, [r6, #12]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1e4      	bne.n	800a58e <_Balloc+0x2e>
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	bd70      	pop	{r4, r5, r6, pc}
 800a5c8:	6802      	ldr	r2, [r0, #0]
 800a5ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5d4:	e7f7      	b.n	800a5c6 <_Balloc+0x66>
 800a5d6:	bf00      	nop
 800a5d8:	0800cd8f 	.word	0x0800cd8f
 800a5dc:	0800ce0f 	.word	0x0800ce0f

0800a5e0 <_Bfree>:
 800a5e0:	b570      	push	{r4, r5, r6, lr}
 800a5e2:	69c6      	ldr	r6, [r0, #28]
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	b976      	cbnz	r6, 800a608 <_Bfree+0x28>
 800a5ea:	2010      	movs	r0, #16
 800a5ec:	f7ff ff04 	bl	800a3f8 <malloc>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	61e8      	str	r0, [r5, #28]
 800a5f4:	b920      	cbnz	r0, 800a600 <_Bfree+0x20>
 800a5f6:	218f      	movs	r1, #143	; 0x8f
 800a5f8:	4b08      	ldr	r3, [pc, #32]	; (800a61c <_Bfree+0x3c>)
 800a5fa:	4809      	ldr	r0, [pc, #36]	; (800a620 <_Bfree+0x40>)
 800a5fc:	f000 fd62 	bl	800b0c4 <__assert_func>
 800a600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a604:	6006      	str	r6, [r0, #0]
 800a606:	60c6      	str	r6, [r0, #12]
 800a608:	b13c      	cbz	r4, 800a61a <_Bfree+0x3a>
 800a60a:	69eb      	ldr	r3, [r5, #28]
 800a60c:	6862      	ldr	r2, [r4, #4]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a614:	6021      	str	r1, [r4, #0]
 800a616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	0800cd8f 	.word	0x0800cd8f
 800a620:	0800ce0f 	.word	0x0800ce0f

0800a624 <__multadd>:
 800a624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a628:	4607      	mov	r7, r0
 800a62a:	460c      	mov	r4, r1
 800a62c:	461e      	mov	r6, r3
 800a62e:	2000      	movs	r0, #0
 800a630:	690d      	ldr	r5, [r1, #16]
 800a632:	f101 0c14 	add.w	ip, r1, #20
 800a636:	f8dc 3000 	ldr.w	r3, [ip]
 800a63a:	3001      	adds	r0, #1
 800a63c:	b299      	uxth	r1, r3
 800a63e:	fb02 6101 	mla	r1, r2, r1, r6
 800a642:	0c1e      	lsrs	r6, r3, #16
 800a644:	0c0b      	lsrs	r3, r1, #16
 800a646:	fb02 3306 	mla	r3, r2, r6, r3
 800a64a:	b289      	uxth	r1, r1
 800a64c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a650:	4285      	cmp	r5, r0
 800a652:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a656:	f84c 1b04 	str.w	r1, [ip], #4
 800a65a:	dcec      	bgt.n	800a636 <__multadd+0x12>
 800a65c:	b30e      	cbz	r6, 800a6a2 <__multadd+0x7e>
 800a65e:	68a3      	ldr	r3, [r4, #8]
 800a660:	42ab      	cmp	r3, r5
 800a662:	dc19      	bgt.n	800a698 <__multadd+0x74>
 800a664:	6861      	ldr	r1, [r4, #4]
 800a666:	4638      	mov	r0, r7
 800a668:	3101      	adds	r1, #1
 800a66a:	f7ff ff79 	bl	800a560 <_Balloc>
 800a66e:	4680      	mov	r8, r0
 800a670:	b928      	cbnz	r0, 800a67e <__multadd+0x5a>
 800a672:	4602      	mov	r2, r0
 800a674:	21ba      	movs	r1, #186	; 0xba
 800a676:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <__multadd+0x84>)
 800a678:	480c      	ldr	r0, [pc, #48]	; (800a6ac <__multadd+0x88>)
 800a67a:	f000 fd23 	bl	800b0c4 <__assert_func>
 800a67e:	6922      	ldr	r2, [r4, #16]
 800a680:	f104 010c 	add.w	r1, r4, #12
 800a684:	3202      	adds	r2, #2
 800a686:	0092      	lsls	r2, r2, #2
 800a688:	300c      	adds	r0, #12
 800a68a:	f000 fd0d 	bl	800b0a8 <memcpy>
 800a68e:	4621      	mov	r1, r4
 800a690:	4638      	mov	r0, r7
 800a692:	f7ff ffa5 	bl	800a5e0 <_Bfree>
 800a696:	4644      	mov	r4, r8
 800a698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a69c:	3501      	adds	r5, #1
 800a69e:	615e      	str	r6, [r3, #20]
 800a6a0:	6125      	str	r5, [r4, #16]
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a8:	0800cdfe 	.word	0x0800cdfe
 800a6ac:	0800ce0f 	.word	0x0800ce0f

0800a6b0 <__hi0bits>:
 800a6b0:	0c02      	lsrs	r2, r0, #16
 800a6b2:	0412      	lsls	r2, r2, #16
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	b9ca      	cbnz	r2, 800a6ec <__hi0bits+0x3c>
 800a6b8:	0403      	lsls	r3, r0, #16
 800a6ba:	2010      	movs	r0, #16
 800a6bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a6c0:	bf04      	itt	eq
 800a6c2:	021b      	lsleq	r3, r3, #8
 800a6c4:	3008      	addeq	r0, #8
 800a6c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a6ca:	bf04      	itt	eq
 800a6cc:	011b      	lsleq	r3, r3, #4
 800a6ce:	3004      	addeq	r0, #4
 800a6d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a6d4:	bf04      	itt	eq
 800a6d6:	009b      	lsleq	r3, r3, #2
 800a6d8:	3002      	addeq	r0, #2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	db05      	blt.n	800a6ea <__hi0bits+0x3a>
 800a6de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a6e2:	f100 0001 	add.w	r0, r0, #1
 800a6e6:	bf08      	it	eq
 800a6e8:	2020      	moveq	r0, #32
 800a6ea:	4770      	bx	lr
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e7e5      	b.n	800a6bc <__hi0bits+0xc>

0800a6f0 <__lo0bits>:
 800a6f0:	6803      	ldr	r3, [r0, #0]
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	f013 0007 	ands.w	r0, r3, #7
 800a6f8:	d00b      	beq.n	800a712 <__lo0bits+0x22>
 800a6fa:	07d9      	lsls	r1, r3, #31
 800a6fc:	d421      	bmi.n	800a742 <__lo0bits+0x52>
 800a6fe:	0798      	lsls	r0, r3, #30
 800a700:	bf49      	itett	mi
 800a702:	085b      	lsrmi	r3, r3, #1
 800a704:	089b      	lsrpl	r3, r3, #2
 800a706:	2001      	movmi	r0, #1
 800a708:	6013      	strmi	r3, [r2, #0]
 800a70a:	bf5c      	itt	pl
 800a70c:	2002      	movpl	r0, #2
 800a70e:	6013      	strpl	r3, [r2, #0]
 800a710:	4770      	bx	lr
 800a712:	b299      	uxth	r1, r3
 800a714:	b909      	cbnz	r1, 800a71a <__lo0bits+0x2a>
 800a716:	2010      	movs	r0, #16
 800a718:	0c1b      	lsrs	r3, r3, #16
 800a71a:	b2d9      	uxtb	r1, r3
 800a71c:	b909      	cbnz	r1, 800a722 <__lo0bits+0x32>
 800a71e:	3008      	adds	r0, #8
 800a720:	0a1b      	lsrs	r3, r3, #8
 800a722:	0719      	lsls	r1, r3, #28
 800a724:	bf04      	itt	eq
 800a726:	091b      	lsreq	r3, r3, #4
 800a728:	3004      	addeq	r0, #4
 800a72a:	0799      	lsls	r1, r3, #30
 800a72c:	bf04      	itt	eq
 800a72e:	089b      	lsreq	r3, r3, #2
 800a730:	3002      	addeq	r0, #2
 800a732:	07d9      	lsls	r1, r3, #31
 800a734:	d403      	bmi.n	800a73e <__lo0bits+0x4e>
 800a736:	085b      	lsrs	r3, r3, #1
 800a738:	f100 0001 	add.w	r0, r0, #1
 800a73c:	d003      	beq.n	800a746 <__lo0bits+0x56>
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	4770      	bx	lr
 800a742:	2000      	movs	r0, #0
 800a744:	4770      	bx	lr
 800a746:	2020      	movs	r0, #32
 800a748:	4770      	bx	lr
	...

0800a74c <__i2b>:
 800a74c:	b510      	push	{r4, lr}
 800a74e:	460c      	mov	r4, r1
 800a750:	2101      	movs	r1, #1
 800a752:	f7ff ff05 	bl	800a560 <_Balloc>
 800a756:	4602      	mov	r2, r0
 800a758:	b928      	cbnz	r0, 800a766 <__i2b+0x1a>
 800a75a:	f240 1145 	movw	r1, #325	; 0x145
 800a75e:	4b04      	ldr	r3, [pc, #16]	; (800a770 <__i2b+0x24>)
 800a760:	4804      	ldr	r0, [pc, #16]	; (800a774 <__i2b+0x28>)
 800a762:	f000 fcaf 	bl	800b0c4 <__assert_func>
 800a766:	2301      	movs	r3, #1
 800a768:	6144      	str	r4, [r0, #20]
 800a76a:	6103      	str	r3, [r0, #16]
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	bf00      	nop
 800a770:	0800cdfe 	.word	0x0800cdfe
 800a774:	0800ce0f 	.word	0x0800ce0f

0800a778 <__multiply>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	4691      	mov	r9, r2
 800a77e:	690a      	ldr	r2, [r1, #16]
 800a780:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a784:	460c      	mov	r4, r1
 800a786:	429a      	cmp	r2, r3
 800a788:	bfbe      	ittt	lt
 800a78a:	460b      	movlt	r3, r1
 800a78c:	464c      	movlt	r4, r9
 800a78e:	4699      	movlt	r9, r3
 800a790:	6927      	ldr	r7, [r4, #16]
 800a792:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a796:	68a3      	ldr	r3, [r4, #8]
 800a798:	6861      	ldr	r1, [r4, #4]
 800a79a:	eb07 060a 	add.w	r6, r7, sl
 800a79e:	42b3      	cmp	r3, r6
 800a7a0:	b085      	sub	sp, #20
 800a7a2:	bfb8      	it	lt
 800a7a4:	3101      	addlt	r1, #1
 800a7a6:	f7ff fedb 	bl	800a560 <_Balloc>
 800a7aa:	b930      	cbnz	r0, 800a7ba <__multiply+0x42>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a7b2:	4b43      	ldr	r3, [pc, #268]	; (800a8c0 <__multiply+0x148>)
 800a7b4:	4843      	ldr	r0, [pc, #268]	; (800a8c4 <__multiply+0x14c>)
 800a7b6:	f000 fc85 	bl	800b0c4 <__assert_func>
 800a7ba:	f100 0514 	add.w	r5, r0, #20
 800a7be:	462b      	mov	r3, r5
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7c6:	4543      	cmp	r3, r8
 800a7c8:	d321      	bcc.n	800a80e <__multiply+0x96>
 800a7ca:	f104 0314 	add.w	r3, r4, #20
 800a7ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a7d2:	f109 0314 	add.w	r3, r9, #20
 800a7d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a7da:	9202      	str	r2, [sp, #8]
 800a7dc:	1b3a      	subs	r2, r7, r4
 800a7de:	3a15      	subs	r2, #21
 800a7e0:	f022 0203 	bic.w	r2, r2, #3
 800a7e4:	3204      	adds	r2, #4
 800a7e6:	f104 0115 	add.w	r1, r4, #21
 800a7ea:	428f      	cmp	r7, r1
 800a7ec:	bf38      	it	cc
 800a7ee:	2204      	movcc	r2, #4
 800a7f0:	9201      	str	r2, [sp, #4]
 800a7f2:	9a02      	ldr	r2, [sp, #8]
 800a7f4:	9303      	str	r3, [sp, #12]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d80c      	bhi.n	800a814 <__multiply+0x9c>
 800a7fa:	2e00      	cmp	r6, #0
 800a7fc:	dd03      	ble.n	800a806 <__multiply+0x8e>
 800a7fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a802:	2b00      	cmp	r3, #0
 800a804:	d05a      	beq.n	800a8bc <__multiply+0x144>
 800a806:	6106      	str	r6, [r0, #16]
 800a808:	b005      	add	sp, #20
 800a80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80e:	f843 2b04 	str.w	r2, [r3], #4
 800a812:	e7d8      	b.n	800a7c6 <__multiply+0x4e>
 800a814:	f8b3 a000 	ldrh.w	sl, [r3]
 800a818:	f1ba 0f00 	cmp.w	sl, #0
 800a81c:	d023      	beq.n	800a866 <__multiply+0xee>
 800a81e:	46a9      	mov	r9, r5
 800a820:	f04f 0c00 	mov.w	ip, #0
 800a824:	f104 0e14 	add.w	lr, r4, #20
 800a828:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a82c:	f8d9 1000 	ldr.w	r1, [r9]
 800a830:	fa1f fb82 	uxth.w	fp, r2
 800a834:	b289      	uxth	r1, r1
 800a836:	fb0a 110b 	mla	r1, sl, fp, r1
 800a83a:	4461      	add	r1, ip
 800a83c:	f8d9 c000 	ldr.w	ip, [r9]
 800a840:	0c12      	lsrs	r2, r2, #16
 800a842:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a846:	fb0a c202 	mla	r2, sl, r2, ip
 800a84a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a84e:	b289      	uxth	r1, r1
 800a850:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a854:	4577      	cmp	r7, lr
 800a856:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a85a:	f849 1b04 	str.w	r1, [r9], #4
 800a85e:	d8e3      	bhi.n	800a828 <__multiply+0xb0>
 800a860:	9a01      	ldr	r2, [sp, #4]
 800a862:	f845 c002 	str.w	ip, [r5, r2]
 800a866:	9a03      	ldr	r2, [sp, #12]
 800a868:	3304      	adds	r3, #4
 800a86a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a86e:	f1b9 0f00 	cmp.w	r9, #0
 800a872:	d021      	beq.n	800a8b8 <__multiply+0x140>
 800a874:	46ae      	mov	lr, r5
 800a876:	f04f 0a00 	mov.w	sl, #0
 800a87a:	6829      	ldr	r1, [r5, #0]
 800a87c:	f104 0c14 	add.w	ip, r4, #20
 800a880:	f8bc b000 	ldrh.w	fp, [ip]
 800a884:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a888:	b289      	uxth	r1, r1
 800a88a:	fb09 220b 	mla	r2, r9, fp, r2
 800a88e:	4452      	add	r2, sl
 800a890:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a894:	f84e 1b04 	str.w	r1, [lr], #4
 800a898:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a89c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8a0:	f8be 1000 	ldrh.w	r1, [lr]
 800a8a4:	4567      	cmp	r7, ip
 800a8a6:	fb09 110a 	mla	r1, r9, sl, r1
 800a8aa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a8ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8b2:	d8e5      	bhi.n	800a880 <__multiply+0x108>
 800a8b4:	9a01      	ldr	r2, [sp, #4]
 800a8b6:	50a9      	str	r1, [r5, r2]
 800a8b8:	3504      	adds	r5, #4
 800a8ba:	e79a      	b.n	800a7f2 <__multiply+0x7a>
 800a8bc:	3e01      	subs	r6, #1
 800a8be:	e79c      	b.n	800a7fa <__multiply+0x82>
 800a8c0:	0800cdfe 	.word	0x0800cdfe
 800a8c4:	0800ce0f 	.word	0x0800ce0f

0800a8c8 <__pow5mult>:
 800a8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8cc:	4615      	mov	r5, r2
 800a8ce:	f012 0203 	ands.w	r2, r2, #3
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460f      	mov	r7, r1
 800a8d6:	d007      	beq.n	800a8e8 <__pow5mult+0x20>
 800a8d8:	4c25      	ldr	r4, [pc, #148]	; (800a970 <__pow5mult+0xa8>)
 800a8da:	3a01      	subs	r2, #1
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8e2:	f7ff fe9f 	bl	800a624 <__multadd>
 800a8e6:	4607      	mov	r7, r0
 800a8e8:	10ad      	asrs	r5, r5, #2
 800a8ea:	d03d      	beq.n	800a968 <__pow5mult+0xa0>
 800a8ec:	69f4      	ldr	r4, [r6, #28]
 800a8ee:	b97c      	cbnz	r4, 800a910 <__pow5mult+0x48>
 800a8f0:	2010      	movs	r0, #16
 800a8f2:	f7ff fd81 	bl	800a3f8 <malloc>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	61f0      	str	r0, [r6, #28]
 800a8fa:	b928      	cbnz	r0, 800a908 <__pow5mult+0x40>
 800a8fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a900:	4b1c      	ldr	r3, [pc, #112]	; (800a974 <__pow5mult+0xac>)
 800a902:	481d      	ldr	r0, [pc, #116]	; (800a978 <__pow5mult+0xb0>)
 800a904:	f000 fbde 	bl	800b0c4 <__assert_func>
 800a908:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a90c:	6004      	str	r4, [r0, #0]
 800a90e:	60c4      	str	r4, [r0, #12]
 800a910:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a914:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a918:	b94c      	cbnz	r4, 800a92e <__pow5mult+0x66>
 800a91a:	f240 2171 	movw	r1, #625	; 0x271
 800a91e:	4630      	mov	r0, r6
 800a920:	f7ff ff14 	bl	800a74c <__i2b>
 800a924:	2300      	movs	r3, #0
 800a926:	4604      	mov	r4, r0
 800a928:	f8c8 0008 	str.w	r0, [r8, #8]
 800a92c:	6003      	str	r3, [r0, #0]
 800a92e:	f04f 0900 	mov.w	r9, #0
 800a932:	07eb      	lsls	r3, r5, #31
 800a934:	d50a      	bpl.n	800a94c <__pow5mult+0x84>
 800a936:	4639      	mov	r1, r7
 800a938:	4622      	mov	r2, r4
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7ff ff1c 	bl	800a778 <__multiply>
 800a940:	4680      	mov	r8, r0
 800a942:	4639      	mov	r1, r7
 800a944:	4630      	mov	r0, r6
 800a946:	f7ff fe4b 	bl	800a5e0 <_Bfree>
 800a94a:	4647      	mov	r7, r8
 800a94c:	106d      	asrs	r5, r5, #1
 800a94e:	d00b      	beq.n	800a968 <__pow5mult+0xa0>
 800a950:	6820      	ldr	r0, [r4, #0]
 800a952:	b938      	cbnz	r0, 800a964 <__pow5mult+0x9c>
 800a954:	4622      	mov	r2, r4
 800a956:	4621      	mov	r1, r4
 800a958:	4630      	mov	r0, r6
 800a95a:	f7ff ff0d 	bl	800a778 <__multiply>
 800a95e:	6020      	str	r0, [r4, #0]
 800a960:	f8c0 9000 	str.w	r9, [r0]
 800a964:	4604      	mov	r4, r0
 800a966:	e7e4      	b.n	800a932 <__pow5mult+0x6a>
 800a968:	4638      	mov	r0, r7
 800a96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a96e:	bf00      	nop
 800a970:	0800cf58 	.word	0x0800cf58
 800a974:	0800cd8f 	.word	0x0800cd8f
 800a978:	0800ce0f 	.word	0x0800ce0f

0800a97c <__lshift>:
 800a97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a980:	460c      	mov	r4, r1
 800a982:	4607      	mov	r7, r0
 800a984:	4691      	mov	r9, r2
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	6849      	ldr	r1, [r1, #4]
 800a98a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a98e:	68a3      	ldr	r3, [r4, #8]
 800a990:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a994:	f108 0601 	add.w	r6, r8, #1
 800a998:	42b3      	cmp	r3, r6
 800a99a:	db0b      	blt.n	800a9b4 <__lshift+0x38>
 800a99c:	4638      	mov	r0, r7
 800a99e:	f7ff fddf 	bl	800a560 <_Balloc>
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	b948      	cbnz	r0, 800a9ba <__lshift+0x3e>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a9ac:	4b27      	ldr	r3, [pc, #156]	; (800aa4c <__lshift+0xd0>)
 800a9ae:	4828      	ldr	r0, [pc, #160]	; (800aa50 <__lshift+0xd4>)
 800a9b0:	f000 fb88 	bl	800b0c4 <__assert_func>
 800a9b4:	3101      	adds	r1, #1
 800a9b6:	005b      	lsls	r3, r3, #1
 800a9b8:	e7ee      	b.n	800a998 <__lshift+0x1c>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f100 0114 	add.w	r1, r0, #20
 800a9c0:	f100 0210 	add.w	r2, r0, #16
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	4553      	cmp	r3, sl
 800a9c8:	db33      	blt.n	800aa32 <__lshift+0xb6>
 800a9ca:	6920      	ldr	r0, [r4, #16]
 800a9cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9d0:	f104 0314 	add.w	r3, r4, #20
 800a9d4:	f019 091f 	ands.w	r9, r9, #31
 800a9d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9e0:	d02b      	beq.n	800aa3a <__lshift+0xbe>
 800a9e2:	468a      	mov	sl, r1
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f1c9 0e20 	rsb	lr, r9, #32
 800a9ea:	6818      	ldr	r0, [r3, #0]
 800a9ec:	fa00 f009 	lsl.w	r0, r0, r9
 800a9f0:	4310      	orrs	r0, r2
 800a9f2:	f84a 0b04 	str.w	r0, [sl], #4
 800a9f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fa:	459c      	cmp	ip, r3
 800a9fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa00:	d8f3      	bhi.n	800a9ea <__lshift+0x6e>
 800aa02:	ebac 0304 	sub.w	r3, ip, r4
 800aa06:	3b15      	subs	r3, #21
 800aa08:	f023 0303 	bic.w	r3, r3, #3
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	f104 0015 	add.w	r0, r4, #21
 800aa12:	4584      	cmp	ip, r0
 800aa14:	bf38      	it	cc
 800aa16:	2304      	movcc	r3, #4
 800aa18:	50ca      	str	r2, [r1, r3]
 800aa1a:	b10a      	cbz	r2, 800aa20 <__lshift+0xa4>
 800aa1c:	f108 0602 	add.w	r6, r8, #2
 800aa20:	3e01      	subs	r6, #1
 800aa22:	4638      	mov	r0, r7
 800aa24:	4621      	mov	r1, r4
 800aa26:	612e      	str	r6, [r5, #16]
 800aa28:	f7ff fdda 	bl	800a5e0 <_Bfree>
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa32:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa36:	3301      	adds	r3, #1
 800aa38:	e7c5      	b.n	800a9c6 <__lshift+0x4a>
 800aa3a:	3904      	subs	r1, #4
 800aa3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa40:	459c      	cmp	ip, r3
 800aa42:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa46:	d8f9      	bhi.n	800aa3c <__lshift+0xc0>
 800aa48:	e7ea      	b.n	800aa20 <__lshift+0xa4>
 800aa4a:	bf00      	nop
 800aa4c:	0800cdfe 	.word	0x0800cdfe
 800aa50:	0800ce0f 	.word	0x0800ce0f

0800aa54 <__mcmp>:
 800aa54:	4603      	mov	r3, r0
 800aa56:	690a      	ldr	r2, [r1, #16]
 800aa58:	6900      	ldr	r0, [r0, #16]
 800aa5a:	b530      	push	{r4, r5, lr}
 800aa5c:	1a80      	subs	r0, r0, r2
 800aa5e:	d10d      	bne.n	800aa7c <__mcmp+0x28>
 800aa60:	3314      	adds	r3, #20
 800aa62:	3114      	adds	r1, #20
 800aa64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa74:	4295      	cmp	r5, r2
 800aa76:	d002      	beq.n	800aa7e <__mcmp+0x2a>
 800aa78:	d304      	bcc.n	800aa84 <__mcmp+0x30>
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	bd30      	pop	{r4, r5, pc}
 800aa7e:	42a3      	cmp	r3, r4
 800aa80:	d3f4      	bcc.n	800aa6c <__mcmp+0x18>
 800aa82:	e7fb      	b.n	800aa7c <__mcmp+0x28>
 800aa84:	f04f 30ff 	mov.w	r0, #4294967295
 800aa88:	e7f8      	b.n	800aa7c <__mcmp+0x28>
	...

0800aa8c <__mdiff>:
 800aa8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	460d      	mov	r5, r1
 800aa92:	4607      	mov	r7, r0
 800aa94:	4611      	mov	r1, r2
 800aa96:	4628      	mov	r0, r5
 800aa98:	4614      	mov	r4, r2
 800aa9a:	f7ff ffdb 	bl	800aa54 <__mcmp>
 800aa9e:	1e06      	subs	r6, r0, #0
 800aaa0:	d111      	bne.n	800aac6 <__mdiff+0x3a>
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	f7ff fd5b 	bl	800a560 <_Balloc>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	b928      	cbnz	r0, 800aaba <__mdiff+0x2e>
 800aaae:	f240 2137 	movw	r1, #567	; 0x237
 800aab2:	4b3a      	ldr	r3, [pc, #232]	; (800ab9c <__mdiff+0x110>)
 800aab4:	483a      	ldr	r0, [pc, #232]	; (800aba0 <__mdiff+0x114>)
 800aab6:	f000 fb05 	bl	800b0c4 <__assert_func>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800aac0:	4610      	mov	r0, r2
 800aac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	bfa4      	itt	ge
 800aac8:	4623      	movge	r3, r4
 800aaca:	462c      	movge	r4, r5
 800aacc:	4638      	mov	r0, r7
 800aace:	6861      	ldr	r1, [r4, #4]
 800aad0:	bfa6      	itte	ge
 800aad2:	461d      	movge	r5, r3
 800aad4:	2600      	movge	r6, #0
 800aad6:	2601      	movlt	r6, #1
 800aad8:	f7ff fd42 	bl	800a560 <_Balloc>
 800aadc:	4602      	mov	r2, r0
 800aade:	b918      	cbnz	r0, 800aae8 <__mdiff+0x5c>
 800aae0:	f240 2145 	movw	r1, #581	; 0x245
 800aae4:	4b2d      	ldr	r3, [pc, #180]	; (800ab9c <__mdiff+0x110>)
 800aae6:	e7e5      	b.n	800aab4 <__mdiff+0x28>
 800aae8:	f102 0814 	add.w	r8, r2, #20
 800aaec:	46c2      	mov	sl, r8
 800aaee:	f04f 0c00 	mov.w	ip, #0
 800aaf2:	6927      	ldr	r7, [r4, #16]
 800aaf4:	60c6      	str	r6, [r0, #12]
 800aaf6:	692e      	ldr	r6, [r5, #16]
 800aaf8:	f104 0014 	add.w	r0, r4, #20
 800aafc:	f105 0914 	add.w	r9, r5, #20
 800ab00:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ab04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab08:	3410      	adds	r4, #16
 800ab0a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ab0e:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab12:	fa1f f18b 	uxth.w	r1, fp
 800ab16:	4461      	add	r1, ip
 800ab18:	fa1f fc83 	uxth.w	ip, r3
 800ab1c:	0c1b      	lsrs	r3, r3, #16
 800ab1e:	eba1 010c 	sub.w	r1, r1, ip
 800ab22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab26:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ab2a:	b289      	uxth	r1, r1
 800ab2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ab30:	454e      	cmp	r6, r9
 800ab32:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ab36:	f84a 1b04 	str.w	r1, [sl], #4
 800ab3a:	d8e6      	bhi.n	800ab0a <__mdiff+0x7e>
 800ab3c:	1b73      	subs	r3, r6, r5
 800ab3e:	3b15      	subs	r3, #21
 800ab40:	f023 0303 	bic.w	r3, r3, #3
 800ab44:	3515      	adds	r5, #21
 800ab46:	3304      	adds	r3, #4
 800ab48:	42ae      	cmp	r6, r5
 800ab4a:	bf38      	it	cc
 800ab4c:	2304      	movcc	r3, #4
 800ab4e:	4418      	add	r0, r3
 800ab50:	4443      	add	r3, r8
 800ab52:	461e      	mov	r6, r3
 800ab54:	4605      	mov	r5, r0
 800ab56:	4575      	cmp	r5, lr
 800ab58:	d30e      	bcc.n	800ab78 <__mdiff+0xec>
 800ab5a:	f10e 0103 	add.w	r1, lr, #3
 800ab5e:	1a09      	subs	r1, r1, r0
 800ab60:	f021 0103 	bic.w	r1, r1, #3
 800ab64:	3803      	subs	r0, #3
 800ab66:	4586      	cmp	lr, r0
 800ab68:	bf38      	it	cc
 800ab6a:	2100      	movcc	r1, #0
 800ab6c:	440b      	add	r3, r1
 800ab6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab72:	b189      	cbz	r1, 800ab98 <__mdiff+0x10c>
 800ab74:	6117      	str	r7, [r2, #16]
 800ab76:	e7a3      	b.n	800aac0 <__mdiff+0x34>
 800ab78:	f855 8b04 	ldr.w	r8, [r5], #4
 800ab7c:	fa1f f188 	uxth.w	r1, r8
 800ab80:	4461      	add	r1, ip
 800ab82:	140c      	asrs	r4, r1, #16
 800ab84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab88:	b289      	uxth	r1, r1
 800ab8a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ab8e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ab92:	f846 1b04 	str.w	r1, [r6], #4
 800ab96:	e7de      	b.n	800ab56 <__mdiff+0xca>
 800ab98:	3f01      	subs	r7, #1
 800ab9a:	e7e8      	b.n	800ab6e <__mdiff+0xe2>
 800ab9c:	0800cdfe 	.word	0x0800cdfe
 800aba0:	0800ce0f 	.word	0x0800ce0f

0800aba4 <__d2b>:
 800aba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba6:	2101      	movs	r1, #1
 800aba8:	4617      	mov	r7, r2
 800abaa:	461c      	mov	r4, r3
 800abac:	9e08      	ldr	r6, [sp, #32]
 800abae:	f7ff fcd7 	bl	800a560 <_Balloc>
 800abb2:	4605      	mov	r5, r0
 800abb4:	b930      	cbnz	r0, 800abc4 <__d2b+0x20>
 800abb6:	4602      	mov	r2, r0
 800abb8:	f240 310f 	movw	r1, #783	; 0x30f
 800abbc:	4b22      	ldr	r3, [pc, #136]	; (800ac48 <__d2b+0xa4>)
 800abbe:	4823      	ldr	r0, [pc, #140]	; (800ac4c <__d2b+0xa8>)
 800abc0:	f000 fa80 	bl	800b0c4 <__assert_func>
 800abc4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800abc8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800abcc:	bb24      	cbnz	r4, 800ac18 <__d2b+0x74>
 800abce:	2f00      	cmp	r7, #0
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	d026      	beq.n	800ac22 <__d2b+0x7e>
 800abd4:	4668      	mov	r0, sp
 800abd6:	9700      	str	r7, [sp, #0]
 800abd8:	f7ff fd8a 	bl	800a6f0 <__lo0bits>
 800abdc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abe0:	b1e8      	cbz	r0, 800ac1e <__d2b+0x7a>
 800abe2:	f1c0 0320 	rsb	r3, r0, #32
 800abe6:	fa02 f303 	lsl.w	r3, r2, r3
 800abea:	430b      	orrs	r3, r1
 800abec:	40c2      	lsrs	r2, r0
 800abee:	616b      	str	r3, [r5, #20]
 800abf0:	9201      	str	r2, [sp, #4]
 800abf2:	9b01      	ldr	r3, [sp, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bf14      	ite	ne
 800abf8:	2102      	movne	r1, #2
 800abfa:	2101      	moveq	r1, #1
 800abfc:	61ab      	str	r3, [r5, #24]
 800abfe:	6129      	str	r1, [r5, #16]
 800ac00:	b1bc      	cbz	r4, 800ac32 <__d2b+0x8e>
 800ac02:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ac06:	4404      	add	r4, r0
 800ac08:	6034      	str	r4, [r6, #0]
 800ac0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac10:	6018      	str	r0, [r3, #0]
 800ac12:	4628      	mov	r0, r5
 800ac14:	b003      	add	sp, #12
 800ac16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac1c:	e7d7      	b.n	800abce <__d2b+0x2a>
 800ac1e:	6169      	str	r1, [r5, #20]
 800ac20:	e7e7      	b.n	800abf2 <__d2b+0x4e>
 800ac22:	a801      	add	r0, sp, #4
 800ac24:	f7ff fd64 	bl	800a6f0 <__lo0bits>
 800ac28:	9b01      	ldr	r3, [sp, #4]
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	616b      	str	r3, [r5, #20]
 800ac2e:	3020      	adds	r0, #32
 800ac30:	e7e5      	b.n	800abfe <__d2b+0x5a>
 800ac32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac36:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800ac3a:	6030      	str	r0, [r6, #0]
 800ac3c:	6918      	ldr	r0, [r3, #16]
 800ac3e:	f7ff fd37 	bl	800a6b0 <__hi0bits>
 800ac42:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ac46:	e7e2      	b.n	800ac0e <__d2b+0x6a>
 800ac48:	0800cdfe 	.word	0x0800cdfe
 800ac4c:	0800ce0f 	.word	0x0800ce0f

0800ac50 <__ssputs_r>:
 800ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac54:	461f      	mov	r7, r3
 800ac56:	688e      	ldr	r6, [r1, #8]
 800ac58:	4682      	mov	sl, r0
 800ac5a:	42be      	cmp	r6, r7
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	4690      	mov	r8, r2
 800ac60:	680b      	ldr	r3, [r1, #0]
 800ac62:	d82c      	bhi.n	800acbe <__ssputs_r+0x6e>
 800ac64:	898a      	ldrh	r2, [r1, #12]
 800ac66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac6a:	d026      	beq.n	800acba <__ssputs_r+0x6a>
 800ac6c:	6965      	ldr	r5, [r4, #20]
 800ac6e:	6909      	ldr	r1, [r1, #16]
 800ac70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac74:	eba3 0901 	sub.w	r9, r3, r1
 800ac78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac7c:	1c7b      	adds	r3, r7, #1
 800ac7e:	444b      	add	r3, r9
 800ac80:	106d      	asrs	r5, r5, #1
 800ac82:	429d      	cmp	r5, r3
 800ac84:	bf38      	it	cc
 800ac86:	461d      	movcc	r5, r3
 800ac88:	0553      	lsls	r3, r2, #21
 800ac8a:	d527      	bpl.n	800acdc <__ssputs_r+0x8c>
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	f7ff fbdb 	bl	800a448 <_malloc_r>
 800ac92:	4606      	mov	r6, r0
 800ac94:	b360      	cbz	r0, 800acf0 <__ssputs_r+0xa0>
 800ac96:	464a      	mov	r2, r9
 800ac98:	6921      	ldr	r1, [r4, #16]
 800ac9a:	f000 fa05 	bl	800b0a8 <memcpy>
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca8:	81a3      	strh	r3, [r4, #12]
 800acaa:	6126      	str	r6, [r4, #16]
 800acac:	444e      	add	r6, r9
 800acae:	6026      	str	r6, [r4, #0]
 800acb0:	463e      	mov	r6, r7
 800acb2:	6165      	str	r5, [r4, #20]
 800acb4:	eba5 0509 	sub.w	r5, r5, r9
 800acb8:	60a5      	str	r5, [r4, #8]
 800acba:	42be      	cmp	r6, r7
 800acbc:	d900      	bls.n	800acc0 <__ssputs_r+0x70>
 800acbe:	463e      	mov	r6, r7
 800acc0:	4632      	mov	r2, r6
 800acc2:	4641      	mov	r1, r8
 800acc4:	6820      	ldr	r0, [r4, #0]
 800acc6:	f000 f9c5 	bl	800b054 <memmove>
 800acca:	2000      	movs	r0, #0
 800accc:	68a3      	ldr	r3, [r4, #8]
 800acce:	1b9b      	subs	r3, r3, r6
 800acd0:	60a3      	str	r3, [r4, #8]
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	4433      	add	r3, r6
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acdc:	462a      	mov	r2, r5
 800acde:	f000 fa35 	bl	800b14c <_realloc_r>
 800ace2:	4606      	mov	r6, r0
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d1e0      	bne.n	800acaa <__ssputs_r+0x5a>
 800ace8:	4650      	mov	r0, sl
 800acea:	6921      	ldr	r1, [r4, #16]
 800acec:	f7ff fb3c 	bl	800a368 <_free_r>
 800acf0:	230c      	movs	r3, #12
 800acf2:	f8ca 3000 	str.w	r3, [sl]
 800acf6:	89a3      	ldrh	r3, [r4, #12]
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295
 800acfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad00:	81a3      	strh	r3, [r4, #12]
 800ad02:	e7e9      	b.n	800acd8 <__ssputs_r+0x88>

0800ad04 <_svfiprintf_r>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	4698      	mov	r8, r3
 800ad0a:	898b      	ldrh	r3, [r1, #12]
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	061b      	lsls	r3, r3, #24
 800ad10:	460d      	mov	r5, r1
 800ad12:	4614      	mov	r4, r2
 800ad14:	b09d      	sub	sp, #116	; 0x74
 800ad16:	d50e      	bpl.n	800ad36 <_svfiprintf_r+0x32>
 800ad18:	690b      	ldr	r3, [r1, #16]
 800ad1a:	b963      	cbnz	r3, 800ad36 <_svfiprintf_r+0x32>
 800ad1c:	2140      	movs	r1, #64	; 0x40
 800ad1e:	f7ff fb93 	bl	800a448 <_malloc_r>
 800ad22:	6028      	str	r0, [r5, #0]
 800ad24:	6128      	str	r0, [r5, #16]
 800ad26:	b920      	cbnz	r0, 800ad32 <_svfiprintf_r+0x2e>
 800ad28:	230c      	movs	r3, #12
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad30:	e0d0      	b.n	800aed4 <_svfiprintf_r+0x1d0>
 800ad32:	2340      	movs	r3, #64	; 0x40
 800ad34:	616b      	str	r3, [r5, #20]
 800ad36:	2300      	movs	r3, #0
 800ad38:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3a:	2320      	movs	r3, #32
 800ad3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad40:	2330      	movs	r3, #48	; 0x30
 800ad42:	f04f 0901 	mov.w	r9, #1
 800ad46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad4a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800aeec <_svfiprintf_r+0x1e8>
 800ad4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad52:	4623      	mov	r3, r4
 800ad54:	469a      	mov	sl, r3
 800ad56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad5a:	b10a      	cbz	r2, 800ad60 <_svfiprintf_r+0x5c>
 800ad5c:	2a25      	cmp	r2, #37	; 0x25
 800ad5e:	d1f9      	bne.n	800ad54 <_svfiprintf_r+0x50>
 800ad60:	ebba 0b04 	subs.w	fp, sl, r4
 800ad64:	d00b      	beq.n	800ad7e <_svfiprintf_r+0x7a>
 800ad66:	465b      	mov	r3, fp
 800ad68:	4622      	mov	r2, r4
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	f7ff ff6f 	bl	800ac50 <__ssputs_r>
 800ad72:	3001      	adds	r0, #1
 800ad74:	f000 80a9 	beq.w	800aeca <_svfiprintf_r+0x1c6>
 800ad78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad7a:	445a      	add	r2, fp
 800ad7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 80a1 	beq.w	800aeca <_svfiprintf_r+0x1c6>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad92:	f10a 0a01 	add.w	sl, sl, #1
 800ad96:	9304      	str	r3, [sp, #16]
 800ad98:	9307      	str	r3, [sp, #28]
 800ad9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad9e:	931a      	str	r3, [sp, #104]	; 0x68
 800ada0:	4654      	mov	r4, sl
 800ada2:	2205      	movs	r2, #5
 800ada4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada8:	4850      	ldr	r0, [pc, #320]	; (800aeec <_svfiprintf_r+0x1e8>)
 800adaa:	f7fe fc62 	bl	8009672 <memchr>
 800adae:	9a04      	ldr	r2, [sp, #16]
 800adb0:	b9d8      	cbnz	r0, 800adea <_svfiprintf_r+0xe6>
 800adb2:	06d0      	lsls	r0, r2, #27
 800adb4:	bf44      	itt	mi
 800adb6:	2320      	movmi	r3, #32
 800adb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adbc:	0711      	lsls	r1, r2, #28
 800adbe:	bf44      	itt	mi
 800adc0:	232b      	movmi	r3, #43	; 0x2b
 800adc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc6:	f89a 3000 	ldrb.w	r3, [sl]
 800adca:	2b2a      	cmp	r3, #42	; 0x2a
 800adcc:	d015      	beq.n	800adfa <_svfiprintf_r+0xf6>
 800adce:	4654      	mov	r4, sl
 800add0:	2000      	movs	r0, #0
 800add2:	f04f 0c0a 	mov.w	ip, #10
 800add6:	9a07      	ldr	r2, [sp, #28]
 800add8:	4621      	mov	r1, r4
 800adda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adde:	3b30      	subs	r3, #48	; 0x30
 800ade0:	2b09      	cmp	r3, #9
 800ade2:	d94d      	bls.n	800ae80 <_svfiprintf_r+0x17c>
 800ade4:	b1b0      	cbz	r0, 800ae14 <_svfiprintf_r+0x110>
 800ade6:	9207      	str	r2, [sp, #28]
 800ade8:	e014      	b.n	800ae14 <_svfiprintf_r+0x110>
 800adea:	eba0 0308 	sub.w	r3, r0, r8
 800adee:	fa09 f303 	lsl.w	r3, r9, r3
 800adf2:	4313      	orrs	r3, r2
 800adf4:	46a2      	mov	sl, r4
 800adf6:	9304      	str	r3, [sp, #16]
 800adf8:	e7d2      	b.n	800ada0 <_svfiprintf_r+0x9c>
 800adfa:	9b03      	ldr	r3, [sp, #12]
 800adfc:	1d19      	adds	r1, r3, #4
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	9103      	str	r1, [sp, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	bfbb      	ittet	lt
 800ae06:	425b      	neglt	r3, r3
 800ae08:	f042 0202 	orrlt.w	r2, r2, #2
 800ae0c:	9307      	strge	r3, [sp, #28]
 800ae0e:	9307      	strlt	r3, [sp, #28]
 800ae10:	bfb8      	it	lt
 800ae12:	9204      	strlt	r2, [sp, #16]
 800ae14:	7823      	ldrb	r3, [r4, #0]
 800ae16:	2b2e      	cmp	r3, #46	; 0x2e
 800ae18:	d10c      	bne.n	800ae34 <_svfiprintf_r+0x130>
 800ae1a:	7863      	ldrb	r3, [r4, #1]
 800ae1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae1e:	d134      	bne.n	800ae8a <_svfiprintf_r+0x186>
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	3402      	adds	r4, #2
 800ae24:	1d1a      	adds	r2, r3, #4
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	9203      	str	r2, [sp, #12]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	bfb8      	it	lt
 800ae2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae32:	9305      	str	r3, [sp, #20]
 800ae34:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800aef0 <_svfiprintf_r+0x1ec>
 800ae38:	2203      	movs	r2, #3
 800ae3a:	4650      	mov	r0, sl
 800ae3c:	7821      	ldrb	r1, [r4, #0]
 800ae3e:	f7fe fc18 	bl	8009672 <memchr>
 800ae42:	b138      	cbz	r0, 800ae54 <_svfiprintf_r+0x150>
 800ae44:	2240      	movs	r2, #64	; 0x40
 800ae46:	9b04      	ldr	r3, [sp, #16]
 800ae48:	eba0 000a 	sub.w	r0, r0, sl
 800ae4c:	4082      	lsls	r2, r0
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	3401      	adds	r4, #1
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae58:	2206      	movs	r2, #6
 800ae5a:	4826      	ldr	r0, [pc, #152]	; (800aef4 <_svfiprintf_r+0x1f0>)
 800ae5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae60:	f7fe fc07 	bl	8009672 <memchr>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d038      	beq.n	800aeda <_svfiprintf_r+0x1d6>
 800ae68:	4b23      	ldr	r3, [pc, #140]	; (800aef8 <_svfiprintf_r+0x1f4>)
 800ae6a:	bb1b      	cbnz	r3, 800aeb4 <_svfiprintf_r+0x1b0>
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	3307      	adds	r3, #7
 800ae70:	f023 0307 	bic.w	r3, r3, #7
 800ae74:	3308      	adds	r3, #8
 800ae76:	9303      	str	r3, [sp, #12]
 800ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7a:	4433      	add	r3, r6
 800ae7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7e:	e768      	b.n	800ad52 <_svfiprintf_r+0x4e>
 800ae80:	460c      	mov	r4, r1
 800ae82:	2001      	movs	r0, #1
 800ae84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae88:	e7a6      	b.n	800add8 <_svfiprintf_r+0xd4>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f04f 0c0a 	mov.w	ip, #10
 800ae90:	4619      	mov	r1, r3
 800ae92:	3401      	adds	r4, #1
 800ae94:	9305      	str	r3, [sp, #20]
 800ae96:	4620      	mov	r0, r4
 800ae98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae9c:	3a30      	subs	r2, #48	; 0x30
 800ae9e:	2a09      	cmp	r2, #9
 800aea0:	d903      	bls.n	800aeaa <_svfiprintf_r+0x1a6>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0c6      	beq.n	800ae34 <_svfiprintf_r+0x130>
 800aea6:	9105      	str	r1, [sp, #20]
 800aea8:	e7c4      	b.n	800ae34 <_svfiprintf_r+0x130>
 800aeaa:	4604      	mov	r4, r0
 800aeac:	2301      	movs	r3, #1
 800aeae:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeb2:	e7f0      	b.n	800ae96 <_svfiprintf_r+0x192>
 800aeb4:	ab03      	add	r3, sp, #12
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	462a      	mov	r2, r5
 800aeba:	4638      	mov	r0, r7
 800aebc:	4b0f      	ldr	r3, [pc, #60]	; (800aefc <_svfiprintf_r+0x1f8>)
 800aebe:	a904      	add	r1, sp, #16
 800aec0:	f7fd fe70 	bl	8008ba4 <_printf_float>
 800aec4:	1c42      	adds	r2, r0, #1
 800aec6:	4606      	mov	r6, r0
 800aec8:	d1d6      	bne.n	800ae78 <_svfiprintf_r+0x174>
 800aeca:	89ab      	ldrh	r3, [r5, #12]
 800aecc:	065b      	lsls	r3, r3, #25
 800aece:	f53f af2d 	bmi.w	800ad2c <_svfiprintf_r+0x28>
 800aed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aed4:	b01d      	add	sp, #116	; 0x74
 800aed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeda:	ab03      	add	r3, sp, #12
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	462a      	mov	r2, r5
 800aee0:	4638      	mov	r0, r7
 800aee2:	4b06      	ldr	r3, [pc, #24]	; (800aefc <_svfiprintf_r+0x1f8>)
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	f7fe f8fd 	bl	80090e4 <_printf_i>
 800aeea:	e7eb      	b.n	800aec4 <_svfiprintf_r+0x1c0>
 800aeec:	0800cf64 	.word	0x0800cf64
 800aef0:	0800cf6a 	.word	0x0800cf6a
 800aef4:	0800cf6e 	.word	0x0800cf6e
 800aef8:	08008ba5 	.word	0x08008ba5
 800aefc:	0800ac51 	.word	0x0800ac51

0800af00 <__sflush_r>:
 800af00:	898a      	ldrh	r2, [r1, #12]
 800af02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af04:	4605      	mov	r5, r0
 800af06:	0710      	lsls	r0, r2, #28
 800af08:	460c      	mov	r4, r1
 800af0a:	d457      	bmi.n	800afbc <__sflush_r+0xbc>
 800af0c:	684b      	ldr	r3, [r1, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	dc04      	bgt.n	800af1c <__sflush_r+0x1c>
 800af12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	dc01      	bgt.n	800af1c <__sflush_r+0x1c>
 800af18:	2000      	movs	r0, #0
 800af1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af1e:	2e00      	cmp	r6, #0
 800af20:	d0fa      	beq.n	800af18 <__sflush_r+0x18>
 800af22:	2300      	movs	r3, #0
 800af24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af28:	682f      	ldr	r7, [r5, #0]
 800af2a:	6a21      	ldr	r1, [r4, #32]
 800af2c:	602b      	str	r3, [r5, #0]
 800af2e:	d032      	beq.n	800af96 <__sflush_r+0x96>
 800af30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	075a      	lsls	r2, r3, #29
 800af36:	d505      	bpl.n	800af44 <__sflush_r+0x44>
 800af38:	6863      	ldr	r3, [r4, #4]
 800af3a:	1ac0      	subs	r0, r0, r3
 800af3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af3e:	b10b      	cbz	r3, 800af44 <__sflush_r+0x44>
 800af40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af42:	1ac0      	subs	r0, r0, r3
 800af44:	2300      	movs	r3, #0
 800af46:	4602      	mov	r2, r0
 800af48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af4a:	4628      	mov	r0, r5
 800af4c:	6a21      	ldr	r1, [r4, #32]
 800af4e:	47b0      	blx	r6
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	d106      	bne.n	800af64 <__sflush_r+0x64>
 800af56:	6829      	ldr	r1, [r5, #0]
 800af58:	291d      	cmp	r1, #29
 800af5a:	d82b      	bhi.n	800afb4 <__sflush_r+0xb4>
 800af5c:	4a28      	ldr	r2, [pc, #160]	; (800b000 <__sflush_r+0x100>)
 800af5e:	410a      	asrs	r2, r1
 800af60:	07d6      	lsls	r6, r2, #31
 800af62:	d427      	bmi.n	800afb4 <__sflush_r+0xb4>
 800af64:	2200      	movs	r2, #0
 800af66:	6062      	str	r2, [r4, #4]
 800af68:	6922      	ldr	r2, [r4, #16]
 800af6a:	04d9      	lsls	r1, r3, #19
 800af6c:	6022      	str	r2, [r4, #0]
 800af6e:	d504      	bpl.n	800af7a <__sflush_r+0x7a>
 800af70:	1c42      	adds	r2, r0, #1
 800af72:	d101      	bne.n	800af78 <__sflush_r+0x78>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	b903      	cbnz	r3, 800af7a <__sflush_r+0x7a>
 800af78:	6560      	str	r0, [r4, #84]	; 0x54
 800af7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af7c:	602f      	str	r7, [r5, #0]
 800af7e:	2900      	cmp	r1, #0
 800af80:	d0ca      	beq.n	800af18 <__sflush_r+0x18>
 800af82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af86:	4299      	cmp	r1, r3
 800af88:	d002      	beq.n	800af90 <__sflush_r+0x90>
 800af8a:	4628      	mov	r0, r5
 800af8c:	f7ff f9ec 	bl	800a368 <_free_r>
 800af90:	2000      	movs	r0, #0
 800af92:	6360      	str	r0, [r4, #52]	; 0x34
 800af94:	e7c1      	b.n	800af1a <__sflush_r+0x1a>
 800af96:	2301      	movs	r3, #1
 800af98:	4628      	mov	r0, r5
 800af9a:	47b0      	blx	r6
 800af9c:	1c41      	adds	r1, r0, #1
 800af9e:	d1c8      	bne.n	800af32 <__sflush_r+0x32>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0c5      	beq.n	800af32 <__sflush_r+0x32>
 800afa6:	2b1d      	cmp	r3, #29
 800afa8:	d001      	beq.n	800afae <__sflush_r+0xae>
 800afaa:	2b16      	cmp	r3, #22
 800afac:	d101      	bne.n	800afb2 <__sflush_r+0xb2>
 800afae:	602f      	str	r7, [r5, #0]
 800afb0:	e7b2      	b.n	800af18 <__sflush_r+0x18>
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	e7ae      	b.n	800af1a <__sflush_r+0x1a>
 800afbc:	690f      	ldr	r7, [r1, #16]
 800afbe:	2f00      	cmp	r7, #0
 800afc0:	d0aa      	beq.n	800af18 <__sflush_r+0x18>
 800afc2:	0793      	lsls	r3, r2, #30
 800afc4:	bf18      	it	ne
 800afc6:	2300      	movne	r3, #0
 800afc8:	680e      	ldr	r6, [r1, #0]
 800afca:	bf08      	it	eq
 800afcc:	694b      	ldreq	r3, [r1, #20]
 800afce:	1bf6      	subs	r6, r6, r7
 800afd0:	600f      	str	r7, [r1, #0]
 800afd2:	608b      	str	r3, [r1, #8]
 800afd4:	2e00      	cmp	r6, #0
 800afd6:	dd9f      	ble.n	800af18 <__sflush_r+0x18>
 800afd8:	4633      	mov	r3, r6
 800afda:	463a      	mov	r2, r7
 800afdc:	4628      	mov	r0, r5
 800afde:	6a21      	ldr	r1, [r4, #32]
 800afe0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800afe4:	47e0      	blx	ip
 800afe6:	2800      	cmp	r0, #0
 800afe8:	dc06      	bgt.n	800aff8 <__sflush_r+0xf8>
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	f04f 30ff 	mov.w	r0, #4294967295
 800aff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aff4:	81a3      	strh	r3, [r4, #12]
 800aff6:	e790      	b.n	800af1a <__sflush_r+0x1a>
 800aff8:	4407      	add	r7, r0
 800affa:	1a36      	subs	r6, r6, r0
 800affc:	e7ea      	b.n	800afd4 <__sflush_r+0xd4>
 800affe:	bf00      	nop
 800b000:	dfbffffe 	.word	0xdfbffffe

0800b004 <_fflush_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	690b      	ldr	r3, [r1, #16]
 800b008:	4605      	mov	r5, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	b913      	cbnz	r3, 800b014 <_fflush_r+0x10>
 800b00e:	2500      	movs	r5, #0
 800b010:	4628      	mov	r0, r5
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	b118      	cbz	r0, 800b01e <_fflush_r+0x1a>
 800b016:	6a03      	ldr	r3, [r0, #32]
 800b018:	b90b      	cbnz	r3, 800b01e <_fflush_r+0x1a>
 800b01a:	f7fe fa11 	bl	8009440 <__sinit>
 800b01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0f3      	beq.n	800b00e <_fflush_r+0xa>
 800b026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b028:	07d0      	lsls	r0, r2, #31
 800b02a:	d404      	bmi.n	800b036 <_fflush_r+0x32>
 800b02c:	0599      	lsls	r1, r3, #22
 800b02e:	d402      	bmi.n	800b036 <_fflush_r+0x32>
 800b030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b032:	f7fe fb1c 	bl	800966e <__retarget_lock_acquire_recursive>
 800b036:	4628      	mov	r0, r5
 800b038:	4621      	mov	r1, r4
 800b03a:	f7ff ff61 	bl	800af00 <__sflush_r>
 800b03e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b040:	4605      	mov	r5, r0
 800b042:	07da      	lsls	r2, r3, #31
 800b044:	d4e4      	bmi.n	800b010 <_fflush_r+0xc>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	059b      	lsls	r3, r3, #22
 800b04a:	d4e1      	bmi.n	800b010 <_fflush_r+0xc>
 800b04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b04e:	f7fe fb0f 	bl	8009670 <__retarget_lock_release_recursive>
 800b052:	e7dd      	b.n	800b010 <_fflush_r+0xc>

0800b054 <memmove>:
 800b054:	4288      	cmp	r0, r1
 800b056:	b510      	push	{r4, lr}
 800b058:	eb01 0402 	add.w	r4, r1, r2
 800b05c:	d902      	bls.n	800b064 <memmove+0x10>
 800b05e:	4284      	cmp	r4, r0
 800b060:	4623      	mov	r3, r4
 800b062:	d807      	bhi.n	800b074 <memmove+0x20>
 800b064:	1e43      	subs	r3, r0, #1
 800b066:	42a1      	cmp	r1, r4
 800b068:	d008      	beq.n	800b07c <memmove+0x28>
 800b06a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b06e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b072:	e7f8      	b.n	800b066 <memmove+0x12>
 800b074:	4601      	mov	r1, r0
 800b076:	4402      	add	r2, r0
 800b078:	428a      	cmp	r2, r1
 800b07a:	d100      	bne.n	800b07e <memmove+0x2a>
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b086:	e7f7      	b.n	800b078 <memmove+0x24>

0800b088 <_sbrk_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	2300      	movs	r3, #0
 800b08c:	4d05      	ldr	r5, [pc, #20]	; (800b0a4 <_sbrk_r+0x1c>)
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	602b      	str	r3, [r5, #0]
 800b094:	f7fa fb20 	bl	80056d8 <_sbrk>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_sbrk_r+0x1a>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_sbrk_r+0x1a>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	200006a4 	.word	0x200006a4

0800b0a8 <memcpy>:
 800b0a8:	440a      	add	r2, r1
 800b0aa:	4291      	cmp	r1, r2
 800b0ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0b0:	d100      	bne.n	800b0b4 <memcpy+0xc>
 800b0b2:	4770      	bx	lr
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ba:	4291      	cmp	r1, r2
 800b0bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0c0:	d1f9      	bne.n	800b0b6 <memcpy+0xe>
 800b0c2:	bd10      	pop	{r4, pc}

0800b0c4 <__assert_func>:
 800b0c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0c6:	4614      	mov	r4, r2
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	4b09      	ldr	r3, [pc, #36]	; (800b0f0 <__assert_func+0x2c>)
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68d8      	ldr	r0, [r3, #12]
 800b0d2:	b14c      	cbz	r4, 800b0e8 <__assert_func+0x24>
 800b0d4:	4b07      	ldr	r3, [pc, #28]	; (800b0f4 <__assert_func+0x30>)
 800b0d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0da:	9100      	str	r1, [sp, #0]
 800b0dc:	462b      	mov	r3, r5
 800b0de:	4906      	ldr	r1, [pc, #24]	; (800b0f8 <__assert_func+0x34>)
 800b0e0:	f000 f870 	bl	800b1c4 <fiprintf>
 800b0e4:	f000 f880 	bl	800b1e8 <abort>
 800b0e8:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <__assert_func+0x38>)
 800b0ea:	461c      	mov	r4, r3
 800b0ec:	e7f3      	b.n	800b0d6 <__assert_func+0x12>
 800b0ee:	bf00      	nop
 800b0f0:	20000144 	.word	0x20000144
 800b0f4:	0800cf7f 	.word	0x0800cf7f
 800b0f8:	0800cf8c 	.word	0x0800cf8c
 800b0fc:	0800cfba 	.word	0x0800cfba

0800b100 <_calloc_r>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	fba1 5402 	umull	r5, r4, r1, r2
 800b106:	b934      	cbnz	r4, 800b116 <_calloc_r+0x16>
 800b108:	4629      	mov	r1, r5
 800b10a:	f7ff f99d 	bl	800a448 <_malloc_r>
 800b10e:	4606      	mov	r6, r0
 800b110:	b928      	cbnz	r0, 800b11e <_calloc_r+0x1e>
 800b112:	4630      	mov	r0, r6
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	220c      	movs	r2, #12
 800b118:	2600      	movs	r6, #0
 800b11a:	6002      	str	r2, [r0, #0]
 800b11c:	e7f9      	b.n	800b112 <_calloc_r+0x12>
 800b11e:	462a      	mov	r2, r5
 800b120:	4621      	mov	r1, r4
 800b122:	f7fe fa26 	bl	8009572 <memset>
 800b126:	e7f4      	b.n	800b112 <_calloc_r+0x12>

0800b128 <__ascii_mbtowc>:
 800b128:	b082      	sub	sp, #8
 800b12a:	b901      	cbnz	r1, 800b12e <__ascii_mbtowc+0x6>
 800b12c:	a901      	add	r1, sp, #4
 800b12e:	b142      	cbz	r2, 800b142 <__ascii_mbtowc+0x1a>
 800b130:	b14b      	cbz	r3, 800b146 <__ascii_mbtowc+0x1e>
 800b132:	7813      	ldrb	r3, [r2, #0]
 800b134:	600b      	str	r3, [r1, #0]
 800b136:	7812      	ldrb	r2, [r2, #0]
 800b138:	1e10      	subs	r0, r2, #0
 800b13a:	bf18      	it	ne
 800b13c:	2001      	movne	r0, #1
 800b13e:	b002      	add	sp, #8
 800b140:	4770      	bx	lr
 800b142:	4610      	mov	r0, r2
 800b144:	e7fb      	b.n	800b13e <__ascii_mbtowc+0x16>
 800b146:	f06f 0001 	mvn.w	r0, #1
 800b14a:	e7f8      	b.n	800b13e <__ascii_mbtowc+0x16>

0800b14c <_realloc_r>:
 800b14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b150:	4680      	mov	r8, r0
 800b152:	4614      	mov	r4, r2
 800b154:	460e      	mov	r6, r1
 800b156:	b921      	cbnz	r1, 800b162 <_realloc_r+0x16>
 800b158:	4611      	mov	r1, r2
 800b15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b15e:	f7ff b973 	b.w	800a448 <_malloc_r>
 800b162:	b92a      	cbnz	r2, 800b170 <_realloc_r+0x24>
 800b164:	f7ff f900 	bl	800a368 <_free_r>
 800b168:	4625      	mov	r5, r4
 800b16a:	4628      	mov	r0, r5
 800b16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b170:	f000 f841 	bl	800b1f6 <_malloc_usable_size_r>
 800b174:	4284      	cmp	r4, r0
 800b176:	4607      	mov	r7, r0
 800b178:	d802      	bhi.n	800b180 <_realloc_r+0x34>
 800b17a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b17e:	d812      	bhi.n	800b1a6 <_realloc_r+0x5a>
 800b180:	4621      	mov	r1, r4
 800b182:	4640      	mov	r0, r8
 800b184:	f7ff f960 	bl	800a448 <_malloc_r>
 800b188:	4605      	mov	r5, r0
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d0ed      	beq.n	800b16a <_realloc_r+0x1e>
 800b18e:	42bc      	cmp	r4, r7
 800b190:	4622      	mov	r2, r4
 800b192:	4631      	mov	r1, r6
 800b194:	bf28      	it	cs
 800b196:	463a      	movcs	r2, r7
 800b198:	f7ff ff86 	bl	800b0a8 <memcpy>
 800b19c:	4631      	mov	r1, r6
 800b19e:	4640      	mov	r0, r8
 800b1a0:	f7ff f8e2 	bl	800a368 <_free_r>
 800b1a4:	e7e1      	b.n	800b16a <_realloc_r+0x1e>
 800b1a6:	4635      	mov	r5, r6
 800b1a8:	e7df      	b.n	800b16a <_realloc_r+0x1e>

0800b1aa <__ascii_wctomb>:
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	4608      	mov	r0, r1
 800b1ae:	b141      	cbz	r1, 800b1c2 <__ascii_wctomb+0x18>
 800b1b0:	2aff      	cmp	r2, #255	; 0xff
 800b1b2:	d904      	bls.n	800b1be <__ascii_wctomb+0x14>
 800b1b4:	228a      	movs	r2, #138	; 0x8a
 800b1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	4770      	bx	lr
 800b1be:	2001      	movs	r0, #1
 800b1c0:	700a      	strb	r2, [r1, #0]
 800b1c2:	4770      	bx	lr

0800b1c4 <fiprintf>:
 800b1c4:	b40e      	push	{r1, r2, r3}
 800b1c6:	b503      	push	{r0, r1, lr}
 800b1c8:	4601      	mov	r1, r0
 800b1ca:	ab03      	add	r3, sp, #12
 800b1cc:	4805      	ldr	r0, [pc, #20]	; (800b1e4 <fiprintf+0x20>)
 800b1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1d2:	6800      	ldr	r0, [r0, #0]
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	f000 f83d 	bl	800b254 <_vfiprintf_r>
 800b1da:	b002      	add	sp, #8
 800b1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1e0:	b003      	add	sp, #12
 800b1e2:	4770      	bx	lr
 800b1e4:	20000144 	.word	0x20000144

0800b1e8 <abort>:
 800b1e8:	2006      	movs	r0, #6
 800b1ea:	b508      	push	{r3, lr}
 800b1ec:	f000 fa0a 	bl	800b604 <raise>
 800b1f0:	2001      	movs	r0, #1
 800b1f2:	f7fa f9fe 	bl	80055f2 <_exit>

0800b1f6 <_malloc_usable_size_r>:
 800b1f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1fa:	1f18      	subs	r0, r3, #4
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	bfbc      	itt	lt
 800b200:	580b      	ldrlt	r3, [r1, r0]
 800b202:	18c0      	addlt	r0, r0, r3
 800b204:	4770      	bx	lr

0800b206 <__sfputc_r>:
 800b206:	6893      	ldr	r3, [r2, #8]
 800b208:	b410      	push	{r4}
 800b20a:	3b01      	subs	r3, #1
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	6093      	str	r3, [r2, #8]
 800b210:	da07      	bge.n	800b222 <__sfputc_r+0x1c>
 800b212:	6994      	ldr	r4, [r2, #24]
 800b214:	42a3      	cmp	r3, r4
 800b216:	db01      	blt.n	800b21c <__sfputc_r+0x16>
 800b218:	290a      	cmp	r1, #10
 800b21a:	d102      	bne.n	800b222 <__sfputc_r+0x1c>
 800b21c:	bc10      	pop	{r4}
 800b21e:	f000 b933 	b.w	800b488 <__swbuf_r>
 800b222:	6813      	ldr	r3, [r2, #0]
 800b224:	1c58      	adds	r0, r3, #1
 800b226:	6010      	str	r0, [r2, #0]
 800b228:	7019      	strb	r1, [r3, #0]
 800b22a:	4608      	mov	r0, r1
 800b22c:	bc10      	pop	{r4}
 800b22e:	4770      	bx	lr

0800b230 <__sfputs_r>:
 800b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b232:	4606      	mov	r6, r0
 800b234:	460f      	mov	r7, r1
 800b236:	4614      	mov	r4, r2
 800b238:	18d5      	adds	r5, r2, r3
 800b23a:	42ac      	cmp	r4, r5
 800b23c:	d101      	bne.n	800b242 <__sfputs_r+0x12>
 800b23e:	2000      	movs	r0, #0
 800b240:	e007      	b.n	800b252 <__sfputs_r+0x22>
 800b242:	463a      	mov	r2, r7
 800b244:	4630      	mov	r0, r6
 800b246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24a:	f7ff ffdc 	bl	800b206 <__sfputc_r>
 800b24e:	1c43      	adds	r3, r0, #1
 800b250:	d1f3      	bne.n	800b23a <__sfputs_r+0xa>
 800b252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b254 <_vfiprintf_r>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	460d      	mov	r5, r1
 800b25a:	4614      	mov	r4, r2
 800b25c:	4698      	mov	r8, r3
 800b25e:	4606      	mov	r6, r0
 800b260:	b09d      	sub	sp, #116	; 0x74
 800b262:	b118      	cbz	r0, 800b26c <_vfiprintf_r+0x18>
 800b264:	6a03      	ldr	r3, [r0, #32]
 800b266:	b90b      	cbnz	r3, 800b26c <_vfiprintf_r+0x18>
 800b268:	f7fe f8ea 	bl	8009440 <__sinit>
 800b26c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b26e:	07d9      	lsls	r1, r3, #31
 800b270:	d405      	bmi.n	800b27e <_vfiprintf_r+0x2a>
 800b272:	89ab      	ldrh	r3, [r5, #12]
 800b274:	059a      	lsls	r2, r3, #22
 800b276:	d402      	bmi.n	800b27e <_vfiprintf_r+0x2a>
 800b278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b27a:	f7fe f9f8 	bl	800966e <__retarget_lock_acquire_recursive>
 800b27e:	89ab      	ldrh	r3, [r5, #12]
 800b280:	071b      	lsls	r3, r3, #28
 800b282:	d501      	bpl.n	800b288 <_vfiprintf_r+0x34>
 800b284:	692b      	ldr	r3, [r5, #16]
 800b286:	b99b      	cbnz	r3, 800b2b0 <_vfiprintf_r+0x5c>
 800b288:	4629      	mov	r1, r5
 800b28a:	4630      	mov	r0, r6
 800b28c:	f000 f93a 	bl	800b504 <__swsetup_r>
 800b290:	b170      	cbz	r0, 800b2b0 <_vfiprintf_r+0x5c>
 800b292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b294:	07dc      	lsls	r4, r3, #31
 800b296:	d504      	bpl.n	800b2a2 <_vfiprintf_r+0x4e>
 800b298:	f04f 30ff 	mov.w	r0, #4294967295
 800b29c:	b01d      	add	sp, #116	; 0x74
 800b29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a2:	89ab      	ldrh	r3, [r5, #12]
 800b2a4:	0598      	lsls	r0, r3, #22
 800b2a6:	d4f7      	bmi.n	800b298 <_vfiprintf_r+0x44>
 800b2a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2aa:	f7fe f9e1 	bl	8009670 <__retarget_lock_release_recursive>
 800b2ae:	e7f3      	b.n	800b298 <_vfiprintf_r+0x44>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b4:	2320      	movs	r3, #32
 800b2b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2ba:	2330      	movs	r3, #48	; 0x30
 800b2bc:	f04f 0901 	mov.w	r9, #1
 800b2c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b474 <_vfiprintf_r+0x220>
 800b2c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2cc:	4623      	mov	r3, r4
 800b2ce:	469a      	mov	sl, r3
 800b2d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2d4:	b10a      	cbz	r2, 800b2da <_vfiprintf_r+0x86>
 800b2d6:	2a25      	cmp	r2, #37	; 0x25
 800b2d8:	d1f9      	bne.n	800b2ce <_vfiprintf_r+0x7a>
 800b2da:	ebba 0b04 	subs.w	fp, sl, r4
 800b2de:	d00b      	beq.n	800b2f8 <_vfiprintf_r+0xa4>
 800b2e0:	465b      	mov	r3, fp
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f7ff ffa2 	bl	800b230 <__sfputs_r>
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	f000 80a9 	beq.w	800b444 <_vfiprintf_r+0x1f0>
 800b2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f4:	445a      	add	r2, fp
 800b2f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 80a1 	beq.w	800b444 <_vfiprintf_r+0x1f0>
 800b302:	2300      	movs	r3, #0
 800b304:	f04f 32ff 	mov.w	r2, #4294967295
 800b308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b30c:	f10a 0a01 	add.w	sl, sl, #1
 800b310:	9304      	str	r3, [sp, #16]
 800b312:	9307      	str	r3, [sp, #28]
 800b314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b318:	931a      	str	r3, [sp, #104]	; 0x68
 800b31a:	4654      	mov	r4, sl
 800b31c:	2205      	movs	r2, #5
 800b31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b322:	4854      	ldr	r0, [pc, #336]	; (800b474 <_vfiprintf_r+0x220>)
 800b324:	f7fe f9a5 	bl	8009672 <memchr>
 800b328:	9a04      	ldr	r2, [sp, #16]
 800b32a:	b9d8      	cbnz	r0, 800b364 <_vfiprintf_r+0x110>
 800b32c:	06d1      	lsls	r1, r2, #27
 800b32e:	bf44      	itt	mi
 800b330:	2320      	movmi	r3, #32
 800b332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b336:	0713      	lsls	r3, r2, #28
 800b338:	bf44      	itt	mi
 800b33a:	232b      	movmi	r3, #43	; 0x2b
 800b33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b340:	f89a 3000 	ldrb.w	r3, [sl]
 800b344:	2b2a      	cmp	r3, #42	; 0x2a
 800b346:	d015      	beq.n	800b374 <_vfiprintf_r+0x120>
 800b348:	4654      	mov	r4, sl
 800b34a:	2000      	movs	r0, #0
 800b34c:	f04f 0c0a 	mov.w	ip, #10
 800b350:	9a07      	ldr	r2, [sp, #28]
 800b352:	4621      	mov	r1, r4
 800b354:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b358:	3b30      	subs	r3, #48	; 0x30
 800b35a:	2b09      	cmp	r3, #9
 800b35c:	d94d      	bls.n	800b3fa <_vfiprintf_r+0x1a6>
 800b35e:	b1b0      	cbz	r0, 800b38e <_vfiprintf_r+0x13a>
 800b360:	9207      	str	r2, [sp, #28]
 800b362:	e014      	b.n	800b38e <_vfiprintf_r+0x13a>
 800b364:	eba0 0308 	sub.w	r3, r0, r8
 800b368:	fa09 f303 	lsl.w	r3, r9, r3
 800b36c:	4313      	orrs	r3, r2
 800b36e:	46a2      	mov	sl, r4
 800b370:	9304      	str	r3, [sp, #16]
 800b372:	e7d2      	b.n	800b31a <_vfiprintf_r+0xc6>
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	1d19      	adds	r1, r3, #4
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	9103      	str	r1, [sp, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	bfbb      	ittet	lt
 800b380:	425b      	neglt	r3, r3
 800b382:	f042 0202 	orrlt.w	r2, r2, #2
 800b386:	9307      	strge	r3, [sp, #28]
 800b388:	9307      	strlt	r3, [sp, #28]
 800b38a:	bfb8      	it	lt
 800b38c:	9204      	strlt	r2, [sp, #16]
 800b38e:	7823      	ldrb	r3, [r4, #0]
 800b390:	2b2e      	cmp	r3, #46	; 0x2e
 800b392:	d10c      	bne.n	800b3ae <_vfiprintf_r+0x15a>
 800b394:	7863      	ldrb	r3, [r4, #1]
 800b396:	2b2a      	cmp	r3, #42	; 0x2a
 800b398:	d134      	bne.n	800b404 <_vfiprintf_r+0x1b0>
 800b39a:	9b03      	ldr	r3, [sp, #12]
 800b39c:	3402      	adds	r4, #2
 800b39e:	1d1a      	adds	r2, r3, #4
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	9203      	str	r2, [sp, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bfb8      	it	lt
 800b3a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3ac:	9305      	str	r3, [sp, #20]
 800b3ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b478 <_vfiprintf_r+0x224>
 800b3b2:	2203      	movs	r2, #3
 800b3b4:	4650      	mov	r0, sl
 800b3b6:	7821      	ldrb	r1, [r4, #0]
 800b3b8:	f7fe f95b 	bl	8009672 <memchr>
 800b3bc:	b138      	cbz	r0, 800b3ce <_vfiprintf_r+0x17a>
 800b3be:	2240      	movs	r2, #64	; 0x40
 800b3c0:	9b04      	ldr	r3, [sp, #16]
 800b3c2:	eba0 000a 	sub.w	r0, r0, sl
 800b3c6:	4082      	lsls	r2, r0
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	3401      	adds	r4, #1
 800b3cc:	9304      	str	r3, [sp, #16]
 800b3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d2:	2206      	movs	r2, #6
 800b3d4:	4829      	ldr	r0, [pc, #164]	; (800b47c <_vfiprintf_r+0x228>)
 800b3d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3da:	f7fe f94a 	bl	8009672 <memchr>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d03f      	beq.n	800b462 <_vfiprintf_r+0x20e>
 800b3e2:	4b27      	ldr	r3, [pc, #156]	; (800b480 <_vfiprintf_r+0x22c>)
 800b3e4:	bb1b      	cbnz	r3, 800b42e <_vfiprintf_r+0x1da>
 800b3e6:	9b03      	ldr	r3, [sp, #12]
 800b3e8:	3307      	adds	r3, #7
 800b3ea:	f023 0307 	bic.w	r3, r3, #7
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	9303      	str	r3, [sp, #12]
 800b3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f4:	443b      	add	r3, r7
 800b3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f8:	e768      	b.n	800b2cc <_vfiprintf_r+0x78>
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800b402:	e7a6      	b.n	800b352 <_vfiprintf_r+0xfe>
 800b404:	2300      	movs	r3, #0
 800b406:	f04f 0c0a 	mov.w	ip, #10
 800b40a:	4619      	mov	r1, r3
 800b40c:	3401      	adds	r4, #1
 800b40e:	9305      	str	r3, [sp, #20]
 800b410:	4620      	mov	r0, r4
 800b412:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b416:	3a30      	subs	r2, #48	; 0x30
 800b418:	2a09      	cmp	r2, #9
 800b41a:	d903      	bls.n	800b424 <_vfiprintf_r+0x1d0>
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0c6      	beq.n	800b3ae <_vfiprintf_r+0x15a>
 800b420:	9105      	str	r1, [sp, #20]
 800b422:	e7c4      	b.n	800b3ae <_vfiprintf_r+0x15a>
 800b424:	4604      	mov	r4, r0
 800b426:	2301      	movs	r3, #1
 800b428:	fb0c 2101 	mla	r1, ip, r1, r2
 800b42c:	e7f0      	b.n	800b410 <_vfiprintf_r+0x1bc>
 800b42e:	ab03      	add	r3, sp, #12
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	462a      	mov	r2, r5
 800b434:	4630      	mov	r0, r6
 800b436:	4b13      	ldr	r3, [pc, #76]	; (800b484 <_vfiprintf_r+0x230>)
 800b438:	a904      	add	r1, sp, #16
 800b43a:	f7fd fbb3 	bl	8008ba4 <_printf_float>
 800b43e:	4607      	mov	r7, r0
 800b440:	1c78      	adds	r0, r7, #1
 800b442:	d1d6      	bne.n	800b3f2 <_vfiprintf_r+0x19e>
 800b444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b446:	07d9      	lsls	r1, r3, #31
 800b448:	d405      	bmi.n	800b456 <_vfiprintf_r+0x202>
 800b44a:	89ab      	ldrh	r3, [r5, #12]
 800b44c:	059a      	lsls	r2, r3, #22
 800b44e:	d402      	bmi.n	800b456 <_vfiprintf_r+0x202>
 800b450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b452:	f7fe f90d 	bl	8009670 <__retarget_lock_release_recursive>
 800b456:	89ab      	ldrh	r3, [r5, #12]
 800b458:	065b      	lsls	r3, r3, #25
 800b45a:	f53f af1d 	bmi.w	800b298 <_vfiprintf_r+0x44>
 800b45e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b460:	e71c      	b.n	800b29c <_vfiprintf_r+0x48>
 800b462:	ab03      	add	r3, sp, #12
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	462a      	mov	r2, r5
 800b468:	4630      	mov	r0, r6
 800b46a:	4b06      	ldr	r3, [pc, #24]	; (800b484 <_vfiprintf_r+0x230>)
 800b46c:	a904      	add	r1, sp, #16
 800b46e:	f7fd fe39 	bl	80090e4 <_printf_i>
 800b472:	e7e4      	b.n	800b43e <_vfiprintf_r+0x1ea>
 800b474:	0800cf64 	.word	0x0800cf64
 800b478:	0800cf6a 	.word	0x0800cf6a
 800b47c:	0800cf6e 	.word	0x0800cf6e
 800b480:	08008ba5 	.word	0x08008ba5
 800b484:	0800b231 	.word	0x0800b231

0800b488 <__swbuf_r>:
 800b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48a:	460e      	mov	r6, r1
 800b48c:	4614      	mov	r4, r2
 800b48e:	4605      	mov	r5, r0
 800b490:	b118      	cbz	r0, 800b49a <__swbuf_r+0x12>
 800b492:	6a03      	ldr	r3, [r0, #32]
 800b494:	b90b      	cbnz	r3, 800b49a <__swbuf_r+0x12>
 800b496:	f7fd ffd3 	bl	8009440 <__sinit>
 800b49a:	69a3      	ldr	r3, [r4, #24]
 800b49c:	60a3      	str	r3, [r4, #8]
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	071a      	lsls	r2, r3, #28
 800b4a2:	d525      	bpl.n	800b4f0 <__swbuf_r+0x68>
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	b31b      	cbz	r3, 800b4f0 <__swbuf_r+0x68>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	6922      	ldr	r2, [r4, #16]
 800b4ac:	b2f6      	uxtb	r6, r6
 800b4ae:	1a98      	subs	r0, r3, r2
 800b4b0:	6963      	ldr	r3, [r4, #20]
 800b4b2:	4637      	mov	r7, r6
 800b4b4:	4283      	cmp	r3, r0
 800b4b6:	dc04      	bgt.n	800b4c2 <__swbuf_r+0x3a>
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f7ff fda2 	bl	800b004 <_fflush_r>
 800b4c0:	b9e0      	cbnz	r0, 800b4fc <__swbuf_r+0x74>
 800b4c2:	68a3      	ldr	r3, [r4, #8]
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	60a3      	str	r3, [r4, #8]
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	6022      	str	r2, [r4, #0]
 800b4ce:	701e      	strb	r6, [r3, #0]
 800b4d0:	6962      	ldr	r2, [r4, #20]
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d004      	beq.n	800b4e2 <__swbuf_r+0x5a>
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	07db      	lsls	r3, r3, #31
 800b4dc:	d506      	bpl.n	800b4ec <__swbuf_r+0x64>
 800b4de:	2e0a      	cmp	r6, #10
 800b4e0:	d104      	bne.n	800b4ec <__swbuf_r+0x64>
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f7ff fd8d 	bl	800b004 <_fflush_r>
 800b4ea:	b938      	cbnz	r0, 800b4fc <__swbuf_r+0x74>
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f000 f806 	bl	800b504 <__swsetup_r>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d0d5      	beq.n	800b4a8 <__swbuf_r+0x20>
 800b4fc:	f04f 37ff 	mov.w	r7, #4294967295
 800b500:	e7f4      	b.n	800b4ec <__swbuf_r+0x64>
	...

0800b504 <__swsetup_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4b2a      	ldr	r3, [pc, #168]	; (800b5b0 <__swsetup_r+0xac>)
 800b508:	4605      	mov	r5, r0
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	460c      	mov	r4, r1
 800b50e:	b118      	cbz	r0, 800b518 <__swsetup_r+0x14>
 800b510:	6a03      	ldr	r3, [r0, #32]
 800b512:	b90b      	cbnz	r3, 800b518 <__swsetup_r+0x14>
 800b514:	f7fd ff94 	bl	8009440 <__sinit>
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b51e:	0718      	lsls	r0, r3, #28
 800b520:	d422      	bmi.n	800b568 <__swsetup_r+0x64>
 800b522:	06d9      	lsls	r1, r3, #27
 800b524:	d407      	bmi.n	800b536 <__swsetup_r+0x32>
 800b526:	2309      	movs	r3, #9
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b52e:	f04f 30ff 	mov.w	r0, #4294967295
 800b532:	81a3      	strh	r3, [r4, #12]
 800b534:	e034      	b.n	800b5a0 <__swsetup_r+0x9c>
 800b536:	0758      	lsls	r0, r3, #29
 800b538:	d512      	bpl.n	800b560 <__swsetup_r+0x5c>
 800b53a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b53c:	b141      	cbz	r1, 800b550 <__swsetup_r+0x4c>
 800b53e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b542:	4299      	cmp	r1, r3
 800b544:	d002      	beq.n	800b54c <__swsetup_r+0x48>
 800b546:	4628      	mov	r0, r5
 800b548:	f7fe ff0e 	bl	800a368 <_free_r>
 800b54c:	2300      	movs	r3, #0
 800b54e:	6363      	str	r3, [r4, #52]	; 0x34
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	2300      	movs	r3, #0
 800b55a:	6063      	str	r3, [r4, #4]
 800b55c:	6923      	ldr	r3, [r4, #16]
 800b55e:	6023      	str	r3, [r4, #0]
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	f043 0308 	orr.w	r3, r3, #8
 800b566:	81a3      	strh	r3, [r4, #12]
 800b568:	6923      	ldr	r3, [r4, #16]
 800b56a:	b94b      	cbnz	r3, 800b580 <__swsetup_r+0x7c>
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b576:	d003      	beq.n	800b580 <__swsetup_r+0x7c>
 800b578:	4621      	mov	r1, r4
 800b57a:	4628      	mov	r0, r5
 800b57c:	f000 f883 	bl	800b686 <__smakebuf_r>
 800b580:	89a0      	ldrh	r0, [r4, #12]
 800b582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b586:	f010 0301 	ands.w	r3, r0, #1
 800b58a:	d00a      	beq.n	800b5a2 <__swsetup_r+0x9e>
 800b58c:	2300      	movs	r3, #0
 800b58e:	60a3      	str	r3, [r4, #8]
 800b590:	6963      	ldr	r3, [r4, #20]
 800b592:	425b      	negs	r3, r3
 800b594:	61a3      	str	r3, [r4, #24]
 800b596:	6923      	ldr	r3, [r4, #16]
 800b598:	b943      	cbnz	r3, 800b5ac <__swsetup_r+0xa8>
 800b59a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b59e:	d1c4      	bne.n	800b52a <__swsetup_r+0x26>
 800b5a0:	bd38      	pop	{r3, r4, r5, pc}
 800b5a2:	0781      	lsls	r1, r0, #30
 800b5a4:	bf58      	it	pl
 800b5a6:	6963      	ldrpl	r3, [r4, #20]
 800b5a8:	60a3      	str	r3, [r4, #8]
 800b5aa:	e7f4      	b.n	800b596 <__swsetup_r+0x92>
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	e7f7      	b.n	800b5a0 <__swsetup_r+0x9c>
 800b5b0:	20000144 	.word	0x20000144

0800b5b4 <_raise_r>:
 800b5b4:	291f      	cmp	r1, #31
 800b5b6:	b538      	push	{r3, r4, r5, lr}
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	460d      	mov	r5, r1
 800b5bc:	d904      	bls.n	800b5c8 <_raise_r+0x14>
 800b5be:	2316      	movs	r3, #22
 800b5c0:	6003      	str	r3, [r0, #0]
 800b5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b5ca:	b112      	cbz	r2, 800b5d2 <_raise_r+0x1e>
 800b5cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5d0:	b94b      	cbnz	r3, 800b5e6 <_raise_r+0x32>
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 f830 	bl	800b638 <_getpid_r>
 800b5d8:	462a      	mov	r2, r5
 800b5da:	4601      	mov	r1, r0
 800b5dc:	4620      	mov	r0, r4
 800b5de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5e2:	f000 b817 	b.w	800b614 <_kill_r>
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d00a      	beq.n	800b600 <_raise_r+0x4c>
 800b5ea:	1c59      	adds	r1, r3, #1
 800b5ec:	d103      	bne.n	800b5f6 <_raise_r+0x42>
 800b5ee:	2316      	movs	r3, #22
 800b5f0:	6003      	str	r3, [r0, #0]
 800b5f2:	2001      	movs	r0, #1
 800b5f4:	e7e7      	b.n	800b5c6 <_raise_r+0x12>
 800b5f6:	2400      	movs	r4, #0
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5fe:	4798      	blx	r3
 800b600:	2000      	movs	r0, #0
 800b602:	e7e0      	b.n	800b5c6 <_raise_r+0x12>

0800b604 <raise>:
 800b604:	4b02      	ldr	r3, [pc, #8]	; (800b610 <raise+0xc>)
 800b606:	4601      	mov	r1, r0
 800b608:	6818      	ldr	r0, [r3, #0]
 800b60a:	f7ff bfd3 	b.w	800b5b4 <_raise_r>
 800b60e:	bf00      	nop
 800b610:	20000144 	.word	0x20000144

0800b614 <_kill_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	2300      	movs	r3, #0
 800b618:	4d06      	ldr	r5, [pc, #24]	; (800b634 <_kill_r+0x20>)
 800b61a:	4604      	mov	r4, r0
 800b61c:	4608      	mov	r0, r1
 800b61e:	4611      	mov	r1, r2
 800b620:	602b      	str	r3, [r5, #0]
 800b622:	f7f9 ffd6 	bl	80055d2 <_kill>
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	d102      	bne.n	800b630 <_kill_r+0x1c>
 800b62a:	682b      	ldr	r3, [r5, #0]
 800b62c:	b103      	cbz	r3, 800b630 <_kill_r+0x1c>
 800b62e:	6023      	str	r3, [r4, #0]
 800b630:	bd38      	pop	{r3, r4, r5, pc}
 800b632:	bf00      	nop
 800b634:	200006a4 	.word	0x200006a4

0800b638 <_getpid_r>:
 800b638:	f7f9 bfc4 	b.w	80055c4 <_getpid>

0800b63c <__swhatbuf_r>:
 800b63c:	b570      	push	{r4, r5, r6, lr}
 800b63e:	460c      	mov	r4, r1
 800b640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b644:	4615      	mov	r5, r2
 800b646:	2900      	cmp	r1, #0
 800b648:	461e      	mov	r6, r3
 800b64a:	b096      	sub	sp, #88	; 0x58
 800b64c:	da0c      	bge.n	800b668 <__swhatbuf_r+0x2c>
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	2100      	movs	r1, #0
 800b652:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b656:	bf0c      	ite	eq
 800b658:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b65c:	2340      	movne	r3, #64	; 0x40
 800b65e:	2000      	movs	r0, #0
 800b660:	6031      	str	r1, [r6, #0]
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	b016      	add	sp, #88	; 0x58
 800b666:	bd70      	pop	{r4, r5, r6, pc}
 800b668:	466a      	mov	r2, sp
 800b66a:	f000 f849 	bl	800b700 <_fstat_r>
 800b66e:	2800      	cmp	r0, #0
 800b670:	dbed      	blt.n	800b64e <__swhatbuf_r+0x12>
 800b672:	9901      	ldr	r1, [sp, #4]
 800b674:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b678:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b67c:	4259      	negs	r1, r3
 800b67e:	4159      	adcs	r1, r3
 800b680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b684:	e7eb      	b.n	800b65e <__swhatbuf_r+0x22>

0800b686 <__smakebuf_r>:
 800b686:	898b      	ldrh	r3, [r1, #12]
 800b688:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b68a:	079d      	lsls	r5, r3, #30
 800b68c:	4606      	mov	r6, r0
 800b68e:	460c      	mov	r4, r1
 800b690:	d507      	bpl.n	800b6a2 <__smakebuf_r+0x1c>
 800b692:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b696:	6023      	str	r3, [r4, #0]
 800b698:	6123      	str	r3, [r4, #16]
 800b69a:	2301      	movs	r3, #1
 800b69c:	6163      	str	r3, [r4, #20]
 800b69e:	b002      	add	sp, #8
 800b6a0:	bd70      	pop	{r4, r5, r6, pc}
 800b6a2:	466a      	mov	r2, sp
 800b6a4:	ab01      	add	r3, sp, #4
 800b6a6:	f7ff ffc9 	bl	800b63c <__swhatbuf_r>
 800b6aa:	9900      	ldr	r1, [sp, #0]
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f7fe feca 	bl	800a448 <_malloc_r>
 800b6b4:	b948      	cbnz	r0, 800b6ca <__smakebuf_r+0x44>
 800b6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ba:	059a      	lsls	r2, r3, #22
 800b6bc:	d4ef      	bmi.n	800b69e <__smakebuf_r+0x18>
 800b6be:	f023 0303 	bic.w	r3, r3, #3
 800b6c2:	f043 0302 	orr.w	r3, r3, #2
 800b6c6:	81a3      	strh	r3, [r4, #12]
 800b6c8:	e7e3      	b.n	800b692 <__smakebuf_r+0xc>
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	6020      	str	r0, [r4, #0]
 800b6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d2:	81a3      	strh	r3, [r4, #12]
 800b6d4:	9b00      	ldr	r3, [sp, #0]
 800b6d6:	6120      	str	r0, [r4, #16]
 800b6d8:	6163      	str	r3, [r4, #20]
 800b6da:	9b01      	ldr	r3, [sp, #4]
 800b6dc:	b15b      	cbz	r3, 800b6f6 <__smakebuf_r+0x70>
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6e4:	f000 f81e 	bl	800b724 <_isatty_r>
 800b6e8:	b128      	cbz	r0, 800b6f6 <__smakebuf_r+0x70>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	f023 0303 	bic.w	r3, r3, #3
 800b6f0:	f043 0301 	orr.w	r3, r3, #1
 800b6f4:	81a3      	strh	r3, [r4, #12]
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	431d      	orrs	r5, r3
 800b6fa:	81a5      	strh	r5, [r4, #12]
 800b6fc:	e7cf      	b.n	800b69e <__smakebuf_r+0x18>
	...

0800b700 <_fstat_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	2300      	movs	r3, #0
 800b704:	4d06      	ldr	r5, [pc, #24]	; (800b720 <_fstat_r+0x20>)
 800b706:	4604      	mov	r4, r0
 800b708:	4608      	mov	r0, r1
 800b70a:	4611      	mov	r1, r2
 800b70c:	602b      	str	r3, [r5, #0]
 800b70e:	f7f9 ffbe 	bl	800568e <_fstat>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	d102      	bne.n	800b71c <_fstat_r+0x1c>
 800b716:	682b      	ldr	r3, [r5, #0]
 800b718:	b103      	cbz	r3, 800b71c <_fstat_r+0x1c>
 800b71a:	6023      	str	r3, [r4, #0]
 800b71c:	bd38      	pop	{r3, r4, r5, pc}
 800b71e:	bf00      	nop
 800b720:	200006a4 	.word	0x200006a4

0800b724 <_isatty_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	2300      	movs	r3, #0
 800b728:	4d05      	ldr	r5, [pc, #20]	; (800b740 <_isatty_r+0x1c>)
 800b72a:	4604      	mov	r4, r0
 800b72c:	4608      	mov	r0, r1
 800b72e:	602b      	str	r3, [r5, #0]
 800b730:	f7f9 ffbc 	bl	80056ac <_isatty>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	d102      	bne.n	800b73e <_isatty_r+0x1a>
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	b103      	cbz	r3, 800b73e <_isatty_r+0x1a>
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	200006a4 	.word	0x200006a4

0800b744 <sin>:
 800b744:	b530      	push	{r4, r5, lr}
 800b746:	4a20      	ldr	r2, [pc, #128]	; (800b7c8 <sin+0x84>)
 800b748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b74c:	4293      	cmp	r3, r2
 800b74e:	b087      	sub	sp, #28
 800b750:	dc06      	bgt.n	800b760 <sin+0x1c>
 800b752:	2300      	movs	r3, #0
 800b754:	2200      	movs	r2, #0
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	2300      	movs	r3, #0
 800b75a:	f000 f8f9 	bl	800b950 <__kernel_sin>
 800b75e:	e006      	b.n	800b76e <sin+0x2a>
 800b760:	4a1a      	ldr	r2, [pc, #104]	; (800b7cc <sin+0x88>)
 800b762:	4293      	cmp	r3, r2
 800b764:	dd05      	ble.n	800b772 <sin+0x2e>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	f7f4 fcfd 	bl	8000168 <__aeabi_dsub>
 800b76e:	b007      	add	sp, #28
 800b770:	bd30      	pop	{r4, r5, pc}
 800b772:	aa02      	add	r2, sp, #8
 800b774:	f000 f9a4 	bl	800bac0 <__ieee754_rem_pio2>
 800b778:	f000 0003 	and.w	r0, r0, #3
 800b77c:	2801      	cmp	r0, #1
 800b77e:	d009      	beq.n	800b794 <sin+0x50>
 800b780:	2802      	cmp	r0, #2
 800b782:	d00e      	beq.n	800b7a2 <sin+0x5e>
 800b784:	b9c0      	cbnz	r0, 800b7b8 <sin+0x74>
 800b786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b78a:	2301      	movs	r3, #1
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b792:	e7e2      	b.n	800b75a <sin+0x16>
 800b794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b79c:	f000 f818 	bl	800b7d0 <__kernel_cos>
 800b7a0:	e7e5      	b.n	800b76e <sin+0x2a>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7ae:	f000 f8cf 	bl	800b950 <__kernel_sin>
 800b7b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b7b6:	e7da      	b.n	800b76e <sin+0x2a>
 800b7b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c0:	f000 f806 	bl	800b7d0 <__kernel_cos>
 800b7c4:	e7f5      	b.n	800b7b2 <sin+0x6e>
 800b7c6:	bf00      	nop
 800b7c8:	3fe921fb 	.word	0x3fe921fb
 800b7cc:	7fefffff 	.word	0x7fefffff

0800b7d0 <__kernel_cos>:
 800b7d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b7d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b7dc:	4680      	mov	r8, r0
 800b7de:	460f      	mov	r7, r1
 800b7e0:	e9cd 2300 	strd	r2, r3, [sp]
 800b7e4:	da04      	bge.n	800b7f0 <__kernel_cos+0x20>
 800b7e6:	f7f5 f927 	bl	8000a38 <__aeabi_d2iz>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	f000 8086 	beq.w	800b8fc <__kernel_cos+0x12c>
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	463b      	mov	r3, r7
 800b7f4:	4640      	mov	r0, r8
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f4 fe6e 	bl	80004d8 <__aeabi_dmul>
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	4b4e      	ldr	r3, [pc, #312]	; (800b938 <__kernel_cos+0x168>)
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	f7f4 fe68 	bl	80004d8 <__aeabi_dmul>
 800b808:	a33f      	add	r3, pc, #252	; (adr r3, 800b908 <__kernel_cos+0x138>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	4682      	mov	sl, r0
 800b810:	468b      	mov	fp, r1
 800b812:	4620      	mov	r0, r4
 800b814:	4629      	mov	r1, r5
 800b816:	f7f4 fe5f 	bl	80004d8 <__aeabi_dmul>
 800b81a:	a33d      	add	r3, pc, #244	; (adr r3, 800b910 <__kernel_cos+0x140>)
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	f7f4 fca4 	bl	800016c <__adddf3>
 800b824:	4622      	mov	r2, r4
 800b826:	462b      	mov	r3, r5
 800b828:	f7f4 fe56 	bl	80004d8 <__aeabi_dmul>
 800b82c:	a33a      	add	r3, pc, #232	; (adr r3, 800b918 <__kernel_cos+0x148>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f4 fc99 	bl	8000168 <__aeabi_dsub>
 800b836:	4622      	mov	r2, r4
 800b838:	462b      	mov	r3, r5
 800b83a:	f7f4 fe4d 	bl	80004d8 <__aeabi_dmul>
 800b83e:	a338      	add	r3, pc, #224	; (adr r3, 800b920 <__kernel_cos+0x150>)
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	f7f4 fc92 	bl	800016c <__adddf3>
 800b848:	4622      	mov	r2, r4
 800b84a:	462b      	mov	r3, r5
 800b84c:	f7f4 fe44 	bl	80004d8 <__aeabi_dmul>
 800b850:	a335      	add	r3, pc, #212	; (adr r3, 800b928 <__kernel_cos+0x158>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fc87 	bl	8000168 <__aeabi_dsub>
 800b85a:	4622      	mov	r2, r4
 800b85c:	462b      	mov	r3, r5
 800b85e:	f7f4 fe3b 	bl	80004d8 <__aeabi_dmul>
 800b862:	a333      	add	r3, pc, #204	; (adr r3, 800b930 <__kernel_cos+0x160>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f7f4 fc80 	bl	800016c <__adddf3>
 800b86c:	4622      	mov	r2, r4
 800b86e:	462b      	mov	r3, r5
 800b870:	f7f4 fe32 	bl	80004d8 <__aeabi_dmul>
 800b874:	4622      	mov	r2, r4
 800b876:	462b      	mov	r3, r5
 800b878:	f7f4 fe2e 	bl	80004d8 <__aeabi_dmul>
 800b87c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b880:	4604      	mov	r4, r0
 800b882:	460d      	mov	r5, r1
 800b884:	4640      	mov	r0, r8
 800b886:	4639      	mov	r1, r7
 800b888:	f7f4 fe26 	bl	80004d8 <__aeabi_dmul>
 800b88c:	460b      	mov	r3, r1
 800b88e:	4602      	mov	r2, r0
 800b890:	4629      	mov	r1, r5
 800b892:	4620      	mov	r0, r4
 800b894:	f7f4 fc68 	bl	8000168 <__aeabi_dsub>
 800b898:	4b28      	ldr	r3, [pc, #160]	; (800b93c <__kernel_cos+0x16c>)
 800b89a:	4680      	mov	r8, r0
 800b89c:	429e      	cmp	r6, r3
 800b89e:	4689      	mov	r9, r1
 800b8a0:	dc0e      	bgt.n	800b8c0 <__kernel_cos+0xf0>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4650      	mov	r0, sl
 800b8a8:	4659      	mov	r1, fp
 800b8aa:	f7f4 fc5d 	bl	8000168 <__aeabi_dsub>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4922      	ldr	r1, [pc, #136]	; (800b940 <__kernel_cos+0x170>)
 800b8b6:	f7f4 fc57 	bl	8000168 <__aeabi_dsub>
 800b8ba:	b003      	add	sp, #12
 800b8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c0:	2400      	movs	r4, #0
 800b8c2:	4b20      	ldr	r3, [pc, #128]	; (800b944 <__kernel_cos+0x174>)
 800b8c4:	4622      	mov	r2, r4
 800b8c6:	429e      	cmp	r6, r3
 800b8c8:	bfcc      	ite	gt
 800b8ca:	4d1f      	ldrgt	r5, [pc, #124]	; (800b948 <__kernel_cos+0x178>)
 800b8cc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b8d0:	462b      	mov	r3, r5
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	491a      	ldr	r1, [pc, #104]	; (800b940 <__kernel_cos+0x170>)
 800b8d6:	f7f4 fc47 	bl	8000168 <__aeabi_dsub>
 800b8da:	4622      	mov	r2, r4
 800b8dc:	4606      	mov	r6, r0
 800b8de:	460f      	mov	r7, r1
 800b8e0:	462b      	mov	r3, r5
 800b8e2:	4650      	mov	r0, sl
 800b8e4:	4659      	mov	r1, fp
 800b8e6:	f7f4 fc3f 	bl	8000168 <__aeabi_dsub>
 800b8ea:	4642      	mov	r2, r8
 800b8ec:	464b      	mov	r3, r9
 800b8ee:	f7f4 fc3b 	bl	8000168 <__aeabi_dsub>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	e7dc      	b.n	800b8b6 <__kernel_cos+0xe6>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	4910      	ldr	r1, [pc, #64]	; (800b940 <__kernel_cos+0x170>)
 800b900:	e7db      	b.n	800b8ba <__kernel_cos+0xea>
 800b902:	bf00      	nop
 800b904:	f3af 8000 	nop.w
 800b908:	be8838d4 	.word	0xbe8838d4
 800b90c:	bda8fae9 	.word	0xbda8fae9
 800b910:	bdb4b1c4 	.word	0xbdb4b1c4
 800b914:	3e21ee9e 	.word	0x3e21ee9e
 800b918:	809c52ad 	.word	0x809c52ad
 800b91c:	3e927e4f 	.word	0x3e927e4f
 800b920:	19cb1590 	.word	0x19cb1590
 800b924:	3efa01a0 	.word	0x3efa01a0
 800b928:	16c15177 	.word	0x16c15177
 800b92c:	3f56c16c 	.word	0x3f56c16c
 800b930:	5555554c 	.word	0x5555554c
 800b934:	3fa55555 	.word	0x3fa55555
 800b938:	3fe00000 	.word	0x3fe00000
 800b93c:	3fd33332 	.word	0x3fd33332
 800b940:	3ff00000 	.word	0x3ff00000
 800b944:	3fe90000 	.word	0x3fe90000
 800b948:	3fd20000 	.word	0x3fd20000
 800b94c:	00000000 	.word	0x00000000

0800b950 <__kernel_sin>:
 800b950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b954:	b086      	sub	sp, #24
 800b956:	e9cd 2300 	strd	r2, r3, [sp]
 800b95a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b95e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b962:	4682      	mov	sl, r0
 800b964:	460c      	mov	r4, r1
 800b966:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b968:	da03      	bge.n	800b972 <__kernel_sin+0x22>
 800b96a:	f7f5 f865 	bl	8000a38 <__aeabi_d2iz>
 800b96e:	2800      	cmp	r0, #0
 800b970:	d050      	beq.n	800ba14 <__kernel_sin+0xc4>
 800b972:	4652      	mov	r2, sl
 800b974:	4623      	mov	r3, r4
 800b976:	4650      	mov	r0, sl
 800b978:	4621      	mov	r1, r4
 800b97a:	f7f4 fdad 	bl	80004d8 <__aeabi_dmul>
 800b97e:	4606      	mov	r6, r0
 800b980:	460f      	mov	r7, r1
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4650      	mov	r0, sl
 800b988:	4621      	mov	r1, r4
 800b98a:	f7f4 fda5 	bl	80004d8 <__aeabi_dmul>
 800b98e:	a33e      	add	r3, pc, #248	; (adr r3, 800ba88 <__kernel_sin+0x138>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	4680      	mov	r8, r0
 800b996:	4689      	mov	r9, r1
 800b998:	4630      	mov	r0, r6
 800b99a:	4639      	mov	r1, r7
 800b99c:	f7f4 fd9c 	bl	80004d8 <__aeabi_dmul>
 800b9a0:	a33b      	add	r3, pc, #236	; (adr r3, 800ba90 <__kernel_sin+0x140>)
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f7f4 fbdf 	bl	8000168 <__aeabi_dsub>
 800b9aa:	4632      	mov	r2, r6
 800b9ac:	463b      	mov	r3, r7
 800b9ae:	f7f4 fd93 	bl	80004d8 <__aeabi_dmul>
 800b9b2:	a339      	add	r3, pc, #228	; (adr r3, 800ba98 <__kernel_sin+0x148>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 fbd8 	bl	800016c <__adddf3>
 800b9bc:	4632      	mov	r2, r6
 800b9be:	463b      	mov	r3, r7
 800b9c0:	f7f4 fd8a 	bl	80004d8 <__aeabi_dmul>
 800b9c4:	a336      	add	r3, pc, #216	; (adr r3, 800baa0 <__kernel_sin+0x150>)
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f7f4 fbcd 	bl	8000168 <__aeabi_dsub>
 800b9ce:	4632      	mov	r2, r6
 800b9d0:	463b      	mov	r3, r7
 800b9d2:	f7f4 fd81 	bl	80004d8 <__aeabi_dmul>
 800b9d6:	a334      	add	r3, pc, #208	; (adr r3, 800baa8 <__kernel_sin+0x158>)
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	f7f4 fbc6 	bl	800016c <__adddf3>
 800b9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e4:	b9dd      	cbnz	r5, 800ba1e <__kernel_sin+0xce>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	f7f4 fd73 	bl	80004d8 <__aeabi_dmul>
 800b9f2:	a32f      	add	r3, pc, #188	; (adr r3, 800bab0 <__kernel_sin+0x160>)
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	f7f4 fbb6 	bl	8000168 <__aeabi_dsub>
 800b9fc:	4642      	mov	r2, r8
 800b9fe:	464b      	mov	r3, r9
 800ba00:	f7f4 fd6a 	bl	80004d8 <__aeabi_dmul>
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	4650      	mov	r0, sl
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	f7f4 fbae 	bl	800016c <__adddf3>
 800ba10:	4682      	mov	sl, r0
 800ba12:	460c      	mov	r4, r1
 800ba14:	4650      	mov	r0, sl
 800ba16:	4621      	mov	r1, r4
 800ba18:	b006      	add	sp, #24
 800ba1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1e:	2200      	movs	r2, #0
 800ba20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba24:	4b24      	ldr	r3, [pc, #144]	; (800bab8 <__kernel_sin+0x168>)
 800ba26:	f7f4 fd57 	bl	80004d8 <__aeabi_dmul>
 800ba2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba32:	4640      	mov	r0, r8
 800ba34:	4649      	mov	r1, r9
 800ba36:	f7f4 fd4f 	bl	80004d8 <__aeabi_dmul>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba42:	f7f4 fb91 	bl	8000168 <__aeabi_dsub>
 800ba46:	4632      	mov	r2, r6
 800ba48:	463b      	mov	r3, r7
 800ba4a:	f7f4 fd45 	bl	80004d8 <__aeabi_dmul>
 800ba4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba52:	f7f4 fb89 	bl	8000168 <__aeabi_dsub>
 800ba56:	a316      	add	r3, pc, #88	; (adr r3, 800bab0 <__kernel_sin+0x160>)
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	460f      	mov	r7, r1
 800ba60:	4640      	mov	r0, r8
 800ba62:	4649      	mov	r1, r9
 800ba64:	f7f4 fd38 	bl	80004d8 <__aeabi_dmul>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	4639      	mov	r1, r7
 800ba70:	f7f4 fb7c 	bl	800016c <__adddf3>
 800ba74:	4602      	mov	r2, r0
 800ba76:	460b      	mov	r3, r1
 800ba78:	4650      	mov	r0, sl
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	f7f4 fb74 	bl	8000168 <__aeabi_dsub>
 800ba80:	e7c6      	b.n	800ba10 <__kernel_sin+0xc0>
 800ba82:	bf00      	nop
 800ba84:	f3af 8000 	nop.w
 800ba88:	5acfd57c 	.word	0x5acfd57c
 800ba8c:	3de5d93a 	.word	0x3de5d93a
 800ba90:	8a2b9ceb 	.word	0x8a2b9ceb
 800ba94:	3e5ae5e6 	.word	0x3e5ae5e6
 800ba98:	57b1fe7d 	.word	0x57b1fe7d
 800ba9c:	3ec71de3 	.word	0x3ec71de3
 800baa0:	19c161d5 	.word	0x19c161d5
 800baa4:	3f2a01a0 	.word	0x3f2a01a0
 800baa8:	1110f8a6 	.word	0x1110f8a6
 800baac:	3f811111 	.word	0x3f811111
 800bab0:	55555549 	.word	0x55555549
 800bab4:	3fc55555 	.word	0x3fc55555
 800bab8:	3fe00000 	.word	0x3fe00000
 800babc:	00000000 	.word	0x00000000

0800bac0 <__ieee754_rem_pio2>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	4614      	mov	r4, r2
 800bac6:	4ac2      	ldr	r2, [pc, #776]	; (800bdd0 <__ieee754_rem_pio2+0x310>)
 800bac8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bacc:	b08d      	sub	sp, #52	; 0x34
 800bace:	4592      	cmp	sl, r2
 800bad0:	9104      	str	r1, [sp, #16]
 800bad2:	dc07      	bgt.n	800bae4 <__ieee754_rem_pio2+0x24>
 800bad4:	2200      	movs	r2, #0
 800bad6:	2300      	movs	r3, #0
 800bad8:	e9c4 0100 	strd	r0, r1, [r4]
 800badc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bae0:	2500      	movs	r5, #0
 800bae2:	e024      	b.n	800bb2e <__ieee754_rem_pio2+0x6e>
 800bae4:	4abb      	ldr	r2, [pc, #748]	; (800bdd4 <__ieee754_rem_pio2+0x314>)
 800bae6:	4592      	cmp	sl, r2
 800bae8:	dc72      	bgt.n	800bbd0 <__ieee754_rem_pio2+0x110>
 800baea:	9b04      	ldr	r3, [sp, #16]
 800baec:	4dba      	ldr	r5, [pc, #744]	; (800bdd8 <__ieee754_rem_pio2+0x318>)
 800baee:	2b00      	cmp	r3, #0
 800baf0:	a3a9      	add	r3, pc, #676	; (adr r3, 800bd98 <__ieee754_rem_pio2+0x2d8>)
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	dd36      	ble.n	800bb66 <__ieee754_rem_pio2+0xa6>
 800baf8:	f7f4 fb36 	bl	8000168 <__aeabi_dsub>
 800bafc:	45aa      	cmp	sl, r5
 800bafe:	4606      	mov	r6, r0
 800bb00:	460f      	mov	r7, r1
 800bb02:	d018      	beq.n	800bb36 <__ieee754_rem_pio2+0x76>
 800bb04:	a3a6      	add	r3, pc, #664	; (adr r3, 800bda0 <__ieee754_rem_pio2+0x2e0>)
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	f7f4 fb2d 	bl	8000168 <__aeabi_dsub>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4630      	mov	r0, r6
 800bb14:	e9c4 2300 	strd	r2, r3, [r4]
 800bb18:	4639      	mov	r1, r7
 800bb1a:	f7f4 fb25 	bl	8000168 <__aeabi_dsub>
 800bb1e:	a3a0      	add	r3, pc, #640	; (adr r3, 800bda0 <__ieee754_rem_pio2+0x2e0>)
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	f7f4 fb20 	bl	8000168 <__aeabi_dsub>
 800bb28:	2501      	movs	r5, #1
 800bb2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb2e:	4628      	mov	r0, r5
 800bb30:	b00d      	add	sp, #52	; 0x34
 800bb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb36:	a39c      	add	r3, pc, #624	; (adr r3, 800bda8 <__ieee754_rem_pio2+0x2e8>)
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	f7f4 fb14 	bl	8000168 <__aeabi_dsub>
 800bb40:	a39b      	add	r3, pc, #620	; (adr r3, 800bdb0 <__ieee754_rem_pio2+0x2f0>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	4606      	mov	r6, r0
 800bb48:	460f      	mov	r7, r1
 800bb4a:	f7f4 fb0d 	bl	8000168 <__aeabi_dsub>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	4630      	mov	r0, r6
 800bb54:	e9c4 2300 	strd	r2, r3, [r4]
 800bb58:	4639      	mov	r1, r7
 800bb5a:	f7f4 fb05 	bl	8000168 <__aeabi_dsub>
 800bb5e:	a394      	add	r3, pc, #592	; (adr r3, 800bdb0 <__ieee754_rem_pio2+0x2f0>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	e7de      	b.n	800bb24 <__ieee754_rem_pio2+0x64>
 800bb66:	f7f4 fb01 	bl	800016c <__adddf3>
 800bb6a:	45aa      	cmp	sl, r5
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	460f      	mov	r7, r1
 800bb70:	d016      	beq.n	800bba0 <__ieee754_rem_pio2+0xe0>
 800bb72:	a38b      	add	r3, pc, #556	; (adr r3, 800bda0 <__ieee754_rem_pio2+0x2e0>)
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	f7f4 faf8 	bl	800016c <__adddf3>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4630      	mov	r0, r6
 800bb82:	e9c4 2300 	strd	r2, r3, [r4]
 800bb86:	4639      	mov	r1, r7
 800bb88:	f7f4 faee 	bl	8000168 <__aeabi_dsub>
 800bb8c:	a384      	add	r3, pc, #528	; (adr r3, 800bda0 <__ieee754_rem_pio2+0x2e0>)
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	f7f4 faeb 	bl	800016c <__adddf3>
 800bb96:	f04f 35ff 	mov.w	r5, #4294967295
 800bb9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb9e:	e7c6      	b.n	800bb2e <__ieee754_rem_pio2+0x6e>
 800bba0:	a381      	add	r3, pc, #516	; (adr r3, 800bda8 <__ieee754_rem_pio2+0x2e8>)
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	f7f4 fae1 	bl	800016c <__adddf3>
 800bbaa:	a381      	add	r3, pc, #516	; (adr r3, 800bdb0 <__ieee754_rem_pio2+0x2f0>)
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	460f      	mov	r7, r1
 800bbb4:	f7f4 fada 	bl	800016c <__adddf3>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	e9c4 2300 	strd	r2, r3, [r4]
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	f7f4 fad0 	bl	8000168 <__aeabi_dsub>
 800bbc8:	a379      	add	r3, pc, #484	; (adr r3, 800bdb0 <__ieee754_rem_pio2+0x2f0>)
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	e7e0      	b.n	800bb92 <__ieee754_rem_pio2+0xd2>
 800bbd0:	4a82      	ldr	r2, [pc, #520]	; (800bddc <__ieee754_rem_pio2+0x31c>)
 800bbd2:	4592      	cmp	sl, r2
 800bbd4:	f300 80d4 	bgt.w	800bd80 <__ieee754_rem_pio2+0x2c0>
 800bbd8:	f000 f966 	bl	800bea8 <fabs>
 800bbdc:	a376      	add	r3, pc, #472	; (adr r3, 800bdb8 <__ieee754_rem_pio2+0x2f8>)
 800bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	460f      	mov	r7, r1
 800bbe6:	f7f4 fc77 	bl	80004d8 <__aeabi_dmul>
 800bbea:	2200      	movs	r2, #0
 800bbec:	4b7c      	ldr	r3, [pc, #496]	; (800bde0 <__ieee754_rem_pio2+0x320>)
 800bbee:	f7f4 fabd 	bl	800016c <__adddf3>
 800bbf2:	f7f4 ff21 	bl	8000a38 <__aeabi_d2iz>
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	f7f4 fc04 	bl	8000404 <__aeabi_i2d>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc04:	a364      	add	r3, pc, #400	; (adr r3, 800bd98 <__ieee754_rem_pio2+0x2d8>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	f7f4 fc65 	bl	80004d8 <__aeabi_dmul>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	460b      	mov	r3, r1
 800bc12:	4630      	mov	r0, r6
 800bc14:	4639      	mov	r1, r7
 800bc16:	f7f4 faa7 	bl	8000168 <__aeabi_dsub>
 800bc1a:	a361      	add	r3, pc, #388	; (adr r3, 800bda0 <__ieee754_rem_pio2+0x2e0>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	4680      	mov	r8, r0
 800bc22:	4689      	mov	r9, r1
 800bc24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc28:	f7f4 fc56 	bl	80004d8 <__aeabi_dmul>
 800bc2c:	2d1f      	cmp	r5, #31
 800bc2e:	4606      	mov	r6, r0
 800bc30:	460f      	mov	r7, r1
 800bc32:	dc0e      	bgt.n	800bc52 <__ieee754_rem_pio2+0x192>
 800bc34:	4b6b      	ldr	r3, [pc, #428]	; (800bde4 <__ieee754_rem_pio2+0x324>)
 800bc36:	1e6a      	subs	r2, r5, #1
 800bc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3c:	4553      	cmp	r3, sl
 800bc3e:	d008      	beq.n	800bc52 <__ieee754_rem_pio2+0x192>
 800bc40:	4632      	mov	r2, r6
 800bc42:	463b      	mov	r3, r7
 800bc44:	4640      	mov	r0, r8
 800bc46:	4649      	mov	r1, r9
 800bc48:	f7f4 fa8e 	bl	8000168 <__aeabi_dsub>
 800bc4c:	e9c4 0100 	strd	r0, r1, [r4]
 800bc50:	e012      	b.n	800bc78 <__ieee754_rem_pio2+0x1b8>
 800bc52:	463b      	mov	r3, r7
 800bc54:	4632      	mov	r2, r6
 800bc56:	4640      	mov	r0, r8
 800bc58:	4649      	mov	r1, r9
 800bc5a:	f7f4 fa85 	bl	8000168 <__aeabi_dsub>
 800bc5e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800bc62:	9305      	str	r3, [sp, #20]
 800bc64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc68:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800bc6c:	2b10      	cmp	r3, #16
 800bc6e:	dc1f      	bgt.n	800bcb0 <__ieee754_rem_pio2+0x1f0>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	e9c4 2300 	strd	r2, r3, [r4]
 800bc78:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	4653      	mov	r3, sl
 800bc80:	4649      	mov	r1, r9
 800bc82:	f7f4 fa71 	bl	8000168 <__aeabi_dsub>
 800bc86:	4632      	mov	r2, r6
 800bc88:	463b      	mov	r3, r7
 800bc8a:	f7f4 fa6d 	bl	8000168 <__aeabi_dsub>
 800bc8e:	460b      	mov	r3, r1
 800bc90:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc94:	9904      	ldr	r1, [sp, #16]
 800bc96:	4602      	mov	r2, r0
 800bc98:	2900      	cmp	r1, #0
 800bc9a:	f6bf af48 	bge.w	800bb2e <__ieee754_rem_pio2+0x6e>
 800bc9e:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800bca2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bca6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bcaa:	60e3      	str	r3, [r4, #12]
 800bcac:	426d      	negs	r5, r5
 800bcae:	e73e      	b.n	800bb2e <__ieee754_rem_pio2+0x6e>
 800bcb0:	a33d      	add	r3, pc, #244	; (adr r3, 800bda8 <__ieee754_rem_pio2+0x2e8>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcba:	f7f4 fc0d 	bl	80004d8 <__aeabi_dmul>
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	460f      	mov	r7, r1
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4640      	mov	r0, r8
 800bcc8:	4649      	mov	r1, r9
 800bcca:	f7f4 fa4d 	bl	8000168 <__aeabi_dsub>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4682      	mov	sl, r0
 800bcd4:	468b      	mov	fp, r1
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	4649      	mov	r1, r9
 800bcda:	f7f4 fa45 	bl	8000168 <__aeabi_dsub>
 800bcde:	4632      	mov	r2, r6
 800bce0:	463b      	mov	r3, r7
 800bce2:	f7f4 fa41 	bl	8000168 <__aeabi_dsub>
 800bce6:	a332      	add	r3, pc, #200	; (adr r3, 800bdb0 <__ieee754_rem_pio2+0x2f0>)
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	4606      	mov	r6, r0
 800bcee:	460f      	mov	r7, r1
 800bcf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcf4:	f7f4 fbf0 	bl	80004d8 <__aeabi_dmul>
 800bcf8:	4632      	mov	r2, r6
 800bcfa:	463b      	mov	r3, r7
 800bcfc:	f7f4 fa34 	bl	8000168 <__aeabi_dsub>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	4606      	mov	r6, r0
 800bd06:	460f      	mov	r7, r1
 800bd08:	4650      	mov	r0, sl
 800bd0a:	4659      	mov	r1, fp
 800bd0c:	f7f4 fa2c 	bl	8000168 <__aeabi_dsub>
 800bd10:	9a05      	ldr	r2, [sp, #20]
 800bd12:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	2b31      	cmp	r3, #49	; 0x31
 800bd1a:	dc06      	bgt.n	800bd2a <__ieee754_rem_pio2+0x26a>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	46d0      	mov	r8, sl
 800bd22:	46d9      	mov	r9, fp
 800bd24:	e9c4 2300 	strd	r2, r3, [r4]
 800bd28:	e7a6      	b.n	800bc78 <__ieee754_rem_pio2+0x1b8>
 800bd2a:	a325      	add	r3, pc, #148	; (adr r3, 800bdc0 <__ieee754_rem_pio2+0x300>)
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd34:	f7f4 fbd0 	bl	80004d8 <__aeabi_dmul>
 800bd38:	4606      	mov	r6, r0
 800bd3a:	460f      	mov	r7, r1
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4650      	mov	r0, sl
 800bd42:	4659      	mov	r1, fp
 800bd44:	f7f4 fa10 	bl	8000168 <__aeabi_dsub>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4680      	mov	r8, r0
 800bd4e:	4689      	mov	r9, r1
 800bd50:	4650      	mov	r0, sl
 800bd52:	4659      	mov	r1, fp
 800bd54:	f7f4 fa08 	bl	8000168 <__aeabi_dsub>
 800bd58:	4632      	mov	r2, r6
 800bd5a:	463b      	mov	r3, r7
 800bd5c:	f7f4 fa04 	bl	8000168 <__aeabi_dsub>
 800bd60:	a319      	add	r3, pc, #100	; (adr r3, 800bdc8 <__ieee754_rem_pio2+0x308>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	4606      	mov	r6, r0
 800bd68:	460f      	mov	r7, r1
 800bd6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd6e:	f7f4 fbb3 	bl	80004d8 <__aeabi_dmul>
 800bd72:	4632      	mov	r2, r6
 800bd74:	463b      	mov	r3, r7
 800bd76:	f7f4 f9f7 	bl	8000168 <__aeabi_dsub>
 800bd7a:	4606      	mov	r6, r0
 800bd7c:	460f      	mov	r7, r1
 800bd7e:	e75f      	b.n	800bc40 <__ieee754_rem_pio2+0x180>
 800bd80:	4a19      	ldr	r2, [pc, #100]	; (800bde8 <__ieee754_rem_pio2+0x328>)
 800bd82:	4592      	cmp	sl, r2
 800bd84:	dd32      	ble.n	800bdec <__ieee754_rem_pio2+0x32c>
 800bd86:	4602      	mov	r2, r0
 800bd88:	460b      	mov	r3, r1
 800bd8a:	f7f4 f9ed 	bl	8000168 <__aeabi_dsub>
 800bd8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd92:	e9c4 0100 	strd	r0, r1, [r4]
 800bd96:	e6a3      	b.n	800bae0 <__ieee754_rem_pio2+0x20>
 800bd98:	54400000 	.word	0x54400000
 800bd9c:	3ff921fb 	.word	0x3ff921fb
 800bda0:	1a626331 	.word	0x1a626331
 800bda4:	3dd0b461 	.word	0x3dd0b461
 800bda8:	1a600000 	.word	0x1a600000
 800bdac:	3dd0b461 	.word	0x3dd0b461
 800bdb0:	2e037073 	.word	0x2e037073
 800bdb4:	3ba3198a 	.word	0x3ba3198a
 800bdb8:	6dc9c883 	.word	0x6dc9c883
 800bdbc:	3fe45f30 	.word	0x3fe45f30
 800bdc0:	2e000000 	.word	0x2e000000
 800bdc4:	3ba3198a 	.word	0x3ba3198a
 800bdc8:	252049c1 	.word	0x252049c1
 800bdcc:	397b839a 	.word	0x397b839a
 800bdd0:	3fe921fb 	.word	0x3fe921fb
 800bdd4:	4002d97b 	.word	0x4002d97b
 800bdd8:	3ff921fb 	.word	0x3ff921fb
 800bddc:	413921fb 	.word	0x413921fb
 800bde0:	3fe00000 	.word	0x3fe00000
 800bde4:	0800d0bc 	.word	0x0800d0bc
 800bde8:	7fefffff 	.word	0x7fefffff
 800bdec:	ea4f 552a 	mov.w	r5, sl, asr #20
 800bdf0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bdf4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800bdf8:	460f      	mov	r7, r1
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	f7f4 fe1c 	bl	8000a38 <__aeabi_d2iz>
 800be00:	f7f4 fb00 	bl	8000404 <__aeabi_i2d>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	4630      	mov	r0, r6
 800be0a:	4639      	mov	r1, r7
 800be0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be10:	f7f4 f9aa 	bl	8000168 <__aeabi_dsub>
 800be14:	2200      	movs	r2, #0
 800be16:	4b22      	ldr	r3, [pc, #136]	; (800bea0 <__ieee754_rem_pio2+0x3e0>)
 800be18:	f7f4 fb5e 	bl	80004d8 <__aeabi_dmul>
 800be1c:	460f      	mov	r7, r1
 800be1e:	4606      	mov	r6, r0
 800be20:	f7f4 fe0a 	bl	8000a38 <__aeabi_d2iz>
 800be24:	f7f4 faee 	bl	8000404 <__aeabi_i2d>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	4630      	mov	r0, r6
 800be2e:	4639      	mov	r1, r7
 800be30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800be34:	f7f4 f998 	bl	8000168 <__aeabi_dsub>
 800be38:	2200      	movs	r2, #0
 800be3a:	4b19      	ldr	r3, [pc, #100]	; (800bea0 <__ieee754_rem_pio2+0x3e0>)
 800be3c:	f7f4 fb4c 	bl	80004d8 <__aeabi_dmul>
 800be40:	f04f 0803 	mov.w	r8, #3
 800be44:	2600      	movs	r6, #0
 800be46:	2700      	movs	r7, #0
 800be48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800be4c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800be50:	4632      	mov	r2, r6
 800be52:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800be56:	463b      	mov	r3, r7
 800be58:	46c2      	mov	sl, r8
 800be5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800be5e:	f7f4 fda3 	bl	80009a8 <__aeabi_dcmpeq>
 800be62:	2800      	cmp	r0, #0
 800be64:	d1f4      	bne.n	800be50 <__ieee754_rem_pio2+0x390>
 800be66:	4b0f      	ldr	r3, [pc, #60]	; (800bea4 <__ieee754_rem_pio2+0x3e4>)
 800be68:	462a      	mov	r2, r5
 800be6a:	9301      	str	r3, [sp, #4]
 800be6c:	2302      	movs	r3, #2
 800be6e:	4621      	mov	r1, r4
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	a806      	add	r0, sp, #24
 800be74:	4653      	mov	r3, sl
 800be76:	f000 f81b 	bl	800beb0 <__kernel_rem_pio2>
 800be7a:	9b04      	ldr	r3, [sp, #16]
 800be7c:	4605      	mov	r5, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f6bf ae55 	bge.w	800bb2e <__ieee754_rem_pio2+0x6e>
 800be84:	e9d4 2100 	ldrd	r2, r1, [r4]
 800be88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be8c:	e9c4 2300 	strd	r2, r3, [r4]
 800be90:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800be94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be98:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800be9c:	e706      	b.n	800bcac <__ieee754_rem_pio2+0x1ec>
 800be9e:	bf00      	nop
 800bea0:	41700000 	.word	0x41700000
 800bea4:	0800d13c 	.word	0x0800d13c

0800bea8 <fabs>:
 800bea8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800beac:	4619      	mov	r1, r3
 800beae:	4770      	bx	lr

0800beb0 <__kernel_rem_pio2>:
 800beb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800beb8:	9308      	str	r3, [sp, #32]
 800beba:	9106      	str	r1, [sp, #24]
 800bebc:	4bb6      	ldr	r3, [pc, #728]	; (800c198 <__kernel_rem_pio2+0x2e8>)
 800bebe:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800bec0:	f112 0f14 	cmn.w	r2, #20
 800bec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bec8:	bfa8      	it	ge
 800beca:	1ed4      	subge	r4, r2, #3
 800becc:	9302      	str	r3, [sp, #8]
 800bece:	9b08      	ldr	r3, [sp, #32]
 800bed0:	bfb8      	it	lt
 800bed2:	2400      	movlt	r4, #0
 800bed4:	f103 33ff 	add.w	r3, r3, #4294967295
 800bed8:	9307      	str	r3, [sp, #28]
 800beda:	bfa4      	itt	ge
 800bedc:	2318      	movge	r3, #24
 800bede:	fb94 f4f3 	sdivge	r4, r4, r3
 800bee2:	f06f 0317 	mvn.w	r3, #23
 800bee6:	fb04 3303 	mla	r3, r4, r3, r3
 800beea:	eb03 0b02 	add.w	fp, r3, r2
 800beee:	9a07      	ldr	r2, [sp, #28]
 800bef0:	9b02      	ldr	r3, [sp, #8]
 800bef2:	1aa7      	subs	r7, r4, r2
 800bef4:	eb03 0802 	add.w	r8, r3, r2
 800bef8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800befa:	2500      	movs	r5, #0
 800befc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bf00:	2200      	movs	r2, #0
 800bf02:	2300      	movs	r3, #0
 800bf04:	9009      	str	r0, [sp, #36]	; 0x24
 800bf06:	ae20      	add	r6, sp, #128	; 0x80
 800bf08:	4545      	cmp	r5, r8
 800bf0a:	dd14      	ble.n	800bf36 <__kernel_rem_pio2+0x86>
 800bf0c:	f04f 0800 	mov.w	r8, #0
 800bf10:	9a08      	ldr	r2, [sp, #32]
 800bf12:	ab20      	add	r3, sp, #128	; 0x80
 800bf14:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800bf18:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800bf1c:	9b02      	ldr	r3, [sp, #8]
 800bf1e:	4598      	cmp	r8, r3
 800bf20:	dc35      	bgt.n	800bf8e <__kernel_rem_pio2+0xde>
 800bf22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf24:	2200      	movs	r2, #0
 800bf26:	f1a3 0908 	sub.w	r9, r3, #8
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	462f      	mov	r7, r5
 800bf2e:	2600      	movs	r6, #0
 800bf30:	e9cd 2300 	strd	r2, r3, [sp]
 800bf34:	e01f      	b.n	800bf76 <__kernel_rem_pio2+0xc6>
 800bf36:	42ef      	cmn	r7, r5
 800bf38:	d40b      	bmi.n	800bf52 <__kernel_rem_pio2+0xa2>
 800bf3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bf3e:	e9cd 2300 	strd	r2, r3, [sp]
 800bf42:	f7f4 fa5f 	bl	8000404 <__aeabi_i2d>
 800bf46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bf4e:	3501      	adds	r5, #1
 800bf50:	e7da      	b.n	800bf08 <__kernel_rem_pio2+0x58>
 800bf52:	4610      	mov	r0, r2
 800bf54:	4619      	mov	r1, r3
 800bf56:	e7f8      	b.n	800bf4a <__kernel_rem_pio2+0x9a>
 800bf58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf5c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800bf60:	f7f4 faba 	bl	80004d8 <__aeabi_dmul>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf6c:	f7f4 f8fe 	bl	800016c <__adddf3>
 800bf70:	e9cd 0100 	strd	r0, r1, [sp]
 800bf74:	3601      	adds	r6, #1
 800bf76:	9b07      	ldr	r3, [sp, #28]
 800bf78:	3f08      	subs	r7, #8
 800bf7a:	429e      	cmp	r6, r3
 800bf7c:	ddec      	ble.n	800bf58 <__kernel_rem_pio2+0xa8>
 800bf7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf82:	f108 0801 	add.w	r8, r8, #1
 800bf86:	e8ea 2302 	strd	r2, r3, [sl], #8
 800bf8a:	3508      	adds	r5, #8
 800bf8c:	e7c6      	b.n	800bf1c <__kernel_rem_pio2+0x6c>
 800bf8e:	9b02      	ldr	r3, [sp, #8]
 800bf90:	aa0c      	add	r2, sp, #48	; 0x30
 800bf92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf96:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf98:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bf9a:	9e02      	ldr	r6, [sp, #8]
 800bf9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bfa0:	930a      	str	r3, [sp, #40]	; 0x28
 800bfa2:	ab98      	add	r3, sp, #608	; 0x260
 800bfa4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bfa8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800bfac:	ab70      	add	r3, sp, #448	; 0x1c0
 800bfae:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800bfb2:	46d0      	mov	r8, sl
 800bfb4:	46b1      	mov	r9, r6
 800bfb6:	af0c      	add	r7, sp, #48	; 0x30
 800bfb8:	9700      	str	r7, [sp, #0]
 800bfba:	f1b9 0f00 	cmp.w	r9, #0
 800bfbe:	f1a8 0808 	sub.w	r8, r8, #8
 800bfc2:	dc70      	bgt.n	800c0a6 <__kernel_rem_pio2+0x1f6>
 800bfc4:	465a      	mov	r2, fp
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	4629      	mov	r1, r5
 800bfca:	f000 fab1 	bl	800c530 <scalbn>
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	460d      	mov	r5, r1
 800bfd8:	f7f4 fa7e 	bl	80004d8 <__aeabi_dmul>
 800bfdc:	f000 fb24 	bl	800c628 <floor>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4b6e      	ldr	r3, [pc, #440]	; (800c19c <__kernel_rem_pio2+0x2ec>)
 800bfe4:	f7f4 fa78 	bl	80004d8 <__aeabi_dmul>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	4620      	mov	r0, r4
 800bfee:	4629      	mov	r1, r5
 800bff0:	f7f4 f8ba 	bl	8000168 <__aeabi_dsub>
 800bff4:	460d      	mov	r5, r1
 800bff6:	4604      	mov	r4, r0
 800bff8:	f7f4 fd1e 	bl	8000a38 <__aeabi_d2iz>
 800bffc:	9004      	str	r0, [sp, #16]
 800bffe:	f7f4 fa01 	bl	8000404 <__aeabi_i2d>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 f8ad 	bl	8000168 <__aeabi_dsub>
 800c00e:	f1bb 0f00 	cmp.w	fp, #0
 800c012:	4680      	mov	r8, r0
 800c014:	4689      	mov	r9, r1
 800c016:	dd6f      	ble.n	800c0f8 <__kernel_rem_pio2+0x248>
 800c018:	1e71      	subs	r1, r6, #1
 800c01a:	ab0c      	add	r3, sp, #48	; 0x30
 800c01c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c020:	9c04      	ldr	r4, [sp, #16]
 800c022:	f1cb 0018 	rsb	r0, fp, #24
 800c026:	fa43 f200 	asr.w	r2, r3, r0
 800c02a:	4414      	add	r4, r2
 800c02c:	4082      	lsls	r2, r0
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	aa0c      	add	r2, sp, #48	; 0x30
 800c032:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c036:	f1cb 0217 	rsb	r2, fp, #23
 800c03a:	9404      	str	r4, [sp, #16]
 800c03c:	4113      	asrs	r3, r2
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	9b00      	ldr	r3, [sp, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	dd66      	ble.n	800c114 <__kernel_rem_pio2+0x264>
 800c046:	2200      	movs	r2, #0
 800c048:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c04c:	4614      	mov	r4, r2
 800c04e:	9b04      	ldr	r3, [sp, #16]
 800c050:	3301      	adds	r3, #1
 800c052:	9304      	str	r3, [sp, #16]
 800c054:	4296      	cmp	r6, r2
 800c056:	f300 80ad 	bgt.w	800c1b4 <__kernel_rem_pio2+0x304>
 800c05a:	f1bb 0f00 	cmp.w	fp, #0
 800c05e:	dd07      	ble.n	800c070 <__kernel_rem_pio2+0x1c0>
 800c060:	f1bb 0f01 	cmp.w	fp, #1
 800c064:	f000 80b5 	beq.w	800c1d2 <__kernel_rem_pio2+0x322>
 800c068:	f1bb 0f02 	cmp.w	fp, #2
 800c06c:	f000 80bb 	beq.w	800c1e6 <__kernel_rem_pio2+0x336>
 800c070:	9b00      	ldr	r3, [sp, #0]
 800c072:	2b02      	cmp	r3, #2
 800c074:	d14e      	bne.n	800c114 <__kernel_rem_pio2+0x264>
 800c076:	4642      	mov	r2, r8
 800c078:	464b      	mov	r3, r9
 800c07a:	2000      	movs	r0, #0
 800c07c:	4948      	ldr	r1, [pc, #288]	; (800c1a0 <__kernel_rem_pio2+0x2f0>)
 800c07e:	f7f4 f873 	bl	8000168 <__aeabi_dsub>
 800c082:	4680      	mov	r8, r0
 800c084:	4689      	mov	r9, r1
 800c086:	2c00      	cmp	r4, #0
 800c088:	d044      	beq.n	800c114 <__kernel_rem_pio2+0x264>
 800c08a:	465a      	mov	r2, fp
 800c08c:	2000      	movs	r0, #0
 800c08e:	4944      	ldr	r1, [pc, #272]	; (800c1a0 <__kernel_rem_pio2+0x2f0>)
 800c090:	f000 fa4e 	bl	800c530 <scalbn>
 800c094:	4602      	mov	r2, r0
 800c096:	460b      	mov	r3, r1
 800c098:	4640      	mov	r0, r8
 800c09a:	4649      	mov	r1, r9
 800c09c:	f7f4 f864 	bl	8000168 <__aeabi_dsub>
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	4689      	mov	r9, r1
 800c0a4:	e036      	b.n	800c114 <__kernel_rem_pio2+0x264>
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	4b3e      	ldr	r3, [pc, #248]	; (800c1a4 <__kernel_rem_pio2+0x2f4>)
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	f7f4 fa13 	bl	80004d8 <__aeabi_dmul>
 800c0b2:	f7f4 fcc1 	bl	8000a38 <__aeabi_d2iz>
 800c0b6:	f7f4 f9a5 	bl	8000404 <__aeabi_i2d>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	4b38      	ldr	r3, [pc, #224]	; (800c1a8 <__kernel_rem_pio2+0x2f8>)
 800c0c6:	f7f4 fa07 	bl	80004d8 <__aeabi_dmul>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	f7f4 f849 	bl	8000168 <__aeabi_dsub>
 800c0d6:	f7f4 fcaf 	bl	8000a38 <__aeabi_d2iz>
 800c0da:	9b00      	ldr	r3, [sp, #0]
 800c0dc:	f109 39ff 	add.w	r9, r9, #4294967295
 800c0e0:	f843 0b04 	str.w	r0, [r3], #4
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c0ee:	f7f4 f83d 	bl	800016c <__adddf3>
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	460d      	mov	r5, r1
 800c0f6:	e760      	b.n	800bfba <__kernel_rem_pio2+0x10a>
 800c0f8:	d105      	bne.n	800c106 <__kernel_rem_pio2+0x256>
 800c0fa:	1e73      	subs	r3, r6, #1
 800c0fc:	aa0c      	add	r2, sp, #48	; 0x30
 800c0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c102:	15db      	asrs	r3, r3, #23
 800c104:	e79b      	b.n	800c03e <__kernel_rem_pio2+0x18e>
 800c106:	2200      	movs	r2, #0
 800c108:	4b28      	ldr	r3, [pc, #160]	; (800c1ac <__kernel_rem_pio2+0x2fc>)
 800c10a:	f7f4 fc6b 	bl	80009e4 <__aeabi_dcmpge>
 800c10e:	2800      	cmp	r0, #0
 800c110:	d13e      	bne.n	800c190 <__kernel_rem_pio2+0x2e0>
 800c112:	9000      	str	r0, [sp, #0]
 800c114:	2200      	movs	r2, #0
 800c116:	2300      	movs	r3, #0
 800c118:	4640      	mov	r0, r8
 800c11a:	4649      	mov	r1, r9
 800c11c:	f7f4 fc44 	bl	80009a8 <__aeabi_dcmpeq>
 800c120:	2800      	cmp	r0, #0
 800c122:	f000 80b2 	beq.w	800c28a <__kernel_rem_pio2+0x3da>
 800c126:	1e74      	subs	r4, r6, #1
 800c128:	4623      	mov	r3, r4
 800c12a:	2200      	movs	r2, #0
 800c12c:	9902      	ldr	r1, [sp, #8]
 800c12e:	428b      	cmp	r3, r1
 800c130:	da60      	bge.n	800c1f4 <__kernel_rem_pio2+0x344>
 800c132:	2a00      	cmp	r2, #0
 800c134:	d075      	beq.n	800c222 <__kernel_rem_pio2+0x372>
 800c136:	ab0c      	add	r3, sp, #48	; 0x30
 800c138:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c13c:	f1ab 0b18 	sub.w	fp, fp, #24
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 80a0 	beq.w	800c286 <__kernel_rem_pio2+0x3d6>
 800c146:	465a      	mov	r2, fp
 800c148:	2000      	movs	r0, #0
 800c14a:	4915      	ldr	r1, [pc, #84]	; (800c1a0 <__kernel_rem_pio2+0x2f0>)
 800c14c:	f000 f9f0 	bl	800c530 <scalbn>
 800c150:	46a2      	mov	sl, r4
 800c152:	4606      	mov	r6, r0
 800c154:	460f      	mov	r7, r1
 800c156:	f04f 0800 	mov.w	r8, #0
 800c15a:	ab70      	add	r3, sp, #448	; 0x1c0
 800c15c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c1a4 <__kernel_rem_pio2+0x2f4>
 800c160:	00e5      	lsls	r5, r4, #3
 800c162:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c166:	f1ba 0f00 	cmp.w	sl, #0
 800c16a:	f280 80c4 	bge.w	800c2f6 <__kernel_rem_pio2+0x446>
 800c16e:	4626      	mov	r6, r4
 800c170:	2e00      	cmp	r6, #0
 800c172:	f2c0 80f6 	blt.w	800c362 <__kernel_rem_pio2+0x4b2>
 800c176:	4b0e      	ldr	r3, [pc, #56]	; (800c1b0 <__kernel_rem_pio2+0x300>)
 800c178:	f04f 0a00 	mov.w	sl, #0
 800c17c:	9307      	str	r3, [sp, #28]
 800c17e:	ab70      	add	r3, sp, #448	; 0x1c0
 800c180:	f04f 0b00 	mov.w	fp, #0
 800c184:	f04f 0800 	mov.w	r8, #0
 800c188:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c18c:	1ba7      	subs	r7, r4, r6
 800c18e:	e0dc      	b.n	800c34a <__kernel_rem_pio2+0x49a>
 800c190:	2302      	movs	r3, #2
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	e757      	b.n	800c046 <__kernel_rem_pio2+0x196>
 800c196:	bf00      	nop
 800c198:	0800d288 	.word	0x0800d288
 800c19c:	40200000 	.word	0x40200000
 800c1a0:	3ff00000 	.word	0x3ff00000
 800c1a4:	3e700000 	.word	0x3e700000
 800c1a8:	41700000 	.word	0x41700000
 800c1ac:	3fe00000 	.word	0x3fe00000
 800c1b0:	0800d248 	.word	0x0800d248
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	b944      	cbnz	r4, 800c1ca <__kernel_rem_pio2+0x31a>
 800c1b8:	b11b      	cbz	r3, 800c1c2 <__kernel_rem_pio2+0x312>
 800c1ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c1be:	603b      	str	r3, [r7, #0]
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	461c      	mov	r4, r3
 800c1c4:	3201      	adds	r2, #1
 800c1c6:	3704      	adds	r7, #4
 800c1c8:	e744      	b.n	800c054 <__kernel_rem_pio2+0x1a4>
 800c1ca:	1acb      	subs	r3, r1, r3
 800c1cc:	603b      	str	r3, [r7, #0]
 800c1ce:	4623      	mov	r3, r4
 800c1d0:	e7f7      	b.n	800c1c2 <__kernel_rem_pio2+0x312>
 800c1d2:	1e72      	subs	r2, r6, #1
 800c1d4:	ab0c      	add	r3, sp, #48	; 0x30
 800c1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c1de:	a90c      	add	r1, sp, #48	; 0x30
 800c1e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c1e4:	e744      	b.n	800c070 <__kernel_rem_pio2+0x1c0>
 800c1e6:	1e72      	subs	r2, r6, #1
 800c1e8:	ab0c      	add	r3, sp, #48	; 0x30
 800c1ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c1f2:	e7f4      	b.n	800c1de <__kernel_rem_pio2+0x32e>
 800c1f4:	a90c      	add	r1, sp, #48	; 0x30
 800c1f6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	430a      	orrs	r2, r1
 800c1fe:	e795      	b.n	800c12c <__kernel_rem_pio2+0x27c>
 800c200:	3301      	adds	r3, #1
 800c202:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c206:	2900      	cmp	r1, #0
 800c208:	d0fa      	beq.n	800c200 <__kernel_rem_pio2+0x350>
 800c20a:	9a08      	ldr	r2, [sp, #32]
 800c20c:	a920      	add	r1, sp, #128	; 0x80
 800c20e:	18b2      	adds	r2, r6, r2
 800c210:	f106 0801 	add.w	r8, r6, #1
 800c214:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c218:	18f4      	adds	r4, r6, r3
 800c21a:	4544      	cmp	r4, r8
 800c21c:	da04      	bge.n	800c228 <__kernel_rem_pio2+0x378>
 800c21e:	4626      	mov	r6, r4
 800c220:	e6bf      	b.n	800bfa2 <__kernel_rem_pio2+0xf2>
 800c222:	2301      	movs	r3, #1
 800c224:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c226:	e7ec      	b.n	800c202 <__kernel_rem_pio2+0x352>
 800c228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c22a:	f04f 0900 	mov.w	r9, #0
 800c22e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c232:	f7f4 f8e7 	bl	8000404 <__aeabi_i2d>
 800c236:	2600      	movs	r6, #0
 800c238:	2700      	movs	r7, #0
 800c23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c23c:	e9c5 0100 	strd	r0, r1, [r5]
 800c240:	3b08      	subs	r3, #8
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	9504      	str	r5, [sp, #16]
 800c246:	9b07      	ldr	r3, [sp, #28]
 800c248:	4599      	cmp	r9, r3
 800c24a:	dd05      	ble.n	800c258 <__kernel_rem_pio2+0x3a8>
 800c24c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c250:	f108 0801 	add.w	r8, r8, #1
 800c254:	3508      	adds	r5, #8
 800c256:	e7e0      	b.n	800c21a <__kernel_rem_pio2+0x36a>
 800c258:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c25c:	9900      	ldr	r1, [sp, #0]
 800c25e:	f109 0901 	add.w	r9, r9, #1
 800c262:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c266:	9100      	str	r1, [sp, #0]
 800c268:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c26c:	f8cd c010 	str.w	ip, [sp, #16]
 800c270:	f7f4 f932 	bl	80004d8 <__aeabi_dmul>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f3 ff76 	bl	800016c <__adddf3>
 800c280:	4606      	mov	r6, r0
 800c282:	460f      	mov	r7, r1
 800c284:	e7df      	b.n	800c246 <__kernel_rem_pio2+0x396>
 800c286:	3c01      	subs	r4, #1
 800c288:	e755      	b.n	800c136 <__kernel_rem_pio2+0x286>
 800c28a:	f1cb 0200 	rsb	r2, fp, #0
 800c28e:	4640      	mov	r0, r8
 800c290:	4649      	mov	r1, r9
 800c292:	f000 f94d 	bl	800c530 <scalbn>
 800c296:	2200      	movs	r2, #0
 800c298:	4ba3      	ldr	r3, [pc, #652]	; (800c528 <__kernel_rem_pio2+0x678>)
 800c29a:	4604      	mov	r4, r0
 800c29c:	460d      	mov	r5, r1
 800c29e:	f7f4 fba1 	bl	80009e4 <__aeabi_dcmpge>
 800c2a2:	b1f8      	cbz	r0, 800c2e4 <__kernel_rem_pio2+0x434>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4ba1      	ldr	r3, [pc, #644]	; (800c52c <__kernel_rem_pio2+0x67c>)
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	f7f4 f914 	bl	80004d8 <__aeabi_dmul>
 800c2b0:	f7f4 fbc2 	bl	8000a38 <__aeabi_d2iz>
 800c2b4:	4607      	mov	r7, r0
 800c2b6:	f7f4 f8a5 	bl	8000404 <__aeabi_i2d>
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	4b9a      	ldr	r3, [pc, #616]	; (800c528 <__kernel_rem_pio2+0x678>)
 800c2be:	f7f4 f90b 	bl	80004d8 <__aeabi_dmul>
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f7f3 ff4d 	bl	8000168 <__aeabi_dsub>
 800c2ce:	f7f4 fbb3 	bl	8000a38 <__aeabi_d2iz>
 800c2d2:	1c74      	adds	r4, r6, #1
 800c2d4:	ab0c      	add	r3, sp, #48	; 0x30
 800c2d6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c2da:	f10b 0b18 	add.w	fp, fp, #24
 800c2de:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c2e2:	e730      	b.n	800c146 <__kernel_rem_pio2+0x296>
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	f7f4 fba6 	bl	8000a38 <__aeabi_d2iz>
 800c2ec:	ab0c      	add	r3, sp, #48	; 0x30
 800c2ee:	4634      	mov	r4, r6
 800c2f0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c2f4:	e727      	b.n	800c146 <__kernel_rem_pio2+0x296>
 800c2f6:	ab0c      	add	r3, sp, #48	; 0x30
 800c2f8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c2fc:	f7f4 f882 	bl	8000404 <__aeabi_i2d>
 800c300:	4632      	mov	r2, r6
 800c302:	463b      	mov	r3, r7
 800c304:	f7f4 f8e8 	bl	80004d8 <__aeabi_dmul>
 800c308:	4642      	mov	r2, r8
 800c30a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c30e:	464b      	mov	r3, r9
 800c310:	4630      	mov	r0, r6
 800c312:	4639      	mov	r1, r7
 800c314:	f7f4 f8e0 	bl	80004d8 <__aeabi_dmul>
 800c318:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c31c:	4606      	mov	r6, r0
 800c31e:	460f      	mov	r7, r1
 800c320:	e721      	b.n	800c166 <__kernel_rem_pio2+0x2b6>
 800c322:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c326:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c32a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c32e:	f8cd c01c 	str.w	ip, [sp, #28]
 800c332:	f7f4 f8d1 	bl	80004d8 <__aeabi_dmul>
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	4650      	mov	r0, sl
 800c33c:	4659      	mov	r1, fp
 800c33e:	f7f3 ff15 	bl	800016c <__adddf3>
 800c342:	4682      	mov	sl, r0
 800c344:	468b      	mov	fp, r1
 800c346:	f108 0801 	add.w	r8, r8, #1
 800c34a:	9b02      	ldr	r3, [sp, #8]
 800c34c:	4598      	cmp	r8, r3
 800c34e:	dc01      	bgt.n	800c354 <__kernel_rem_pio2+0x4a4>
 800c350:	45b8      	cmp	r8, r7
 800c352:	dde6      	ble.n	800c322 <__kernel_rem_pio2+0x472>
 800c354:	ab48      	add	r3, sp, #288	; 0x120
 800c356:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c35a:	e9c7 ab00 	strd	sl, fp, [r7]
 800c35e:	3e01      	subs	r6, #1
 800c360:	e706      	b.n	800c170 <__kernel_rem_pio2+0x2c0>
 800c362:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c364:	2b02      	cmp	r3, #2
 800c366:	dc09      	bgt.n	800c37c <__kernel_rem_pio2+0x4cc>
 800c368:	2b00      	cmp	r3, #0
 800c36a:	dc32      	bgt.n	800c3d2 <__kernel_rem_pio2+0x522>
 800c36c:	d058      	beq.n	800c420 <__kernel_rem_pio2+0x570>
 800c36e:	9b04      	ldr	r3, [sp, #16]
 800c370:	f003 0007 	and.w	r0, r3, #7
 800c374:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c37e:	2b03      	cmp	r3, #3
 800c380:	d1f5      	bne.n	800c36e <__kernel_rem_pio2+0x4be>
 800c382:	ab48      	add	r3, sp, #288	; 0x120
 800c384:	441d      	add	r5, r3
 800c386:	46aa      	mov	sl, r5
 800c388:	46a3      	mov	fp, r4
 800c38a:	f1bb 0f00 	cmp.w	fp, #0
 800c38e:	dc74      	bgt.n	800c47a <__kernel_rem_pio2+0x5ca>
 800c390:	46aa      	mov	sl, r5
 800c392:	46a3      	mov	fp, r4
 800c394:	f1bb 0f01 	cmp.w	fp, #1
 800c398:	f300 808e 	bgt.w	800c4b8 <__kernel_rem_pio2+0x608>
 800c39c:	2700      	movs	r7, #0
 800c39e:	463e      	mov	r6, r7
 800c3a0:	2c01      	cmp	r4, #1
 800c3a2:	f300 80a8 	bgt.w	800c4f6 <__kernel_rem_pio2+0x646>
 800c3a6:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c3aa:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c3ae:	9b00      	ldr	r3, [sp, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f040 80aa 	bne.w	800c50a <__kernel_rem_pio2+0x65a>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	462a      	mov	r2, r5
 800c3ba:	9806      	ldr	r0, [sp, #24]
 800c3bc:	e9c0 2300 	strd	r2, r3, [r0]
 800c3c0:	4622      	mov	r2, r4
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c3c8:	463a      	mov	r2, r7
 800c3ca:	4633      	mov	r3, r6
 800c3cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c3d0:	e7cd      	b.n	800c36e <__kernel_rem_pio2+0x4be>
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	46a0      	mov	r8, r4
 800c3d6:	4601      	mov	r1, r0
 800c3d8:	ab48      	add	r3, sp, #288	; 0x120
 800c3da:	441d      	add	r5, r3
 800c3dc:	f1b8 0f00 	cmp.w	r8, #0
 800c3e0:	da38      	bge.n	800c454 <__kernel_rem_pio2+0x5a4>
 800c3e2:	9b00      	ldr	r3, [sp, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d03c      	beq.n	800c462 <__kernel_rem_pio2+0x5b2>
 800c3e8:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	462b      	mov	r3, r5
 800c3f0:	9d06      	ldr	r5, [sp, #24]
 800c3f2:	2601      	movs	r6, #1
 800c3f4:	e9c5 2300 	strd	r2, r3, [r5]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c3fe:	f7f3 feb3 	bl	8000168 <__aeabi_dsub>
 800c402:	4684      	mov	ip, r0
 800c404:	460f      	mov	r7, r1
 800c406:	ad48      	add	r5, sp, #288	; 0x120
 800c408:	42b4      	cmp	r4, r6
 800c40a:	da2c      	bge.n	800c466 <__kernel_rem_pio2+0x5b6>
 800c40c:	9b00      	ldr	r3, [sp, #0]
 800c40e:	b10b      	cbz	r3, 800c414 <__kernel_rem_pio2+0x564>
 800c410:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c414:	4662      	mov	r2, ip
 800c416:	463b      	mov	r3, r7
 800c418:	9906      	ldr	r1, [sp, #24]
 800c41a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c41e:	e7a6      	b.n	800c36e <__kernel_rem_pio2+0x4be>
 800c420:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800c422:	ab48      	add	r3, sp, #288	; 0x120
 800c424:	4637      	mov	r7, r6
 800c426:	441d      	add	r5, r3
 800c428:	2c00      	cmp	r4, #0
 800c42a:	da09      	bge.n	800c440 <__kernel_rem_pio2+0x590>
 800c42c:	9b00      	ldr	r3, [sp, #0]
 800c42e:	b10b      	cbz	r3, 800c434 <__kernel_rem_pio2+0x584>
 800c430:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c434:	4632      	mov	r2, r6
 800c436:	463b      	mov	r3, r7
 800c438:	9906      	ldr	r1, [sp, #24]
 800c43a:	e9c1 2300 	strd	r2, r3, [r1]
 800c43e:	e796      	b.n	800c36e <__kernel_rem_pio2+0x4be>
 800c440:	4630      	mov	r0, r6
 800c442:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c446:	4639      	mov	r1, r7
 800c448:	f7f3 fe90 	bl	800016c <__adddf3>
 800c44c:	3c01      	subs	r4, #1
 800c44e:	4606      	mov	r6, r0
 800c450:	460f      	mov	r7, r1
 800c452:	e7e9      	b.n	800c428 <__kernel_rem_pio2+0x578>
 800c454:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c458:	f7f3 fe88 	bl	800016c <__adddf3>
 800c45c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c460:	e7bc      	b.n	800c3dc <__kernel_rem_pio2+0x52c>
 800c462:	460d      	mov	r5, r1
 800c464:	e7c2      	b.n	800c3ec <__kernel_rem_pio2+0x53c>
 800c466:	4660      	mov	r0, ip
 800c468:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800c46c:	4639      	mov	r1, r7
 800c46e:	f7f3 fe7d 	bl	800016c <__adddf3>
 800c472:	3601      	adds	r6, #1
 800c474:	4684      	mov	ip, r0
 800c476:	460f      	mov	r7, r1
 800c478:	e7c6      	b.n	800c408 <__kernel_rem_pio2+0x558>
 800c47a:	e9da 6700 	ldrd	r6, r7, [sl]
 800c47e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800c482:	4632      	mov	r2, r6
 800c484:	463b      	mov	r3, r7
 800c486:	4640      	mov	r0, r8
 800c488:	4649      	mov	r1, r9
 800c48a:	f7f3 fe6f 	bl	800016c <__adddf3>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c496:	4640      	mov	r0, r8
 800c498:	4649      	mov	r1, r9
 800c49a:	f7f3 fe65 	bl	8000168 <__aeabi_dsub>
 800c49e:	4632      	mov	r2, r6
 800c4a0:	463b      	mov	r3, r7
 800c4a2:	f7f3 fe63 	bl	800016c <__adddf3>
 800c4a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4aa:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c4ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4b2:	e9ca 2300 	strd	r2, r3, [sl]
 800c4b6:	e768      	b.n	800c38a <__kernel_rem_pio2+0x4da>
 800c4b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800c4bc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	464b      	mov	r3, r9
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	4639      	mov	r1, r7
 800c4c8:	f7f3 fe50 	bl	800016c <__adddf3>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	4639      	mov	r1, r7
 800c4d8:	f7f3 fe46 	bl	8000168 <__aeabi_dsub>
 800c4dc:	4642      	mov	r2, r8
 800c4de:	464b      	mov	r3, r9
 800c4e0:	f7f3 fe44 	bl	800016c <__adddf3>
 800c4e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4e8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c4ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4f0:	e9ca 2300 	strd	r2, r3, [sl]
 800c4f4:	e74e      	b.n	800c394 <__kernel_rem_pio2+0x4e4>
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c4fc:	4631      	mov	r1, r6
 800c4fe:	f7f3 fe35 	bl	800016c <__adddf3>
 800c502:	3c01      	subs	r4, #1
 800c504:	4607      	mov	r7, r0
 800c506:	460e      	mov	r6, r1
 800c508:	e74a      	b.n	800c3a0 <__kernel_rem_pio2+0x4f0>
 800c50a:	9b06      	ldr	r3, [sp, #24]
 800c50c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c510:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c514:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c518:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c51c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c520:	601d      	str	r5, [r3, #0]
 800c522:	615e      	str	r6, [r3, #20]
 800c524:	e723      	b.n	800c36e <__kernel_rem_pio2+0x4be>
 800c526:	bf00      	nop
 800c528:	41700000 	.word	0x41700000
 800c52c:	3e700000 	.word	0x3e700000

0800c530 <scalbn>:
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c532:	4616      	mov	r6, r2
 800c534:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c538:	4604      	mov	r4, r0
 800c53a:	460d      	mov	r5, r1
 800c53c:	460b      	mov	r3, r1
 800c53e:	b992      	cbnz	r2, 800c566 <scalbn+0x36>
 800c540:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c544:	4303      	orrs	r3, r0
 800c546:	d03c      	beq.n	800c5c2 <scalbn+0x92>
 800c548:	4b31      	ldr	r3, [pc, #196]	; (800c610 <scalbn+0xe0>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	f7f3 ffc4 	bl	80004d8 <__aeabi_dmul>
 800c550:	4b30      	ldr	r3, [pc, #192]	; (800c614 <scalbn+0xe4>)
 800c552:	4604      	mov	r4, r0
 800c554:	429e      	cmp	r6, r3
 800c556:	460d      	mov	r5, r1
 800c558:	da0f      	bge.n	800c57a <scalbn+0x4a>
 800c55a:	a329      	add	r3, pc, #164	; (adr r3, 800c600 <scalbn+0xd0>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	f7f3 ffba 	bl	80004d8 <__aeabi_dmul>
 800c564:	e006      	b.n	800c574 <scalbn+0x44>
 800c566:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c56a:	42ba      	cmp	r2, r7
 800c56c:	d109      	bne.n	800c582 <scalbn+0x52>
 800c56e:	4602      	mov	r2, r0
 800c570:	f7f3 fdfc 	bl	800016c <__adddf3>
 800c574:	4604      	mov	r4, r0
 800c576:	460d      	mov	r5, r1
 800c578:	e023      	b.n	800c5c2 <scalbn+0x92>
 800c57a:	460b      	mov	r3, r1
 800c57c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c580:	3a36      	subs	r2, #54	; 0x36
 800c582:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c586:	428e      	cmp	r6, r1
 800c588:	dd0e      	ble.n	800c5a8 <scalbn+0x78>
 800c58a:	a31f      	add	r3, pc, #124	; (adr r3, 800c608 <scalbn+0xd8>)
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c594:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c598:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c59c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c5a0:	481d      	ldr	r0, [pc, #116]	; (800c618 <scalbn+0xe8>)
 800c5a2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c5a6:	e7db      	b.n	800c560 <scalbn+0x30>
 800c5a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c5ac:	4432      	add	r2, r6
 800c5ae:	428a      	cmp	r2, r1
 800c5b0:	dceb      	bgt.n	800c58a <scalbn+0x5a>
 800c5b2:	2a00      	cmp	r2, #0
 800c5b4:	dd08      	ble.n	800c5c8 <scalbn+0x98>
 800c5b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5be:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5c8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c5cc:	da0c      	bge.n	800c5e8 <scalbn+0xb8>
 800c5ce:	a30c      	add	r3, pc, #48	; (adr r3, 800c600 <scalbn+0xd0>)
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c5d8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c5dc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c5e0:	480e      	ldr	r0, [pc, #56]	; (800c61c <scalbn+0xec>)
 800c5e2:	f041 011f 	orr.w	r1, r1, #31
 800c5e6:	e7bb      	b.n	800c560 <scalbn+0x30>
 800c5e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5ec:	3236      	adds	r2, #54	; 0x36
 800c5ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	4b08      	ldr	r3, [pc, #32]	; (800c620 <scalbn+0xf0>)
 800c5fe:	e7af      	b.n	800c560 <scalbn+0x30>
 800c600:	c2f8f359 	.word	0xc2f8f359
 800c604:	01a56e1f 	.word	0x01a56e1f
 800c608:	8800759c 	.word	0x8800759c
 800c60c:	7e37e43c 	.word	0x7e37e43c
 800c610:	43500000 	.word	0x43500000
 800c614:	ffff3cb0 	.word	0xffff3cb0
 800c618:	8800759c 	.word	0x8800759c
 800c61c:	c2f8f359 	.word	0xc2f8f359
 800c620:	3c900000 	.word	0x3c900000
 800c624:	00000000 	.word	0x00000000

0800c628 <floor>:
 800c628:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c630:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c634:	2e13      	cmp	r6, #19
 800c636:	460b      	mov	r3, r1
 800c638:	4607      	mov	r7, r0
 800c63a:	460c      	mov	r4, r1
 800c63c:	4605      	mov	r5, r0
 800c63e:	dc32      	bgt.n	800c6a6 <floor+0x7e>
 800c640:	2e00      	cmp	r6, #0
 800c642:	da14      	bge.n	800c66e <floor+0x46>
 800c644:	a334      	add	r3, pc, #208	; (adr r3, 800c718 <floor+0xf0>)
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	f7f3 fd8f 	bl	800016c <__adddf3>
 800c64e:	2200      	movs	r2, #0
 800c650:	2300      	movs	r3, #0
 800c652:	f7f4 f9d1 	bl	80009f8 <__aeabi_dcmpgt>
 800c656:	b138      	cbz	r0, 800c668 <floor+0x40>
 800c658:	2c00      	cmp	r4, #0
 800c65a:	da56      	bge.n	800c70a <floor+0xe2>
 800c65c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c660:	4325      	orrs	r5, r4
 800c662:	d055      	beq.n	800c710 <floor+0xe8>
 800c664:	2500      	movs	r5, #0
 800c666:	4c2e      	ldr	r4, [pc, #184]	; (800c720 <floor+0xf8>)
 800c668:	4623      	mov	r3, r4
 800c66a:	462f      	mov	r7, r5
 800c66c:	e025      	b.n	800c6ba <floor+0x92>
 800c66e:	4a2d      	ldr	r2, [pc, #180]	; (800c724 <floor+0xfc>)
 800c670:	fa42 f806 	asr.w	r8, r2, r6
 800c674:	ea01 0208 	and.w	r2, r1, r8
 800c678:	4302      	orrs	r2, r0
 800c67a:	d01e      	beq.n	800c6ba <floor+0x92>
 800c67c:	a326      	add	r3, pc, #152	; (adr r3, 800c718 <floor+0xf0>)
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	f7f3 fd73 	bl	800016c <__adddf3>
 800c686:	2200      	movs	r2, #0
 800c688:	2300      	movs	r3, #0
 800c68a:	f7f4 f9b5 	bl	80009f8 <__aeabi_dcmpgt>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d0ea      	beq.n	800c668 <floor+0x40>
 800c692:	2c00      	cmp	r4, #0
 800c694:	bfbe      	ittt	lt
 800c696:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c69a:	4133      	asrlt	r3, r6
 800c69c:	18e4      	addlt	r4, r4, r3
 800c69e:	2500      	movs	r5, #0
 800c6a0:	ea24 0408 	bic.w	r4, r4, r8
 800c6a4:	e7e0      	b.n	800c668 <floor+0x40>
 800c6a6:	2e33      	cmp	r6, #51	; 0x33
 800c6a8:	dd0b      	ble.n	800c6c2 <floor+0x9a>
 800c6aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c6ae:	d104      	bne.n	800c6ba <floor+0x92>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	f7f3 fd5b 	bl	800016c <__adddf3>
 800c6b6:	4607      	mov	r7, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	4619      	mov	r1, r3
 800c6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6c2:	f04f 38ff 	mov.w	r8, #4294967295
 800c6c6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c6ca:	fa28 f802 	lsr.w	r8, r8, r2
 800c6ce:	ea10 0f08 	tst.w	r0, r8
 800c6d2:	d0f2      	beq.n	800c6ba <floor+0x92>
 800c6d4:	a310      	add	r3, pc, #64	; (adr r3, 800c718 <floor+0xf0>)
 800c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6da:	f7f3 fd47 	bl	800016c <__adddf3>
 800c6de:	2200      	movs	r2, #0
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	f7f4 f989 	bl	80009f8 <__aeabi_dcmpgt>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d0be      	beq.n	800c668 <floor+0x40>
 800c6ea:	2c00      	cmp	r4, #0
 800c6ec:	da0a      	bge.n	800c704 <floor+0xdc>
 800c6ee:	2e14      	cmp	r6, #20
 800c6f0:	d101      	bne.n	800c6f6 <floor+0xce>
 800c6f2:	3401      	adds	r4, #1
 800c6f4:	e006      	b.n	800c704 <floor+0xdc>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c6fc:	40b3      	lsls	r3, r6
 800c6fe:	441d      	add	r5, r3
 800c700:	42af      	cmp	r7, r5
 800c702:	d8f6      	bhi.n	800c6f2 <floor+0xca>
 800c704:	ea25 0508 	bic.w	r5, r5, r8
 800c708:	e7ae      	b.n	800c668 <floor+0x40>
 800c70a:	2500      	movs	r5, #0
 800c70c:	462c      	mov	r4, r5
 800c70e:	e7ab      	b.n	800c668 <floor+0x40>
 800c710:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c714:	e7a8      	b.n	800c668 <floor+0x40>
 800c716:	bf00      	nop
 800c718:	8800759c 	.word	0x8800759c
 800c71c:	7e37e43c 	.word	0x7e37e43c
 800c720:	bff00000 	.word	0xbff00000
 800c724:	000fffff 	.word	0x000fffff

0800c728 <_init>:
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72a:	bf00      	nop
 800c72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c72e:	bc08      	pop	{r3}
 800c730:	469e      	mov	lr, r3
 800c732:	4770      	bx	lr

0800c734 <_fini>:
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	bf00      	nop
 800c738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c73a:	bc08      	pop	{r3}
 800c73c:	469e      	mov	lr, r3
 800c73e:	4770      	bx	lr
